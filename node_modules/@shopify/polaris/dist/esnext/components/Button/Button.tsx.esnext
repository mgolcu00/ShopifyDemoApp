import React$1, { useRef, useState, useCallback } from 'react';
import { useFeatures } from '../../utilities/features/hooks.tsx.esnext';
import { useI18n } from '../../utilities/i18n/hooks.tsx.esnext';
import { classNames, variationName } from '../../utilities/css.ts.esnext';
import { CaretDownMinor } from '@shopify/polaris-icons';
import { handleMouseUpByBlurring } from '../../utilities/focus.ts.esnext';
import { UnstyledLink as UnstyledLink$1 } from '../UnstyledLink/UnstyledLink.tsx.esnext';
import { Icon as Icon$1 } from '../Icon/Icon.tsx.esnext';
import { Spinner as Spinner$1 } from '../Spinner/Spinner.tsx.esnext';
import { Popover as Popover$1 } from '../Popover/Popover.tsx.esnext';
import { ActionList as ActionList$1 } from '../ActionList/ActionList.tsx.esnext';
import styles from './Button.scss.esnext';

const DEFAULT_SIZE = 'medium';

var _ref = /*#__PURE__*/React$1.createElement(Icon$1, {
  source: CaretDownMinor
});

function Button({
  id,
  url,
  disabled,
  loading,
  children,
  accessibilityLabel,
  ariaControls,
  ariaExpanded,
  ariaPressed,
  onClick,
  onFocus,
  onBlur,
  onKeyDown,
  onKeyPress,
  onKeyUp,
  onMouseEnter,
  onTouchStart,
  external,
  download,
  icon,
  primary,
  outline,
  destructive,
  disclosure,
  plain,
  monochrome,
  submit,
  size = DEFAULT_SIZE,
  textAlign,
  fullWidth,
  pressed,
  connectedDisclosure
}) {
  const {
    newDesignLanguage
  } = useFeatures();
  const hasGivenDeprecationWarning = useRef(false);

  if (ariaPressed && !hasGivenDeprecationWarning.current) {
    // eslint-disable-next-line no-console
    console.warn('Deprecation: The ariaPressed prop has been replaced with pressed');
    hasGivenDeprecationWarning.current = true;
  }

  const i18n = useI18n();
  const isDisabled = disabled || loading;
  const className = classNames(styles.Button, newDesignLanguage && styles.newDesignLanguage, primary && styles.primary, outline && styles.outline, destructive && styles.destructive, isDisabled && styles.disabled, loading && styles.loading, plain && styles.plain, pressed && !disabled && !url && styles.pressed, monochrome && styles.monochrome, size && size !== DEFAULT_SIZE && styles[variationName('size', size)], textAlign && styles[variationName('textAlign', textAlign)], fullWidth && styles.fullWidth, icon && children == null && styles.iconOnly, connectedDisclosure && styles.connectedDisclosure);
  const disclosureIcon = /*#__PURE__*/React$1.createElement(Icon$1, {
    source: loading ? 'placeholder' : CaretDownMinor
  });
  const disclosureIconMarkup = disclosure ? /*#__PURE__*/React$1.createElement("span", {
    className: styles.Icon
  }, /*#__PURE__*/React$1.createElement("div", {
    className: classNames(styles.DisclosureIcon, disclosure === 'up' && styles.DisclosureIconFacingUp)
  }, disclosureIcon)) : null;
  let iconMarkup;

  if (icon) {
    const iconInner = isIconSource(icon) ? /*#__PURE__*/React$1.createElement(Icon$1, {
      source: loading ? 'placeholder' : icon
    }) : icon;
    iconMarkup = /*#__PURE__*/React$1.createElement("span", {
      className: styles.Icon
    }, iconInner);
  }

  const childMarkup = children ? /*#__PURE__*/React$1.createElement("span", {
    className: styles.Text
  }, children) : null;
  const spinnerColor = primary || destructive ? 'white' : 'inkLightest';
  const spinnerSVGMarkup = loading ? /*#__PURE__*/React$1.createElement("span", {
    className: styles.Spinner
  }, /*#__PURE__*/React$1.createElement(Spinner$1, {
    size: "small",
    color: spinnerColor,
    accessibilityLabel: i18n.translate('Polaris.Button.spinnerAccessibilityLabel')
  })) : null;
  const content = iconMarkup || disclosureIconMarkup ? /*#__PURE__*/React$1.createElement("span", {
    className: styles.Content
  }, spinnerSVGMarkup, iconMarkup, childMarkup, disclosureIconMarkup) : /*#__PURE__*/React$1.createElement("span", {
    className: styles.Content
  }, spinnerSVGMarkup, childMarkup);
  const type = submit ? 'submit' : 'button';
  const ariaPressedStatus = pressed !== undefined ? pressed : ariaPressed;
  const [disclosureActive, setDisclosureActive] = useState(false);
  const toggleDisclosureActive = useCallback(() => {
    setDisclosureActive(disclosureActive => !disclosureActive);
  }, []);
  let connectedDisclosureMarkup;

  if (connectedDisclosure) {
    const connectedDisclosureClassName = classNames(styles.Button, primary && styles.primary, outline && styles.outline, size && size !== DEFAULT_SIZE && styles[variationName('size', size)], textAlign && styles[variationName('textAlign', textAlign)], destructive && styles.destructive, connectedDisclosure.disabled && styles.disabled, styles.iconOnly, styles.ConnectedDisclosure, newDesignLanguage && styles.newDesignLanguage);
    const defaultLabel = i18n.translate('Polaris.Button.connectedDisclosureAccessibilityLabel');
    const {
      disabled,
      accessibilityLabel: disclosureLabel = defaultLabel
    } = connectedDisclosure;
    const connectedDisclosureActivator = /*#__PURE__*/React$1.createElement("button", {
      type: "button",
      className: connectedDisclosureClassName,
      disabled: disabled,
      "aria-label": disclosureLabel,
      onClick: toggleDisclosureActive,
      onMouseUp: handleMouseUpByBlurring
    }, /*#__PURE__*/React$1.createElement("span", {
      className: styles.Icon
    }, _ref));
    connectedDisclosureMarkup = /*#__PURE__*/React$1.createElement(Popover$1, {
      active: disclosureActive,
      onClose: toggleDisclosureActive,
      activator: connectedDisclosureActivator,
      preferredAlignment: "right"
    }, /*#__PURE__*/React$1.createElement(ActionList$1, {
      items: connectedDisclosure.actions,
      onActionAnyItem: toggleDisclosureActive
    }));
  }

  let buttonMarkup;

  if (url) {
    buttonMarkup = isDisabled ?
    /*#__PURE__*/
    // Render an `<a>` so toggling disabled/enabled state changes only the
    // `href` attribute instead of replacing the whole element.
    // eslint-disable-next-line jsx-a11y/anchor-is-valid
    React$1.createElement("a", {
      id: id,
      className: className,
      "aria-label": accessibilityLabel
    }, content) : /*#__PURE__*/React$1.createElement(UnstyledLink$1, {
      id: id,
      url: url,
      external: external,
      download: download,
      onClick: onClick,
      onFocus: onFocus,
      onBlur: onBlur,
      onMouseUp: handleMouseUpByBlurring,
      onMouseEnter: onMouseEnter,
      onTouchStart: onTouchStart,
      className: className,
      "aria-label": accessibilityLabel
    }, content);
  } else {
    buttonMarkup = /*#__PURE__*/React$1.createElement("button", {
      id: id,
      type: type,
      onClick: onClick,
      onFocus: onFocus,
      onBlur: onBlur,
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp,
      onKeyPress: onKeyPress,
      onMouseUp: handleMouseUpByBlurring,
      onMouseEnter: onMouseEnter,
      onTouchStart: onTouchStart,
      className: className,
      disabled: isDisabled,
      "aria-label": accessibilityLabel,
      "aria-controls": ariaControls,
      "aria-expanded": ariaExpanded,
      "aria-pressed": ariaPressedStatus,
      role: loading ? 'alert' : undefined,
      "aria-busy": loading ? true : undefined
    }, content);
  }

  return connectedDisclosureMarkup ? /*#__PURE__*/React$1.createElement("div", {
    className: styles.ConnectedDisclosureWrapper
  }, buttonMarkup, connectedDisclosureMarkup) : buttonMarkup;
}

function isIconSource(x) {
  return typeof x === 'string' || typeof x === 'object' && x.body || typeof x === 'function';
}

export { Button };
