import React$1, { useContext, useMemo, useEffect } from 'react';
import DefaultThemeColors$1 from '@shopify/polaris-tokens/dist-modern/theme/base.json';
import { ThemeContext } from '../../utilities/theme/context.tsx.esnext';
import { buildCustomProperties, buildThemeContext } from '../../utilities/theme/utils.ts.esnext';
import { Tokens } from '../../utilities/theme/tokens.ts.esnext';
import { useFeatures } from '../../utilities/features/hooks.tsx.esnext';

function ThemeProvider({
  theme: themeConfig,
  children
}) {
  const {
    newDesignLanguage
  } = useFeatures();
  const parentContext = useContext(ThemeContext);
  const isParentThemeProvider = parentContext === undefined;
  const parentColorScheme = parentContext && parentContext.colorScheme && parentContext.colorScheme;
  const parentColors = parentContext && parentContext.colors && parentContext.colors;
  const {
    colors,
    colorScheme,
    ...rest
  } = themeConfig;
  const processedThemeConfig = { ...rest,
    ...{
      colorScheme: getColorScheme(colorScheme, parentColorScheme)
    },
    colors: { ...(isParentThemeProvider && DefaultThemeColors$1),
      ...(parentColors != null && parentColors),
      ...colors
    }
  };
  const customProperties = useMemo(() => buildCustomProperties(processedThemeConfig, newDesignLanguage, Tokens), [processedThemeConfig, newDesignLanguage]);
  const theme = useMemo(() => buildThemeContext(processedThemeConfig, newDesignLanguage ? customProperties : undefined), [customProperties, processedThemeConfig, newDesignLanguage]); // We want these values to be empty string instead of `undefined` when not set.
  // Otherwise, setting a style property to `undefined` does not remove it from the DOM.

  const backgroundColor = customProperties['--p-background'] || '';
  const color = customProperties['--p-text'] || '';
  useEffect(() => {
    if (isParentThemeProvider) {
      document.body.style.backgroundColor = backgroundColor;
      document.body.style.color = color;
    }
  }, [backgroundColor, color, isParentThemeProvider]);
  const style = { ...customProperties,
    ...(!isParentThemeProvider && {
      color
    })
  };
  return /*#__PURE__*/React$1.createElement(ThemeContext.Provider, {
    value: { ...theme,
      textColor: color
    }
  }, /*#__PURE__*/React$1.createElement("div", {
    style: style
  }, children));
}

function isInverseColorScheme(colorScheme) {
  return colorScheme === 'inverse';
}

function getColorScheme(colorScheme, parentColorScheme) {
  if (colorScheme == null) {
    return parentColorScheme || 'light';
  } else if (isInverseColorScheme(colorScheme)) {
    return parentColorScheme === 'dark' || parentColorScheme === undefined ? 'light' : 'dark';
  } else {
    return colorScheme;
  }
}

export { ThemeProvider };
