'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var DefaultThemeColors = _interopDefault(require('@shopify/polaris-tokens/dist-modern/theme/base.json'));
var tokens = require('@shopify/polaris-tokens');
var tokens__default = _interopDefault(tokens);
var distModern = require('@shopify/polaris-tokens/dist-modern');
var utils = require('@shopify/polaris-tokens/dist-modern/utils');
var base = require('@shopify/polaris-tokens/dist-modern/configs/base');
var debounce = _interopDefault(require('lodash/debounce'));
var polarisIcons = require('@shopify/polaris-icons');
var reactDom = require('react-dom');
var isEqual = _interopDefault(require('lodash/isEqual'));
var reactTransitionGroup = require('react-transition-group');

if (typeof window !== 'undefined') {
  window.Polaris = window.Polaris || {};
  window.Polaris.VERSION = '5.3.0';
}

var NEW_DESIGN_LANGUAGE_COLORS = ['base', 'subdued', 'critical', 'warning', 'highlight', 'success', 'primary'];
function isNewDesignLanguageColor(color) {
  return NEW_DESIGN_LANGUAGE_COLORS.includes(color);
}

(function (Key) {
  Key[Key["Backspace"] = 8] = "Backspace";
  Key[Key["Tab"] = 9] = "Tab";
  Key[Key["Enter"] = 13] = "Enter";
  Key[Key["Shift"] = 16] = "Shift";
  Key[Key["Ctrl"] = 17] = "Ctrl";
  Key[Key["Alt"] = 18] = "Alt";
  Key[Key["Pause"] = 19] = "Pause";
  Key[Key["CapsLock"] = 20] = "CapsLock";
  Key[Key["Escape"] = 27] = "Escape";
  Key[Key["Space"] = 32] = "Space";
  Key[Key["PageUp"] = 33] = "PageUp";
  Key[Key["PageDown"] = 34] = "PageDown";
  Key[Key["End"] = 35] = "End";
  Key[Key["Home"] = 36] = "Home";
  Key[Key["LeftArrow"] = 37] = "LeftArrow";
  Key[Key["UpArrow"] = 38] = "UpArrow";
  Key[Key["RightArrow"] = 39] = "RightArrow";
  Key[Key["DownArrow"] = 40] = "DownArrow";
  Key[Key["Insert"] = 45] = "Insert";
  Key[Key["Delete"] = 46] = "Delete";
  Key[Key["Key0"] = 48] = "Key0";
  Key[Key["Key1"] = 49] = "Key1";
  Key[Key["Key2"] = 50] = "Key2";
  Key[Key["Key3"] = 51] = "Key3";
  Key[Key["Key4"] = 52] = "Key4";
  Key[Key["Key5"] = 53] = "Key5";
  Key[Key["Key6"] = 54] = "Key6";
  Key[Key["Key7"] = 55] = "Key7";
  Key[Key["Key8"] = 56] = "Key8";
  Key[Key["Key9"] = 57] = "Key9";
  Key[Key["KeyA"] = 65] = "KeyA";
  Key[Key["KeyB"] = 66] = "KeyB";
  Key[Key["KeyC"] = 67] = "KeyC";
  Key[Key["KeyD"] = 68] = "KeyD";
  Key[Key["KeyE"] = 69] = "KeyE";
  Key[Key["KeyF"] = 70] = "KeyF";
  Key[Key["KeyG"] = 71] = "KeyG";
  Key[Key["KeyH"] = 72] = "KeyH";
  Key[Key["KeyI"] = 73] = "KeyI";
  Key[Key["KeyJ"] = 74] = "KeyJ";
  Key[Key["KeyK"] = 75] = "KeyK";
  Key[Key["KeyL"] = 76] = "KeyL";
  Key[Key["KeyM"] = 77] = "KeyM";
  Key[Key["KeyN"] = 78] = "KeyN";
  Key[Key["KeyO"] = 79] = "KeyO";
  Key[Key["KeyP"] = 80] = "KeyP";
  Key[Key["KeyQ"] = 81] = "KeyQ";
  Key[Key["KeyR"] = 82] = "KeyR";
  Key[Key["KeyS"] = 83] = "KeyS";
  Key[Key["KeyT"] = 84] = "KeyT";
  Key[Key["KeyU"] = 85] = "KeyU";
  Key[Key["KeyV"] = 86] = "KeyV";
  Key[Key["KeyW"] = 87] = "KeyW";
  Key[Key["KeyX"] = 88] = "KeyX";
  Key[Key["KeyY"] = 89] = "KeyY";
  Key[Key["KeyZ"] = 90] = "KeyZ";
  Key[Key["LeftMeta"] = 91] = "LeftMeta";
  Key[Key["RightMeta"] = 92] = "RightMeta";
  Key[Key["Select"] = 93] = "Select";
  Key[Key["Numpad0"] = 96] = "Numpad0";
  Key[Key["Numpad1"] = 97] = "Numpad1";
  Key[Key["Numpad2"] = 98] = "Numpad2";
  Key[Key["Numpad3"] = 99] = "Numpad3";
  Key[Key["Numpad4"] = 100] = "Numpad4";
  Key[Key["Numpad5"] = 101] = "Numpad5";
  Key[Key["Numpad6"] = 102] = "Numpad6";
  Key[Key["Numpad7"] = 103] = "Numpad7";
  Key[Key["Numpad8"] = 104] = "Numpad8";
  Key[Key["Numpad9"] = 105] = "Numpad9";
  Key[Key["Multiply"] = 106] = "Multiply";
  Key[Key["Add"] = 107] = "Add";
  Key[Key["Subtract"] = 109] = "Subtract";
  Key[Key["Decimal"] = 110] = "Decimal";
  Key[Key["Divide"] = 111] = "Divide";
  Key[Key["F1"] = 112] = "F1";
  Key[Key["F2"] = 113] = "F2";
  Key[Key["F3"] = 114] = "F3";
  Key[Key["F4"] = 115] = "F4";
  Key[Key["F5"] = 116] = "F5";
  Key[Key["F6"] = 117] = "F6";
  Key[Key["F7"] = 118] = "F7";
  Key[Key["F8"] = 119] = "F8";
  Key[Key["F9"] = 120] = "F9";
  Key[Key["F10"] = 121] = "F10";
  Key[Key["F11"] = 122] = "F11";
  Key[Key["F12"] = 123] = "F12";
  Key[Key["NumLock"] = 144] = "NumLock";
  Key[Key["ScrollLock"] = 145] = "ScrollLock";
  Key[Key["Semicolon"] = 186] = "Semicolon";
  Key[Key["Equals"] = 187] = "Equals";
  Key[Key["Comma"] = 188] = "Comma";
  Key[Key["Dash"] = 189] = "Dash";
  Key[Key["Period"] = 190] = "Period";
  Key[Key["ForwardSlash"] = 191] = "ForwardSlash";
  Key[Key["GraveAccent"] = 192] = "GraveAccent";
  Key[Key["OpenBracket"] = 219] = "OpenBracket";
  Key[Key["BackSlash"] = 220] = "BackSlash";
  Key[Key["CloseBracket"] = 221] = "CloseBracket";
  Key[Key["SingleQuote"] = 222] = "SingleQuote";
})(exports.Key || (exports.Key = {}));

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var ThemeContext = /*#__PURE__*/React.createContext(undefined);

class MissingAppProviderError extends Error {
  constructor(message = '') {
    super("".concat(message ? "".concat(message, " ") : message, "Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/structure/app-provider for implementation instructions."));
    this.name = 'MissingAppProviderError';
  }

}

function useTheme() {
  var theme = React.useContext(ThemeContext);

  if (!theme) {
    throw new MissingAppProviderError('No Theme was provided.');
  }

  return theme;
}

function clamp(number, min, max) {
  if (number < min) return min;
  if (number > max) return max;
  return number;
}

function rgbString(color) {
  var {
    red,
    green,
    blue
  } = color;

  if ('alpha' in color) {
    return "rgba(".concat(red, ", ").concat(green, ", ").concat(blue, ", ").concat(color.alpha, ")");
  } else {
    return "rgb(".concat(red, ", ").concat(green, ", ").concat(blue, ")");
  }
}
var rgbaString = rgbString;
function rgbToHex({
  red,
  green,
  blue
}) {
  return "#".concat(componentToHex(red)).concat(componentToHex(green)).concat(componentToHex(blue));
}

function componentToHex(component) {
  var hex = component.toString(16);
  return hex.length === 1 ? "0".concat(hex) : hex;
}

function hsbToHex(color) {
  return rgbToHex(hsbToRgb(color));
}

function rgbFromHueAndChroma(hue, chroma) {
  var huePrime = hue / 60;
  var hueDelta = 1 - Math.abs(huePrime % 2 - 1);
  var intermediateValue = chroma * hueDelta;
  var red = 0;
  var green = 0;
  var blue = 0;

  if (huePrime >= 0 && huePrime <= 1) {
    red = chroma;
    green = intermediateValue;
    blue = 0;
  }

  if (huePrime >= 1 && huePrime <= 2) {
    red = intermediateValue;
    green = chroma;
    blue = 0;
  }

  if (huePrime >= 2 && huePrime <= 3) {
    red = 0;
    green = chroma;
    blue = intermediateValue;
  }

  if (huePrime >= 3 && huePrime <= 4) {
    red = 0;
    green = intermediateValue;
    blue = chroma;
  }

  if (huePrime >= 4 && huePrime <= 5) {
    red = intermediateValue;
    green = 0;
    blue = chroma;
  }

  if (huePrime >= 5 && huePrime <= 6) {
    red = chroma;
    green = 0;
    blue = intermediateValue;
  }

  return {
    red,
    green,
    blue
  };
} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV


function hsbToRgb(color) {
  var {
    hue,
    saturation,
    brightness,
    alpha = 1
  } = color;
  var chroma = brightness * saturation;
  var {
    red,
    green,
    blue
  } = rgbFromHueAndChroma(hue, chroma);
  var chromaBrightnessDelta = brightness - chroma;
  red += chromaBrightnessDelta;
  green += chromaBrightnessDelta;
  blue += chromaBrightnessDelta;
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha
  };
} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV

function hslToRgb(color) {
  var {
    hue,
    saturation,
    lightness,
    alpha = 1
  } = color;
  var chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100);
  var {
    red,
    green,
    blue
  } = rgbFromHueAndChroma(hue, chroma);
  var lightnessVal = lightness / 100 - chroma / 2;
  red += lightnessVal;
  green += lightnessVal;
  blue += lightnessVal;
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha
  };
} // ref https://en.wikipedia.org/wiki/HSL_and_HSV

function rgbToHsbl(color, type = 'b') {
  var {
    red: r,
    green: g,
    blue: b,
    alpha = 1
  } = color;
  var red = r / 255;
  var green = g / 255;
  var blue = b / 255;
  var largestComponent = Math.max(red, green, blue);
  var smallestComponent = Math.min(red, green, blue);
  var delta = largestComponent - smallestComponent;
  var lightness = (largestComponent + smallestComponent) / 2;
  var saturation = 0;

  if (largestComponent === 0) {
    saturation = 0;
  } else if (type === 'b') {
    saturation = delta / largestComponent;
  } else if (type === 'l') {
    var baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);
    saturation = isNaN(baseSaturation) ? 0 : baseSaturation;
  }

  var huePercentage = 0;

  switch (largestComponent) {
    case red:
      huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);
      break;

    case green:
      huePercentage = (blue - red) / delta + 2;
      break;

    case blue:
      huePercentage = (red - green) / delta + 4;
  }

  var hue = Math.round(huePercentage / 6 * 360);
  return {
    hue: clamp(hue, 0, 360) || 0,
    saturation: parseFloat(clamp(saturation, 0, 1).toFixed(2)),
    brightness: parseFloat(clamp(largestComponent, 0, 1).toFixed(2)),
    lightness: parseFloat(lightness.toFixed(2)),
    alpha: parseFloat(alpha.toFixed(2))
  };
}

function rgbToHsb(color) {
  var {
    hue,
    saturation,
    brightness,
    alpha = 1
  } = rgbToHsbl(color, 'b');
  return {
    hue,
    saturation,
    brightness,
    alpha
  };
}
function rgbToHsl(color) {
  var {
    hue,
    saturation: rawSaturation,
    lightness: rawLightness,
    alpha = 1
  } = rgbToHsbl(color, 'l');
  var saturation = rawSaturation * 100;
  var lightness = rawLightness * 100;
  return {
    hue,
    saturation,
    lightness,
    alpha
  };
}
function hexToRgb(color) {
  if (color.length === 4) {
    var repeatHex = (hex1, hex2) => color.slice(hex1, hex2).repeat(2);

    var _red = parseInt(repeatHex(1, 2), 16);

    var _green = parseInt(repeatHex(2, 3), 16);

    var _blue = parseInt(repeatHex(3, 4), 16);

    return {
      red: _red,
      green: _green,
      blue: _blue
    };
  }

  var red = parseInt(color.slice(1, 3), 16);
  var green = parseInt(color.slice(3, 5), 16);
  var blue = parseInt(color.slice(5, 7), 16);
  return {
    red,
    green,
    blue
  };
}

function getColorType(color) {
  if (color.includes('#')) {
    return 'hex';
  } else if (color.includes('rgb')) {
    return 'rgb';
  } else if (color.includes('rgba')) {
    return 'rgba';
  } else if (color.includes('hsl')) {
    return 'hsl';
  } else if (color.includes('hsla')) {
    return 'hsla';
  } else {
    if (process.env.NODE_ENV === 'development') {
      /* eslint-disable-next-line no-console */
      console.warn('Accepted colors formats are: hex, rgb, rgba, hsl and hsla');
    }

    return 'default';
  }
}

function hslToString(hslColor) {
  if (typeof hslColor === 'string') {
    return hslColor;
  }

  var alpha = 'alpha' in hslColor ? hslColor.alpha : 1;
  var {
    hue,
    lightness,
    saturation
  } = hslColor;
  return "hsla(".concat(hue, ", ").concat(saturation, "%, ").concat(lightness, "%, ").concat(alpha, ")");
}

function rgbToObject(color) {
  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
  var colorMatch = color.match(/\(([^)]+)\)/);

  if (!colorMatch) {
    return {
      red: 0,
      green: 0,
      blue: 0,
      alpha: 0
    };
  }

  var [red, green, blue, alpha] = colorMatch[1].split(',');
  var objColor = {
    red: parseInt(red, 10),
    green: parseInt(green, 10),
    blue: parseInt(blue, 10),
    alpha: parseInt(alpha, 10) || 1
  };
  return objColor;
}

function hexToHsla(color) {
  return rgbToHsl(hexToRgb(color));
}

function rbgStringToHsla(color) {
  return rgbToHsl(rgbToObject(color));
}

function hslToObject(color) {
  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
  var colorMatch = color.match(/\(([^)]+)\)/);

  if (!colorMatch) {
    return {
      hue: 0,
      saturation: 0,
      lightness: 0,
      alpha: 0
    };
  }

  var [hue, saturation, lightness, alpha] = colorMatch[1].split(',');
  var objColor = {
    hue: parseInt(hue, 10),
    saturation: parseInt(saturation, 10),
    lightness: parseInt(lightness, 10),
    alpha: parseFloat(alpha) || 1
  };
  return objColor;
}

function colorToHsla(color) {
  var type = getColorType(color);

  switch (type) {
    case 'hex':
      return hexToHsla(color);

    case 'rgb':
    case 'rgba':
      return rbgStringToHsla(color);

    case 'hsl':
    case 'hsla':
      return hslToObject(color);

    case 'default':
    default:
      throw new Error('Accepted color formats are: hex, rgb, rgba, hsl and hsla');
  }
}

// implements: https://www.w3.org/WAI/ER/WD-AERT/#color-contrast
function isLight({
  red,
  green,
  blue
}) {
  var contrast = (red * 299 + green * 587 + blue * 114) / 1000;
  return contrast > 125;
}

function normalizeName(name) {
  return name.split(/(?=[A-Z])/).join('-').toLowerCase();
}
function constructColorName(baseName, property, suffix) {
  var name = normalizeName(baseName);
  var propertyName = property ? "-".concat(normalizeName(property)) : '';
  var constructedSuffix = suffix ? "-".concat(suffix) : '';
  return "--".concat(name).concat(propertyName).concat(constructedSuffix);
}

function lightenColor(color, lighten = 0) {
  if (typeof color === 'string') {
    return color;
  }

  var {
    lightness
  } = color;
  var nextLightness = lightness + lighten;
  return _objectSpread2(_objectSpread2({}, color), {}, {
    lightness: clamp(nextLightness, 0, 100)
  });
}
function saturateColor(color, saturate = 0) {
  if (typeof color === 'string') {
    return color;
  }

  var {
    saturation
  } = color;
  var nextSaturation = saturation + saturate;
  return _objectSpread2(_objectSpread2({}, color), {}, {
    saturation: nextSaturation
  });
}
function createLightColor(color, lightness, saturation) {
  if (typeof color === 'string') {
    return color;
  }

  var lightenedColor = lightenColor(color, lightness);
  var saturatedColor = saturateColor(lightenedColor, -saturation);
  return saturatedColor;
}

var needsVariantList = ['topBar'];

function buildCustomProperties(themeConfig, newDesignLanguage, tokens) {
  var {
    colors = {},
    colorScheme,
    config,
    frameOffset = 0
  } = themeConfig;
  var mergedConfig = utils.mergeConfigs(base.config, config || {});
  return newDesignLanguage ? customPropertyTransformer(_objectSpread2(_objectSpread2(_objectSpread2({}, distModern.colorFactory(colors, colorScheme, mergedConfig)), tokens), {}, {
    frameOffset: "".concat(frameOffset, "px")
  })) : _objectSpread2(_objectSpread2({}, buildLegacyColors(themeConfig)), customPropertyTransformer({
    frameOffset: "".concat(frameOffset, "px")
  }));
}
function buildThemeContext(themeConfig, cssCustomProperties) {
  var {
    logo,
    colors = {},
    colorScheme
  } = themeConfig;

  var newDesignLanguageColors = _objectWithoutProperties(colors, ["topBar"]);

  return {
    logo,
    cssCustomProperties: toString(cssCustomProperties),
    colors: newDesignLanguageColors,
    colorScheme
  };
}

function toString(obj) {
  if (obj) {
    return Object.entries(obj).map(pair => pair.join(':')).join(';');
  } else {
    return undefined;
  }
}

function customPropertyTransformer(properties) {
  return Object.entries(properties).reduce((transformed, [key, value]) => _objectSpread2(_objectSpread2({}, transformed), {}, {
    [toCssCustomPropertySyntax(key)]: value
  }), {});
}

function toCssCustomPropertySyntax(camelCase) {
  return "--p-".concat(camelCase.replace(/([A-Z0-9])/g, '-$1').toLowerCase());
}

function buildLegacyColors(theme) {
  var colorPairs;
  var colors = theme && theme.colors && theme.colors.topBar ? theme.colors.topBar : {
    background: '#00848e',
    backgroundLighter: '#1d9ba4',
    color: '#f9fafb'
  };
  var colorKey = 'topBar';
  var colorKeys = Object.keys(colors);

  if (colorKeys.length > 1) {
    colorPairs = colorKeys.map(key => {
      return [constructColorName(colorKey, key), colors[key]];
    });
  } else {
    colorPairs = parseColors([colorKey, colors]);
  }

  return colorPairs.reduce((state, [key, value]) => _objectSpread2(_objectSpread2({}, state), {}, {
    [key]: value
  }), {});
}

function needsVariant(name) {
  return needsVariantList.includes(name);
}

function lightenToString(color, lightness, saturation) {
  return hslToString(createLightColor(color, lightness, saturation));
}

function setTextColor(name, variant = 'dark') {
  if (variant === 'light') {
    return [name, tokens__default.colorInk];
  }

  return [name, tokens__default.colorWhite];
}
function setBorderColor(name, variant = 'dark') {
  if (variant === 'light') {
    return [name, tokens__default.colorInkLighter];
  }

  return [name, tokens__default.colorSkyDark];
}
function setTheme(color, baseName, key, variant) {
  var colorPairs = [];

  switch (variant) {
    case 'light':
      colorPairs.push(setTextColor(constructColorName(baseName, null, 'color'), 'light'));
      colorPairs.push(setBorderColor(constructColorName(baseName, null, 'border'), 'light'));
      colorPairs.push([constructColorName(baseName, key, 'lighter'), lightenToString(color, 7, -10)]);
      break;

    case 'dark':
      colorPairs.push(setTextColor(constructColorName(baseName, null, 'color'), 'dark'));
      colorPairs.push(setBorderColor(constructColorName(baseName, null, 'border'), 'dark'));
      colorPairs.push([constructColorName(baseName, key, 'lighter'), lightenToString(color, 15, 15)]);
      break;
  }

  return colorPairs;
}

function parseColors([baseName, colors]) {
  var keys = Object.keys(colors);
  var colorPairs = [];

  for (var _key of keys) {
    colorPairs.push([constructColorName(baseName, _key), colors[_key]]);

    if (needsVariant(baseName)) {
      var hslColor = colorToHsla(colors[_key]);

      if (typeof hslColor === 'string') {
        return colorPairs;
      }

      var rgbColor = hslToRgb(hslColor);

      if (isLight(rgbColor)) {
        colorPairs.push(...setTheme(hslColor, baseName, _key, 'light'));
      } else {
        colorPairs.push(...setTheme(hslColor, baseName, _key, 'dark'));
      }
    }
  }

  return colorPairs;
}

var Tokens = {
  // Border Radiuses
  borderRadiusBase: rem('4px'),
  borderRadiusWide: rem('8px'),
  // Shadows
  cardShadow: '0px 0px 5px var(--p-shadow-from-ambient-light), 0px 1px 2px var(--p-shadow-from-direct-light)',
  popoverShadow: '-1px 0px 20px var(--p-shadow-from-ambient-light), 0px 1px 5px var(--p-shadow-from-direct-light)',
  modalShadow: '0px 26px 80px var(--p-shadow-from-dim-light), 0px 0px 1px var(--p-shadow-from-dim-light)',
  topBarShadow: '0 2px 2px -1px var(--p-shadow-from-direct-light)',
  buttonDropShadow: '0 1px 0 rgba(0, 0, 0, 0.05)',
  buttonInnerShadow: 'inset 0 -1px 0 rgba(0, 0, 0, 0.2)',
  buttonPressedInnerShadow: 'inset 0 1px 0 rgba(0, 0, 0, 0.15)',
  // Overrides
  overrideNone: 'none',
  overrideTransparent: 'transparent',
  overrideOne: '1',
  overrideVisible: 'visible',
  overrideZero: '0',
  overrideLoadingZIndex: '514',
  buttonFontWeight: '500',
  nonNullContent: "''",
  choiceSize: rem('20px'),
  iconSize: rem('10px'),
  choiceMargin: rem('1px'),
  controlBorderWidth: rem('2px'),
  bannerBorderDefault: buildBannerBorder('--p-border-neutral-subdued'),
  bannerBorderSuccess: buildBannerBorder('--p-border-success-subdued'),
  bannerBorderHighlight: buildBannerBorder('--p-border-highlight-subdued'),
  bannerBorderWarning: buildBannerBorder('--p-border-warning-subdued'),
  bannerBorderCritical: buildBannerBorder('--p-border-critical-subdued'),
  badgeMixBlendMode: 'luminosity',
  thinBorderSubdued: "".concat(rem('1px'), " solid var(--p-border-subdued)"),
  textFieldSpinnerOffset: rem('2px'),
  textFieldFocusRingOffset: rem('-4px'),
  textFieldFocusRingBorderRadius: rem('7px'),
  buttonGroupItemSpacing: rem('2px'),
  contextualSaveBarHeight: '64px',
  duration100: '100ms',
  duration150: '150ms',
  easeIn: 'cubic-bezier(0.5, 0.1, 1, 1)',
  ease: 'cubic-bezier(0.4, 0.22, 0.28, 1)',
  rangeSliderThumbSizeBase: rem('16px'),
  rangeSliderThumbSizeActive: rem('24px'),
  rangeSliderThumbScale: '1.5',
  badgeFontWeight: '500'
};

function rem(px) {
  var baseFontSize = 10;
  return "".concat(parseInt(px, 10) / baseFontSize, "rem");
}

function buildBannerBorder(cssVar) {
  return "inset 0 ".concat(rem('1px'), " 0 0 var(").concat(cssVar, "), inset 0 0 0 ").concat(rem('1px'), " var(").concat(cssVar, ")");
}

var FeaturesContext = /*#__PURE__*/React.createContext(undefined);

function useFeatures() {
  var features = React.useContext(FeaturesContext);

  if (!features) {
    throw new Error('No Features were provided.');
  }

  return features;
}

function ThemeProvider({
  theme: themeConfig,
  children
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var parentContext = React.useContext(ThemeContext);
  var isParentThemeProvider = parentContext === undefined;
  var parentColorScheme = parentContext && parentContext.colorScheme && parentContext.colorScheme;
  var parentColors = parentContext && parentContext.colors && parentContext.colors;

  var {
    colors,
    colorScheme
  } = themeConfig,
      rest = _objectWithoutProperties(themeConfig, ["colors", "colorScheme"]);

  var processedThemeConfig = _objectSpread2(_objectSpread2(_objectSpread2({}, rest), {
    colorScheme: getColorScheme(colorScheme, parentColorScheme)
  }), {}, {
    colors: _objectSpread2(_objectSpread2(_objectSpread2({}, isParentThemeProvider && DefaultThemeColors), parentColors != null && parentColors), colors)
  });

  var customProperties = React.useMemo(() => buildCustomProperties(processedThemeConfig, newDesignLanguage, Tokens), [processedThemeConfig, newDesignLanguage]);
  var theme = React.useMemo(() => buildThemeContext(processedThemeConfig, newDesignLanguage ? customProperties : undefined), [customProperties, processedThemeConfig, newDesignLanguage]); // We want these values to be empty string instead of `undefined` when not set.
  // Otherwise, setting a style property to `undefined` does not remove it from the DOM.

  var backgroundColor = customProperties['--p-background'] || '';
  var color = customProperties['--p-text'] || '';
  React.useEffect(() => {
    if (isParentThemeProvider) {
      document.body.style.backgroundColor = backgroundColor;
      document.body.style.color = color;
    }
  }, [backgroundColor, color, isParentThemeProvider]);

  var style = _objectSpread2(_objectSpread2({}, customProperties), !isParentThemeProvider && {
    color
  });

  return /*#__PURE__*/React__default.createElement(ThemeContext.Provider, {
    value: _objectSpread2(_objectSpread2({}, theme), {}, {
      textColor: color
    })
  }, /*#__PURE__*/React__default.createElement("div", {
    style: style
  }, children));
}

function isInverseColorScheme(colorScheme) {
  return colorScheme === 'inverse';
}

function getColorScheme(colorScheme, parentColorScheme) {
  if (colorScheme == null) {
    return parentColorScheme || 'light';
  } else if (isInverseColorScheme(colorScheme)) {
    return parentColorScheme === 'dark' || parentColorScheme === undefined ? 'light' : 'dark';
  } else {
    return colorScheme;
  }
}

var MediaQueryContext = /*#__PURE__*/React.createContext(undefined);

function useMediaQuery() {
  var mediaQuery = React.useContext(MediaQueryContext);

  if (!mediaQuery) {
    throw new Error('No mediaQuery was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/structure/app-provider for implementation instructions.');
  }

  return mediaQuery;
}

var Breakpoints = {
  navigationBarCollapsed: '768px',
  stackedContent: '1043px'
};
var noWindowMatches = {
  media: '',
  addListener: noop,
  removeListener: noop,
  matches: false,
  onchange: noop,
  addEventListener: noop,
  removeEventListener: noop,
  dispatchEvent: _ => true
};

function noop() {}

function navigationBarCollapsed() {
  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia("(max-width: ".concat(Breakpoints.navigationBarCollapsed, ")"));
}
function stackedContent() {
  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia("(max-width: ".concat(Breakpoints.stackedContent, ")"));
}

// see https://github.com/oliviertassinari/react-event-listener/
class EventListener extends React.PureComponent {
  componentDidMount() {
    this.attachListener();
  }

  componentDidUpdate(_ref) {
    var detachProps = _objectWithoutProperties(_ref, ["passive"]);

    this.detachListener(detachProps);
    this.attachListener();
  }

  componentWillUnmount() {
    this.detachListener();
  }

  render() {
    return null;
  }

  attachListener() {
    var {
      event,
      handler,
      capture,
      passive
    } = this.props;
    window.addEventListener(event, handler, {
      capture,
      passive
    });
  }

  detachListener(prevProps) {
    var {
      event,
      handler,
      capture
    } = prevProps || this.props;
    window.removeEventListener(event, handler, capture);
  }

}

var MediaQueryProvider = function MediaQueryProvider({
  children
}) {
  var [isNavigationCollapsed, setIsNavigationCollapsed] = React.useState(navigationBarCollapsed().matches); // eslint-disable-next-line react-hooks/exhaustive-deps

  var handleResize = React.useCallback(debounce(() => {
    if (isNavigationCollapsed !== navigationBarCollapsed().matches) {
      setIsNavigationCollapsed(!isNavigationCollapsed);
    }
  }, 40, {
    trailing: true,
    leading: true,
    maxWait: 40
  }), [isNavigationCollapsed]);
  React.useEffect(() => {
    setIsNavigationCollapsed(navigationBarCollapsed().matches);
  }, []);
  return /*#__PURE__*/React__default.createElement(MediaQueryContext.Provider, {
    value: {
      isNavigationCollapsed
    }
  }, /*#__PURE__*/React__default.createElement(EventListener, {
    event: "resize",
    handler: handleResize
  }), children);
};

var FocusManagerContext = /*#__PURE__*/React.createContext(undefined);

var UniqueIdFactoryContext = /*#__PURE__*/React.createContext(undefined);

/**
 * Returns a unique id that remains consistent across multiple re-renders of the
 * same hook
 * @param prefix Defines a prefix for the ID. You probably want to set this to
 *   the name of the component you're calling `useUniqueId` in.
 * @param overrideId Defines a fixed value to use instead of generating a unique
 *   ID. Useful for components that allow consumers to specify their own ID.
 */

function useUniqueId(prefix = '', overrideId = '') {
  var idFactory = React.useContext(UniqueIdFactoryContext); // By using a ref to store the uniqueId for each invocation of the hook and
  // checking that it is not already populated we ensure that we don’t generate
  // a new ID on every re-render of a component.

  var uniqueIdRef = React.useRef(null);

  if (!idFactory) {
    throw new MissingAppProviderError('No UniqueIdFactory was provided.');
  } // If an override was specified, then use that instead of using a unique ID
  // Hooks can’t be called conditionally so this has to go after all use* calls


  if (overrideId) {
    return overrideId;
  } // If a unique id has not yet been generated, then get a new one


  if (!uniqueIdRef.current) {
    uniqueIdRef.current = idFactory.nextId(prefix);
  }

  return uniqueIdRef.current;
}

class UniqueIdFactory {
  constructor(idGeneratorFactory) {
    this.idGeneratorFactory = void 0;
    this.idGenerators = {};
    this.idGeneratorFactory = idGeneratorFactory;
  }

  nextId(prefix) {
    if (!this.idGenerators[prefix]) {
      this.idGenerators[prefix] = this.idGeneratorFactory(prefix);
    }

    return this.idGenerators[prefix]();
  }

}
function globalIdGeneratorFactory(prefix = '') {
  var index = 1;
  return () => "Polaris".concat(prefix).concat(index++);
}

function useFocusManager() {
  var focusManager = React.useContext(FocusManagerContext);
  var id = useUniqueId();

  if (!focusManager) {
    throw new MissingAppProviderError('No FocusManager was provided.');
  }

  var {
    trapFocusList,
    add: addFocusItem,
    remove: removeFocusItem
  } = focusManager;
  var canSafelyFocus = trapFocusList[0] === id;
  var value = React.useMemo(() => ({
    canSafelyFocus
  }), [canSafelyFocus]);
  React.useEffect(() => {
    addFocusItem(id);
    return () => {
      removeFocusItem(id);
    };
  }, [addFocusItem, id, removeFocusItem]);
  return value;
}

function FocusManager({
  children
}) {
  var [trapFocusList, setTrapFocusList] = React.useState([]);
  var add = React.useCallback(id => {
    setTrapFocusList(list => [...list, id]);
  }, []);
  var remove = React.useCallback(id => {
    var removed = true;
    setTrapFocusList(list => {
      var clone = [...list];
      var index = clone.indexOf(id);

      if (index === -1) {
        removed = false;
      } else {
        clone.splice(index, 1);
      }

      return clone;
    });
    return removed;
  }, []);
  var value = React.useMemo(() => ({
    trapFocusList,
    add,
    remove
  }), [add, trapFocusList, remove]);
  return /*#__PURE__*/React__default.createElement(FocusManagerContext.Provider, {
    value: value
  }, children);
}

var I18nContext = /*#__PURE__*/React.createContext(undefined);

function useI18n() {
  var i18n = React.useContext(I18nContext);

  if (!i18n) {
    throw new MissingAppProviderError('No i18n was provided.');
  }

  return i18n;
}

var OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
function get(obj, keypath, defaultValue) {
  if (obj == null) return undefined;
  var keys = Array.isArray(keypath) ? keypath : getKeypath(keypath);
  var acc = obj; // eslint-disable-next-line @typescript-eslint/prefer-for-of

  for (var i = 0; i < keys.length; i++) {
    var val = acc[keys[i]];
    if (val === undefined) return defaultValue;
    acc = val;
  }

  return acc;
}

function getKeypath(str) {
  var path = [];
  var result;

  while (result = OBJECT_NOTATION_MATCHER.exec(str)) {
    var [, first, second] = result;
    path.push(first || second);
  }

  return path;
}

// Unfortunately, this is how we have to type this at the moment.
// There is currently a proposal to support variadic kinds.
// https://github.com/Microsoft/TypeScript/issues/5453
function merge(...objs) {
  var final = {};

  for (var obj of objs) {
    final = mergeRecursively(final, obj);
  }

  return final;
}

function mergeRecursively(inputObjA, objB) {
  var objA = Array.isArray(inputObjA) ? [...inputObjA] : _objectSpread2({}, inputObjA);

  for (var key in objB) {
    if (!Object.prototype.hasOwnProperty.call(objB, key)) {
      continue;
    } else if (isMergeableValue(objB[key]) && isMergeableValue(objA[key])) {
      objA[key] = mergeRecursively(objA[key], objB[key]);
    } else {
      objA[key] = objB[key];
    }
  }

  return objA;
}

function isMergeableValue(value) {
  return value !== null && typeof value === 'object';
}

var REPLACE_REGEX = /{([^}]*)}/g;
class I18n {
  /**
   * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
   */
  constructor(translation) {
    this.translation = {};
    // slice the array to make a shallow copy of it, so we don't accidentally
    // modify the original translation array
    this.translation = Array.isArray(translation) ? merge(...translation.slice().reverse()) : translation;
  }

  translate(id, replacements) {
    var text = get(this.translation, id, '');

    if (!text) {
      return '';
    }

    if (replacements) {
      return text.replace(REPLACE_REGEX, match => {
        var replacement = match.substring(1, match.length - 1);

        if (replacements[replacement] === undefined) {
          var replacementData = JSON.stringify(replacements);
          throw new Error("Error in translation for key '".concat(id, "'. No replacement found for key '").concat(replacement, "'. The following replacements were passed: '").concat(replacementData, "'"));
        } // This could be a string or a number, but JS doesn't mind which it gets
        // and can handle that cast internally. So let it, to save us calling
        // toString() on what's already a string in 90% of cases.


        return replacements[replacement];
      });
    }

    return text;
  }

  translationKeyExists(path) {
    return Boolean(get(this.translation, path));
  }

}

var ScrollLockManagerContext = /*#__PURE__*/React.createContext(undefined);

function useScrollLockManager() {
  var scrollLockManager = React.useContext(ScrollLockManagerContext);

  if (!scrollLockManager) {
    throw new MissingAppProviderError('No ScrollLockManager was provided.');
  }

  return scrollLockManager;
}

var isServer = typeof window === 'undefined' || typeof document === 'undefined';

var SCROLL_LOCKING_ATTRIBUTE = 'data-lock-scrolling';
var SCROLL_LOCKING_WRAPPER_ATTRIBUTE = 'data-lock-scrolling-wrapper';
var scrollPosition = 0;
class ScrollLockManager {
  constructor() {
    this.scrollLocks = 0;
    this.locked = false;
  }

  registerScrollLock() {
    this.scrollLocks += 1;
    this.handleScrollLocking();
  }

  unregisterScrollLock() {
    this.scrollLocks -= 1;
    this.handleScrollLocking();
  }

  handleScrollLocking() {
    if (isServer) return;
    var {
      scrollLocks
    } = this;
    var {
      body
    } = document;
    var wrapper = body.firstElementChild;

    if (scrollLocks === 0) {
      body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE);

      if (wrapper) {
        wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE);
      }

      window.scroll(0, scrollPosition);
      this.locked = false;
    } else if (scrollLocks > 0 && !this.locked) {
      scrollPosition = window.pageYOffset;
      body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, '');

      if (wrapper) {
        wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, '');
        wrapper.scrollTop = scrollPosition;
      }

      this.locked = true;
    }
  }

  resetScrollPosition() {
    scrollPosition = 0;
  }

}

var StickyManagerContext = /*#__PURE__*/React.createContext(undefined);

function useStickyManager() {
  var stickyManager = React.useContext(StickyManagerContext);

  if (!stickyManager) {
    throw new MissingAppProviderError('No StickyManager was provided.');
  }

  return stickyManager;
}

var scrollable = {
  props: {
    'data-polaris-scrollable': true
  },
  selector: '[data-polaris-scrollable]'
};
var overlay = {
  props: {
    'data-polaris-overlay': true
  },
  selector: '[data-polaris-overlay]'
};
var layer = {
  props: {
    'data-polaris-layer': true
  },
  selector: '[data-polaris-layer]'
};
var unstyled = {
  props: {
    'data-polaris-unstyled': true
  },
  selector: '[data-polaris-unstyled]'
};
var dataPolarisTopBar = {
  props: {
    'data-polaris-top-bar': true
  },
  selector: '[data-polaris-top-bar]'
};
var headerCell = {
  props: {
    'data-polaris-header-cell': true
  },
  selector: '[data-polaris-header-cell]'
};
var portal = {
  props: ['data-portal-id'],
  selector: '[data-portal-id]'
};
var DATA_ATTRIBUTE = {
  overlay,
  layer
};

class Rect {
  static get zero() {
    return new Rect();
  }

  constructor({
    top = 0,
    left = 0,
    width = 0,
    height = 0
  } = {}) {
    this.top = void 0;
    this.left = void 0;
    this.width = void 0;
    this.height = void 0;
    this.top = top;
    this.left = left;
    this.width = width;
    this.height = height;
  }

  get center() {
    return {
      x: this.left + this.width / 2,
      y: this.top + this.height / 2
    };
  }

}
function getRectForNode(node) {
  if (!(node instanceof Element)) {
    return new Rect({
      width: window.innerWidth,
      height: window.innerHeight
    });
  }

  var rect = node.getBoundingClientRect();
  return new Rect({
    top: rect.top,
    left: rect.left,
    width: rect.width,
    height: rect.height
  });
}

class StickyManager {
  constructor(container) {
    this.stickyItems = [];
    this.stuckItems = [];
    this.container = null;
    this.topBarOffset = 0;
    this.handleResize = debounce(() => {
      this.manageStickyItems();
    }, 40, {
      leading: true,
      trailing: true,
      maxWait: 40
    });
    this.handleScroll = debounce(() => {
      this.manageStickyItems();
    }, 40, {
      leading: true,
      trailing: true,
      maxWait: 40
    });

    if (container) {
      this.setContainer(container);
    }
  }

  registerStickyItem(stickyItem) {
    this.stickyItems.push(stickyItem);
  }

  unregisterStickyItem(nodeToRemove) {
    var nodeIndex = this.stickyItems.findIndex(({
      stickyNode
    }) => nodeToRemove === stickyNode);
    this.stickyItems.splice(nodeIndex, 1);
  }

  setContainer(el) {
    this.container = el;

    if (isDocument(el)) {
      this.setTopBarOffset(el);
    }

    this.container.addEventListener('scroll', this.handleScroll);
    window.addEventListener('resize', this.handleResize);
    this.manageStickyItems();
  }

  removeScrollListener() {
    if (this.container) {
      this.container.removeEventListener('scroll', this.handleScroll);
      window.removeEventListener('resize', this.handleResize);
    }
  }

  manageStickyItems() {
    if (this.stickyItems.length <= 0) {
      return;
    }

    var scrollTop = this.container ? scrollTopFor(this.container) : 0;
    var containerTop = getRectForNode(this.container).top + this.topBarOffset;
    this.stickyItems.forEach(stickyItem => {
      var {
        handlePositioning
      } = stickyItem;
      var {
        sticky,
        top,
        left,
        width
      } = this.evaluateStickyItem(stickyItem, scrollTop, containerTop);
      this.updateStuckItems(stickyItem, sticky);
      handlePositioning(sticky, top, left, width);
    });
  }

  evaluateStickyItem(stickyItem, scrollTop, containerTop) {
    var {
      stickyNode,
      placeHolderNode,
      boundingElement,
      offset,
      disableWhenStacked
    } = stickyItem;

    if (disableWhenStacked && stackedContent().matches) {
      return {
        sticky: false,
        top: 0,
        left: 0,
        width: 'auto'
      };
    }

    var stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(tokens.spacingLoose, 10) : this.getOffset(stickyNode);
    var scrollPosition = scrollTop + stickyOffset;
    var placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop;
    var top = containerTop + stickyOffset;
    var width = placeHolderNode.getBoundingClientRect().width;
    var left = placeHolderNode.getBoundingClientRect().left;
    var sticky;

    if (boundingElement == null) {
      sticky = scrollPosition >= placeHolderNodeCurrentTop;
    } else {
      var stickyItemHeight = stickyNode.getBoundingClientRect().height;
      var stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
      sticky = scrollPosition >= placeHolderNodeCurrentTop && scrollPosition < stickyItemBottomPosition;
    }

    return {
      sticky,
      top,
      left,
      width
    };
  }

  updateStuckItems(item, sticky) {
    var {
      stickyNode
    } = item;

    if (sticky && !this.isNodeStuck(stickyNode)) {
      this.addStuckItem(item);
    } else if (!sticky && this.isNodeStuck(stickyNode)) {
      this.removeStuckItem(item);
    }
  }

  addStuckItem(stickyItem) {
    this.stuckItems.push(stickyItem);
  }

  removeStuckItem(stickyItem) {
    var {
      stickyNode: nodeToRemove
    } = stickyItem;
    var nodeIndex = this.stuckItems.findIndex(({
      stickyNode
    }) => nodeToRemove === stickyNode);
    this.stuckItems.splice(nodeIndex, 1);
  }

  getOffset(node) {
    if (this.stuckItems.length === 0) {
      return 0;
    }

    var offset = 0;
    var count = 0;
    var stuckNodesLength = this.stuckItems.length;
    var nodeRect = getRectForNode(node);

    while (count < stuckNodesLength) {
      var stuckNode = this.stuckItems[count].stickyNode;

      if (stuckNode !== node) {
        var stuckNodeRect = getRectForNode(stuckNode);

        if (!horizontallyOverlaps(nodeRect, stuckNodeRect)) {
          offset += getRectForNode(stuckNode).height;
        }
      } else {
        break;
      }

      count++;
    }

    return offset;
  }

  isNodeStuck(node) {
    var nodeFound = this.stuckItems.findIndex(({
      stickyNode
    }) => node === stickyNode);
    return nodeFound >= 0;
  }

  setTopBarOffset(container) {
    var topbarElement = container.querySelector(":not(".concat(scrollable.selector, ") ").concat(dataPolarisTopBar.selector));
    this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
  }

}

function isDocument(node) {
  return node === document;
}

function scrollTopFor(container) {
  return isDocument(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
}

function horizontallyOverlaps(rect1, rect2) {
  var rect1Left = rect1.left;
  var rect1Right = rect1.left + rect1.width;
  var rect2Left = rect2.left;
  var rect2Right = rect2.left + rect2.width;
  return rect2Right < rect1Left || rect1Right < rect2Left;
}

var LinkContext = /*#__PURE__*/React.createContext(undefined);

function useLink() {
  return React.useContext(LinkContext);
}

var AppProvider = {};

class AppProvider$1 extends React.Component {
  constructor(props) {
    super(props);
    this.stickyManager = void 0;
    this.scrollLockManager = void 0;
    this.uniqueIdFactory = void 0;
    this.stickyManager = new StickyManager();
    this.scrollLockManager = new ScrollLockManager();
    this.uniqueIdFactory = new UniqueIdFactory(globalIdGeneratorFactory);
    var {
      i18n,
      linkComponent
    } = this.props; // eslint-disable-next-line react/state-in-constructor

    this.state = {
      link: linkComponent,
      intl: new I18n(i18n)
    };
  }

  componentDidMount() {
    if (document != null) {
      this.stickyManager.setContainer(document);
    }
  }

  componentDidUpdate({
    i18n: prevI18n,
    linkComponent: prevLinkComponent
  }) {
    var {
      i18n,
      linkComponent
    } = this.props;

    if (i18n === prevI18n && linkComponent === prevLinkComponent) {
      return;
    } // eslint-disable-next-line react/no-did-update-set-state


    this.setState({
      link: linkComponent,
      intl: new I18n(i18n)
    });
  }

  render() {
    var {
      theme = {},
      children
    } = this.props;
    var {
      intl,
      link
    } = this.state;

    var features = _objectSpread2({
      newDesignLanguage: false
    }, this.props.features);

    return /*#__PURE__*/React__default.createElement(FeaturesContext.Provider, {
      value: features
    }, /*#__PURE__*/React__default.createElement(I18nContext.Provider, {
      value: intl
    }, /*#__PURE__*/React__default.createElement(ScrollLockManagerContext.Provider, {
      value: this.scrollLockManager
    }, /*#__PURE__*/React__default.createElement(StickyManagerContext.Provider, {
      value: this.stickyManager
    }, /*#__PURE__*/React__default.createElement(UniqueIdFactoryContext.Provider, {
      value: this.uniqueIdFactory
    }, /*#__PURE__*/React__default.createElement(LinkContext.Provider, {
      value: link
    }, /*#__PURE__*/React__default.createElement(ThemeProvider, {
      theme: theme
    }, /*#__PURE__*/React__default.createElement(MediaQueryProvider, null, /*#__PURE__*/React__default.createElement(FocusManager, null, children)))))))));
  }

}

function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}
function variationName(name, value) {
  return "".concat(name).concat(value.charAt(0).toUpperCase()).concat(value.slice(1));
}

/**
 * useIsAfterInitialMount will trigger a re-render to provide
 * you with an updated value. Using this you enhance server-side
 * code that can only run on the client.
 * @returns MutableRefObject<T> - Returns a ref object with the
 * results from invoking initial value
 * @example
 * function ComponentExample({children}) {
 *  const isMounted = useIsAfterInitialMount();
 *  const content = isMounted ? children : null;
 *
 *  return <>{content}</>;
 * }
 */

function useIsAfterInitialMount() {
  var [isAfterInitialMount, setIsAfterInitialMount] = React.useState(false);
  React.useEffect(() => {
    setIsAfterInitialMount(true);
  }, []);
  return isAfterInitialMount;
}

function Image(_ref) {
  var {
    sourceSet,
    source,
    crossOrigin
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["sourceSet", "source", "crossOrigin"]);

  var finalSourceSet = sourceSet ? sourceSet.map(({
    source: subSource,
    descriptor
  }) => "".concat(subSource, " ").concat(descriptor)).join(',') : null;
  return finalSourceSet ?
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/alt-text
  React__default.createElement("img", Object.assign({
    src: source,
    srcSet: finalSourceSet,
    crossOrigin: crossOrigin
  }, rest)) :
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/alt-text
  React__default.createElement("img", Object.assign({
    src: source
  }, rest, {
    crossOrigin: crossOrigin
  }));
}

var styles = {
  "Avatar": "Polaris-Avatar",
  "hidden": "Polaris-Avatar--hidden",
  "sizeSmall": "Polaris-Avatar--sizeSmall",
  "sizeMedium": "Polaris-Avatar--sizeMedium",
  "sizeLarge": "Polaris-Avatar--sizeLarge",
  "styleOne": "Polaris-Avatar--styleOne",
  "styleTwo": "Polaris-Avatar--styleTwo",
  "styleThree": "Polaris-Avatar--styleThree",
  "styleFour": "Polaris-Avatar--styleFour",
  "styleFive": "Polaris-Avatar--styleFive",
  "styleSix": "Polaris-Avatar--styleSix",
  "hasImage": "Polaris-Avatar--hasImage",
  "Image": "Polaris-Avatar__Image",
  "Initials": "Polaris-Avatar__Initials",
  "Svg": "Polaris-Avatar__Svg"
};

var Status;

(function (Status) {
  Status["Pending"] = "PENDING";
  Status["Loaded"] = "LOADED";
  Status["Errored"] = "ERRORED";
})(Status || (Status = {}));

var STYLE_CLASSES = ['one', 'two', 'three', 'four', 'five'];

var _ref = /*#__PURE__*/React__default.createElement("path", {
  fill: "currentColor",
  d: "M8.28 27.5A14.95 14.95 0 0120 21.8c4.76 0 8.97 2.24 11.72 5.7a14.02 14.02 0 01-8.25 5.91 14.82 14.82 0 01-6.94 0 14.02 14.02 0 01-8.25-5.9zM13.99 12.78a6.02 6.02 0 1112.03 0 6.02 6.02 0 01-12.03 0z"
});

function Avatar({
  name,
  source,
  initials,
  customer,
  size = 'medium',
  accessibilityLabel
}) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var isAfterInitialMount = useIsAfterInitialMount();

  function styleClass(name) {
    var finalStyleClasses = newDesignLanguage ? STYLE_CLASSES : [...STYLE_CLASSES, 'six'];
    return name ? finalStyleClasses[name.charCodeAt(0) % finalStyleClasses.length] : finalStyleClasses[0];
  }

  var [status, setStatus] = React.useState(Status.Pending); // If the source changes, set the status back to pending

  React.useEffect(() => {
    setStatus(Status.Pending);
  }, [source]);
  var handleError = React.useCallback(() => {
    setStatus(Status.Errored);
  }, []);
  var handleLoad = React.useCallback(() => {
    setStatus(Status.Loaded);
  }, []);
  var hasImage = source && status !== Status.Errored;
  var nameString = name || initials;
  var label;

  if (accessibilityLabel) {
    label = accessibilityLabel;
  } else if (name) {
    label = name;
  } else if (initials) {
    var splitInitials = initials.split('').join(' ');
    label = i18n.translate('Polaris.Avatar.labelWithInitials', {
      initials: splitInitials
    });
  } else {
    label = i18n.translate('Polaris.Avatar.label');
  }

  var className = classNames(styles.Avatar, size && styles[variationName('size', size)], !customer && styles[variationName('style', styleClass(nameString))], (hasImage || initials && initials.length === 0) && status !== Status.Loaded && styles.hidden, hasImage && styles.hasImage);
  var imageMarkUp = source && isAfterInitialMount && status !== Status.Errored ? /*#__PURE__*/React__default.createElement(Image, {
    className: styles.Image,
    source: source,
    alt: "",
    role: "presentation",
    onLoad: handleLoad,
    onError: handleError
  }) : null; // Use `dominant-baseline: central` instead of `dy` when Edge supports it.

  var verticalOffset = '0.35em';
  var avatarBody = customer || !initials ? _ref : /*#__PURE__*/React__default.createElement("text", {
    x: "50%",
    y: "50%",
    dy: verticalOffset,
    fill: "currentColor",
    fontSize: "20",
    textAnchor: "middle"
  }, initials);
  var svgMarkup = !hasImage ? /*#__PURE__*/React__default.createElement("span", {
    className: styles.Initials
  }, /*#__PURE__*/React__default.createElement("svg", {
    className: styles.Svg,
    viewBox: "0 0 40 40"
  }, avatarBody)) : null;
  return /*#__PURE__*/React__default.createElement("span", {
    "aria-label": label,
    role: "img",
    className: className
  }, svgMarkup, imageMarkUp);
}

function isElementInViewport(element) {
  var {
    top,
    left,
    bottom,
    right
  } = element.getBoundingClientRect();
  return top >= 0 && right <= window.innerWidth && bottom <= window.innerHeight && left >= 0;
}

var FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]';
var KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]:not([tabindex="-1"])';
function handleMouseUpByBlurring({
  currentTarget
}) {
  currentTarget.blur();
}
function nextFocusableNode(node, filter) {
  var allFocusableElements = [...document.querySelectorAll(FOCUSABLE_SELECTOR)];
  var sliceLocation = allFocusableElements.indexOf(node) + 1;
  var focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);

  for (var focusableElement of focusableElementsAfterNode) {
    if (isElementInViewport(focusableElement) && (!filter || filter && filter(focusableElement))) {
      return focusableElement;
    }
  }

  return null;
}
function findFirstFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, FOCUSABLE_SELECTOR)) {
    return element;
  }

  return element.querySelector(FOCUSABLE_SELECTOR);
} // Popover needs to be able to find its activator even if it is disabled, which FOCUSABLE_SELECTOR doesn't support.

function findFirstFocusableNodeIncludingDisabled(element) {
  var focusableSelector = "a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]";

  if (matches(element, focusableSelector)) {
    return element;
  }

  return element.querySelector(focusableSelector);
}
function focusFirstFocusableNode(element, onlyDescendants = true) {
  var _findFirstFocusableNo;

  (_findFirstFocusableNo = findFirstFocusableNode(element, onlyDescendants)) == null ? void 0 : _findFirstFocusableNo.focus();
}
function focusNextFocusableNode(node, filter) {
  var nextFocusable = nextFocusableNode(node, filter);

  if (nextFocusable && nextFocusable instanceof HTMLElement) {
    nextFocusable.focus();
    return true;
  }

  return false;
}
function findFirstKeyboardFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
    return element;
  }

  return element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
}
function focusFirstKeyboardFocusableNode(element, onlyDescendants = true) {
  var firstFocusable = findFirstKeyboardFocusableNode(element, onlyDescendants);

  if (firstFocusable) {
    firstFocusable.focus();
    return true;
  }

  return false;
}
function findLastKeyboardFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
    return element;
  }

  var allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
  return allFocusable[allFocusable.length - 1];
}
function focusLastKeyboardFocusableNode(element, onlyDescendants = true) {
  var lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);

  if (lastFocusable) {
    lastFocusable.focus();
    return true;
  }

  return false;
}

function matches(node, selector) {
  if (node.matches) {
    return node.matches(selector);
  }

  var matches = (node.ownerDocument || document).querySelectorAll(selector);
  var i = matches.length;

  while (--i >= 0 && matches.item(i) !== node) {
    return i > -1;
  }
}

// that the interface defining the props is defined in this file, not imported
// from elsewhere. This silly workaround ensures that the Props Explorer table
// is generated correctly.

// Wrapping forwardRef in a memo gets a name set since
// https://github.com/facebook/react/issues/16722
// but eslint-plugin-react doesn't know that just yet
// eslint-disable-next-line react/display-name
var UnstyledLink = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function UnstyledLink(props, _ref) {
  var LinkComponent = useLink();

  if (LinkComponent) {
    return /*#__PURE__*/React__default.createElement(LinkComponent, Object.assign({}, unstyled.props, props));
  }

  var {
    external,
    url
  } = props,
      rest = _objectWithoutProperties(props, ["external", "url"]);

  var target = external ? '_blank' : undefined;
  var rel = external ? 'noopener noreferrer' : undefined;
  return /*#__PURE__*/React__default.createElement("a", Object.assign({
    target: target
  }, rest, {
    href: url,
    rel: rel
  }, unstyled.props));
}));

var styles$1 = {
  "Icon": "Polaris-Icon",
  "hasBackdrop": "Polaris-Icon--hasBackdrop",
  "isColored": "Polaris-Icon--isColored",
  "colorWhite": "Polaris-Icon--colorWhite",
  "newDesignLanguage": "Polaris-Icon--newDesignLanguage",
  "colorBlack": "Polaris-Icon--colorBlack",
  "colorSkyLighter": "Polaris-Icon--colorSkyLighter",
  "colorSkyLight": "Polaris-Icon--colorSkyLight",
  "colorSky": "Polaris-Icon--colorSky",
  "colorSkyDark": "Polaris-Icon--colorSkyDark",
  "colorInkLightest": "Polaris-Icon--colorInkLightest",
  "colorInkLighter": "Polaris-Icon--colorInkLighter",
  "colorInkLight": "Polaris-Icon--colorInkLight",
  "colorInk": "Polaris-Icon--colorInk",
  "colorBlueLighter": "Polaris-Icon--colorBlueLighter",
  "colorBlueLight": "Polaris-Icon--colorBlueLight",
  "colorBlue": "Polaris-Icon--colorBlue",
  "colorBlueDark": "Polaris-Icon--colorBlueDark",
  "colorBlueDarker": "Polaris-Icon--colorBlueDarker",
  "colorIndigoLighter": "Polaris-Icon--colorIndigoLighter",
  "colorIndigoLight": "Polaris-Icon--colorIndigoLight",
  "colorIndigo": "Polaris-Icon--colorIndigo",
  "colorIndigoDark": "Polaris-Icon--colorIndigoDark",
  "colorIndigoDarker": "Polaris-Icon--colorIndigoDarker",
  "colorTealLighter": "Polaris-Icon--colorTealLighter",
  "colorTealLight": "Polaris-Icon--colorTealLight",
  "colorTeal": "Polaris-Icon--colorTeal",
  "colorTealDark": "Polaris-Icon--colorTealDark",
  "colorTealDarker": "Polaris-Icon--colorTealDarker",
  "colorGreenLighter": "Polaris-Icon--colorGreenLighter",
  "colorGreen": "Polaris-Icon--colorGreen",
  "colorGreenDark": "Polaris-Icon--colorGreenDark",
  "colorYellowLighter": "Polaris-Icon--colorYellowLighter",
  "colorYellow": "Polaris-Icon--colorYellow",
  "colorYellowDark": "Polaris-Icon--colorYellowDark",
  "colorOrange": "Polaris-Icon--colorOrange",
  "colorOrangeDark": "Polaris-Icon--colorOrangeDark",
  "colorRedLighter": "Polaris-Icon--colorRedLighter",
  "colorRed": "Polaris-Icon--colorRed",
  "colorRedDark": "Polaris-Icon--colorRedDark",
  "colorPurple": "Polaris-Icon--colorPurple",
  "colorBase": "Polaris-Icon--colorBase",
  "colorSubdued": "Polaris-Icon--colorSubdued",
  "colorCritical": "Polaris-Icon--colorCritical",
  "colorWarning": "Polaris-Icon--colorWarning",
  "colorHighlight": "Polaris-Icon--colorHighlight",
  "colorSuccess": "Polaris-Icon--colorSuccess",
  "colorPrimary": "Polaris-Icon--colorPrimary",
  "Svg": "Polaris-Icon__Svg",
  "Img": "Polaris-Icon__Img",
  "Placeholder": "Polaris-Icon__Placeholder"
};

var COLORS_WITH_BACKDROPS = ['blueDark', 'teal', 'tealDark', 'greenDark', 'redDark', 'yellowDark', 'ink', 'inkLighter']; // This is needed for the polaris
// styleguide to generate the props explorer

function Icon({
  source,
  color,
  backdrop,
  accessibilityLabel
}) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var sourceType;

  if (typeof source === 'function') {
    sourceType = 'function';
  } else if (source === 'placeholder') {
    sourceType = 'placeholder';
  } else {
    sourceType = 'external';
  }

  if (color && backdrop && !COLORS_WITH_BACKDROPS.includes(color)) {
    // eslint-disable-next-line no-console
    console.warn(i18n.translate('Polaris.Icon.backdropWarning', {
      color,
      colorsWithBackDrops: COLORS_WITH_BACKDROPS.join(', ')
    }));
  }

  if (color && !newDesignLanguage && isNewDesignLanguageColor(color)) {
    // eslint-disable-next-line no-console
    console.warn('You have selected a color meant to be used in the new design language but new design language is not enabled.');
  }

  if (color && sourceType === 'external' && newDesignLanguage === true && isNewDesignLanguageColor(color)) {
    // eslint-disable-next-line no-console
    console.warn('Recoloring external SVGs is not supported with colors in the new design language. Set the intended color on your SVG instead.');
  }

  var className = classNames(styles$1.Icon, color && styles$1[variationName('color', color)], color && color !== 'white' && styles$1.isColored, backdrop && styles$1.hasBackdrop, newDesignLanguage && styles$1.newDesignLanguage);
  var SourceComponent = source;
  var contentMarkup = {
    function: /*#__PURE__*/React__default.createElement(SourceComponent, {
      className: styles$1.Svg,
      focusable: "false",
      "aria-hidden": "true"
    }),
    placeholder: /*#__PURE__*/React__default.createElement("div", {
      className: styles$1.Placeholder
    }),
    external: /*#__PURE__*/React__default.createElement("img", {
      className: styles$1.Img,
      src: "data:image/svg+xml;utf8,".concat(source),
      alt: "",
      "aria-hidden": "true"
    })
  };
  return /*#__PURE__*/React__default.createElement("span", {
    className: className,
    "aria-label": accessibilityLabel
  }, contentMarkup[sourceType]);
}

var styles$2 = {
  "VisuallyHidden": "Polaris-VisuallyHidden"
};

function VisuallyHidden({
  children
}) {
  return /*#__PURE__*/React__default.createElement("span", {
    className: styles$2.VisuallyHidden
  }, children);
}

var styles$3 = {
  "Spinner": "Polaris-Spinner",
  "sizeSmall": "Polaris-Spinner--sizeSmall",
  "sizeLarge": "Polaris-Spinner--sizeLarge",
  "colorWhite": "Polaris-Spinner--colorWhite",
  "loading": "Polaris-Spinner--loading",
  "colorTeal": "Polaris-Spinner--colorTeal",
  "colorHighlight": "Polaris-Spinner--colorHighlight",
  "colorInkLightest": "Polaris-Spinner--colorInkLightest"
};

var COLORS_FOR_LARGE_SPINNER = ['teal', 'inkLightest', 'highlight'];

var _ref$1 = /*#__PURE__*/React__default.createElement("svg", {
  viewBox: "0 0 44 44",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React__default.createElement("path", {
  d: "M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z"
}));

var _ref2 = /*#__PURE__*/React__default.createElement("svg", {
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React__default.createElement("path", {
  d: "M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z"
}));

function Spinner({
  size = 'large',
  color = 'teal',
  accessibilityLabel,
  hasFocusableParent
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var i18n = useI18n();
  var isAfterInitialMount = useIsAfterInitialMount();

  if (size === 'large' && !COLORS_FOR_LARGE_SPINNER.includes(color)) {
    if (process.env.NODE_ENV === 'development') {
      // eslint-disable-next-line no-console
      console.warn(i18n.translate('Polaris.Spinner.warningMessage', {
        color,
        size,
        colors: COLORS_FOR_LARGE_SPINNER.join(', ')
      }));
    } // eslint-disable-next-line no-param-reassign


    size = 'small';
  }

  var className = classNames(styles$3.Spinner, color && styles$3[variationName('color', color)], size && styles$3[variationName('size', size)], newDesignLanguage && styles$3.newDesignLanguage);
  var spinnerSVGMarkup = size === 'large' ? _ref$1 : _ref2;

  var spanAttributes = _objectSpread2({}, !hasFocusableParent && {
    role: 'status'
  });

  var accessibilityLabelMarkup = (isAfterInitialMount || !hasFocusableParent) && /*#__PURE__*/React__default.createElement(VisuallyHidden, null, accessibilityLabel);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("span", {
    className: className
  }, spinnerSVGMarkup), /*#__PURE__*/React__default.createElement("span", spanAttributes, accessibilityLabelMarkup));
}

var getUniqueID = globalIdGeneratorFactory('portal-');
class Portal extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.context = void 0;
    this.state = {
      isMounted: false
    };
    this.portalNode = null;
    this.portalId = this.props.idPrefix !== '' ? "".concat(this.props.idPrefix, "-").concat(getUniqueID()) : getUniqueID();
  }

  componentDidMount() {
    this.portalNode = document.createElement('div');
    this.portalNode.setAttribute(portal.props[0], this.portalId);

    if (this.context != null) {
      var {
        cssCustomProperties
      } = this.context;

      if (cssCustomProperties != null) {
        this.portalNode.setAttribute('style', cssCustomProperties);
      } else {
        this.portalNode.removeAttribute('style');
      }
    }

    document.body.appendChild(this.portalNode);
    this.setState({
      isMounted: true
    });
  }

  componentDidUpdate(_, prevState) {
    var {
      onPortalCreated = noop$1
    } = this.props;

    if (this.portalNode && this.context != null) {
      var {
        cssCustomProperties,
        textColor
      } = this.context;

      if (cssCustomProperties != null) {
        var style = "".concat(cssCustomProperties, ";color:").concat(textColor, ";");
        this.portalNode.setAttribute('style', style);
      } else {
        this.portalNode.removeAttribute('style');
      }
    }

    if (!prevState.isMounted && this.state.isMounted) {
      onPortalCreated();
    }
  }

  componentWillUnmount() {
    if (this.portalNode) {
      document.body.removeChild(this.portalNode);
    }
  }

  render() {
    return this.portalNode && this.state.isMounted ? /*#__PURE__*/reactDom.createPortal(this.props.children, this.portalNode) : null;
  }

}
Portal.defaultProps = {
  idPrefix: ''
};
Portal.contextType = ThemeContext;

function noop$1() {}

// `Component`. If `props` is passed, those will be added as props on the
// wrapped component. If `element` is null, the component is not wrapped.

function wrapWithComponent(element, Component, props) {
  if (element == null) {
    return null;
  }

  return isElementOfType(element, Component) ? element : /*#__PURE__*/React__default.createElement(Component, props, element);
} // In development, we compare based on the name of the function because
// React Hot Loader proxies React components in order to make updates. In
// production we can simply compare the components for equality.

var isComponent = process.env.NODE_ENV === 'development' ? hotReloadComponentCheck : (AComponent, AnotherComponent) => AComponent === AnotherComponent; // Checks whether `element` is a React element of type `Component` (or one of
// the passed components, if `Component` is an array of React components).

function isElementOfType(element, Component) {
  if (element == null || ! /*#__PURE__*/React.isValidElement(element) || typeof element.type === 'string') {
    return false;
  }

  var {
    type
  } = element;
  var Components = Array.isArray(Component) ? Component : [Component];
  return Components.some(AComponent => typeof type !== 'string' && isComponent(AComponent, type));
} // Returns all children that are valid elements as an array. Can optionally be
// filtered by passing `predicate`.

function elementChildren(children, predicate = () => true) {
  return React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && predicate(child));
}
function ConditionalWrapper({
  condition,
  wrapper,
  children
}) {
  return condition ? wrapper(children) : children;
}
function ConditionalRender({
  condition,
  children
}) {
  return condition ? children : null;
}

function hotReloadComponentCheck(AComponent, AnotherComponent) {
  var componentName = AComponent.name;
  var anotherComponentName = AnotherComponent.displayName;
  return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;
}

var ScrollableContext = /*#__PURE__*/React.createContext(undefined);

function ScrollTo() {
  var anchorNode = React.useRef(null);
  var scrollToPosition = React.useContext(ScrollableContext);
  React.useEffect(() => {
    if (!scrollToPosition || !anchorNode.current) {
      return;
    }

    scrollToPosition(anchorNode.current.offsetTop);
  }, [scrollToPosition]);
  var id = useUniqueId("ScrollTo"); // eslint-disable-next-line jsx-a11y/anchor-is-valid

  return /*#__PURE__*/React__default.createElement("a", {
    id: id,
    ref: anchorNode
  });
}

var styles$4 = {
  "Scrollable": "Polaris-Scrollable",
  "horizontal": "Polaris-Scrollable--horizontal",
  "vertical": "Polaris-Scrollable--vertical",
  "verticalHasScrolling": "Polaris-Scrollable--verticalHasScrolling",
  "hasTopShadow": "Polaris-Scrollable--hasTopShadow",
  "hasBottomShadow": "Polaris-Scrollable--hasBottomShadow"
};

var MAX_SCROLL_DISTANCE = 100;
var DELTA_THRESHOLD = 0.2;
var DELTA_PERCENTAGE = 0.2;
var EVENTS_TO_LOCK = ['scroll', 'touchmove', 'wheel'];
var PREFERS_REDUCED_MOTION = prefersReducedMotion();
class Scrollable extends React.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      topShadow: false,
      bottomShadow: false,
      scrollPosition: 0,
      canScroll: false
    };
    this.stickyManager = new StickyManager();
    this.scrollArea = null;
    this.handleResize = debounce(() => {
      this.handleScroll();
    }, 50, {
      trailing: true
    });

    this.setScrollArea = scrollArea => {
      this.scrollArea = scrollArea;
    };

    this.handleScroll = () => {
      var {
        scrollArea
      } = this;
      var {
        shadow,
        onScrolledToBottom
      } = this.props;

      if (scrollArea == null) {
        return;
      }

      var {
        scrollTop,
        clientHeight,
        scrollHeight
      } = scrollArea;
      var shouldBottomShadow = Boolean(shadow && !(scrollTop + clientHeight >= scrollHeight));
      var shouldTopShadow = Boolean(shadow && scrollTop > 0);
      var canScroll = scrollHeight > clientHeight;
      var hasScrolledToBottom = scrollHeight - scrollTop === clientHeight;

      if (canScroll && hasScrolledToBottom && onScrolledToBottom) {
        onScrolledToBottom();
      }

      this.setState({
        topShadow: shouldTopShadow,
        bottomShadow: shouldBottomShadow,
        scrollPosition: scrollTop,
        canScroll
      });
    };

    this.scrollHint = () => {
      var {
        scrollArea
      } = this;

      if (scrollArea == null) {
        return;
      }

      var {
        clientHeight,
        scrollHeight
      } = scrollArea;

      if (PREFERS_REDUCED_MOTION || this.state.scrollPosition > 0 || scrollHeight <= clientHeight) {
        return;
      }

      var scrollDistance = scrollHeight - clientHeight;
      this.toggleLock();
      this.setState({
        scrollPosition: scrollDistance > MAX_SCROLL_DISTANCE ? MAX_SCROLL_DISTANCE : scrollDistance
      }, () => {
        window.requestAnimationFrame(this.scrollStep);
      });
    };

    this.scrollStep = () => {
      this.setState(({
        scrollPosition
      }) => {
        var delta = scrollPosition * DELTA_PERCENTAGE;
        return {
          scrollPosition: delta < DELTA_THRESHOLD ? 0 : scrollPosition - delta
        };
      }, () => {
        if (this.state.scrollPosition > 0) {
          window.requestAnimationFrame(this.scrollStep);
        } else {
          this.toggleLock(false);
        }
      });
    };

    this.scrollToPosition = scrollY => {
      this.setState({
        scrollPosition: scrollY
      });
    };
  }

  static forNode(node) {
    var closestElement = node.closest(scrollable.selector);
    return closestElement instanceof HTMLElement ? closestElement : document;
  }

  componentDidMount() {
    if (this.scrollArea == null) {
      return;
    }

    this.stickyManager.setContainer(this.scrollArea);
    this.scrollArea.addEventListener('scroll', () => {
      window.requestAnimationFrame(this.handleScroll);
    });
    window.addEventListener('resize', this.handleResize);
    window.requestAnimationFrame(() => {
      this.handleScroll();

      if (this.props.hint) {
        this.scrollHint();
      }
    });
  }

  componentWillUnmount() {
    if (this.scrollArea == null) {
      return;
    }

    this.scrollArea.removeEventListener('scroll', this.handleScroll);
    window.removeEventListener('resize', this.handleResize);
    this.stickyManager.removeScrollListener();
  }

  componentDidUpdate() {
    var {
      scrollPosition
    } = this.state;

    if (scrollPosition && this.scrollArea && scrollPosition > 0) {
      this.scrollArea.scrollTop = scrollPosition;
    }
  }

  render() {
    var {
      topShadow,
      bottomShadow,
      canScroll
    } = this.state;

    var _this$props = this.props,
        {
      children,
      className,
      horizontal,
      vertical = true,
      shadow,
      hint,
      onScrolledToBottom
    } = _this$props,
        rest = _objectWithoutProperties(_this$props, ["children", "className", "horizontal", "vertical", "shadow", "hint", "onScrolledToBottom"]);

    var finalClassName = classNames(className, styles$4.Scrollable, vertical && styles$4.vertical, horizontal && styles$4.horizontal, topShadow && styles$4.hasTopShadow, bottomShadow && styles$4.hasBottomShadow, vertical && canScroll && styles$4.verticalHasScrolling);
    return /*#__PURE__*/React__default.createElement(ScrollableContext.Provider, {
      value: this.scrollToPosition
    }, /*#__PURE__*/React__default.createElement(StickyManagerContext.Provider, {
      value: this.stickyManager
    }, /*#__PURE__*/React__default.createElement("div", Object.assign({
      className: finalClassName
    }, scrollable.props, rest, {
      ref: this.setScrollArea
    }), children)));
  }

  toggleLock(shouldLock = true) {
    var {
      scrollArea
    } = this;

    if (scrollArea == null) {
      return;
    }

    EVENTS_TO_LOCK.forEach(eventName => {
      if (shouldLock) {
        scrollArea.addEventListener(eventName, prevent);
      } else {
        scrollArea.removeEventListener(eventName, prevent);
      }
    });
  }

}
Scrollable.ScrollTo = ScrollTo;

function prevent(evt) {
  evt.preventDefault();
}

function prefersReducedMotion() {
  try {
    return window.matchMedia('(prefers-reduced-motion: reduce)').matches;
  } catch (err) {
    return false;
  }
}

var styles$5 = {
  "Popover": "Polaris-Popover",
  "PopoverOverlay": "Polaris-Popover__PopoverOverlay",
  "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
  "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
  "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
  "measuring": "Polaris-Popover--measuring",
  "fullWidth": "Polaris-Popover--fullWidth",
  "Content": "Polaris-Popover__Content",
  "positionedAbove": "Polaris-Popover--positionedAbove",
  "Wrapper": "Polaris-Popover__Wrapper",
  "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
  "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
  "Pane": "Polaris-Popover__Pane",
  "Pane-fixed": "Polaris-Popover__Pane--fixed",
  "Section": "Polaris-Popover__Section",
  "FocusTracker": "Polaris-Popover__FocusTracker",
  "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
};

function Section({
  children
}) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$5.Section
  }, children);
}

function Pane({
  fixed,
  sectioned,
  children,
  onScrolledToBottom
}) {
  var className = classNames(styles$5.Pane, fixed && styles$5['Pane-fixed']);
  var content = sectioned ? wrapWithComponent(children, Section, {}) : children;
  return fixed ? /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, content) : /*#__PURE__*/React__default.createElement(Scrollable, {
    hint: true,
    shadow: true,
    className: className,
    onScrolledToBottom: onScrolledToBottom
  }, content);
}

function KeypressListener({
  keyCode,
  handler,
  keyEvent = 'keyup'
}) {
  var handleKeyEvent = event => {
    if (event.keyCode === keyCode) {
      handler(event);
    }
  };

  React.useEffect(() => {
    document.addEventListener(keyEvent, handleKeyEvent);
    return () => {
      document.removeEventListener(keyEvent, handleKeyEvent);
    };
  });
  return null;
}

function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed) {
  var activatorTop = activatorRect.top;
  var activatorBottom = activatorTop + activatorRect.height;
  var spaceAbove = activatorRect.top;
  var spaceBelow = containerRect.height - activatorRect.top - activatorRect.height;
  var desiredHeight = overlayRect.height;
  var verticalMargins = overlayMargins.activator + overlayMargins.container;
  var minimumSpaceToScroll = overlayMargins.container;
  var distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0);
  var distanceToBottomScroll = containerRect.top + Math.min(containerRect.height, scrollableContainerRect.top + scrollableContainerRect.height) - (activatorRect.top + activatorRect.height);
  var enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll;
  var enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll;
  var heightIfBelow = Math.min(spaceBelow, desiredHeight);
  var heightIfAbove = Math.min(spaceAbove, desiredHeight);
  var containerRectTop = fixed ? 0 : containerRect.top;
  var positionIfAbove = {
    height: heightIfAbove - verticalMargins,
    top: activatorTop + containerRectTop - heightIfAbove,
    positioning: 'above'
  };
  var positionIfBelow = {
    height: heightIfBelow - verticalMargins,
    top: activatorBottom + containerRectTop,
    positioning: 'below'
  };

  if (preferredPosition === 'above') {
    return (enoughSpaceFromTopScroll || distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow;
  }

  if (preferredPosition === 'below') {
    return (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove;
  }

  if (enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll) {
    return spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow;
  }

  return distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
}
function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
  var maximum = containerRect.width - overlayRect.width;

  if (preferredAlignment === 'left') {
    return Math.min(maximum, Math.max(0, activatorRect.left - overlayMargins.horizontal));
  } else if (preferredAlignment === 'right') {
    var activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
    return Math.min(maximum, Math.max(0, activatorRight - overlayMargins.horizontal));
  }

  return Math.min(maximum, Math.max(0, activatorRect.center.x - overlayRect.width / 2));
}
function rectIsOutsideOfRect(inner, outer) {
  var {
    center
  } = inner;
  return center.y < outer.top || center.y > outer.top + outer.height;
}
function intersectionWithViewport(rect, viewport = windowRect()) {
  var top = Math.max(rect.top, 0);
  var left = Math.max(rect.left, 0);
  var bottom = Math.min(rect.top + rect.height, viewport.height);
  var right = Math.min(rect.left + rect.width, viewport.width);
  return new Rect({
    top,
    left,
    height: bottom - top,
    width: right - left
  });
}
function windowRect() {
  return new Rect({
    top: window.scrollY,
    left: window.scrollX,
    height: window.innerHeight,
    width: document.body.clientWidth
  });
}

var styles$6 = {
  "PositionedOverlay": "Polaris-PositionedOverlay",
  "fixed": "Polaris-PositionedOverlay--fixed",
  "calculating": "Polaris-PositionedOverlay--calculating",
  "preventInteraction": "Polaris-PositionedOverlay--preventInteraction"
};

var OBSERVER_CONFIG = {
  childList: true,
  subtree: true
};
class PositionedOverlay extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      measuring: true,
      activatorRect: getRectForNode(this.props.activator),
      right: undefined,
      left: undefined,
      top: 0,
      height: 0,
      width: null,
      positioning: 'below',
      zIndex: null,
      outsideScrollableContainer: false,
      lockPosition: false
    };
    this.overlay = null;
    this.scrollableContainer = null;
    this.observer = void 0;

    this.overlayDetails = () => {
      var {
        measuring,
        left,
        right,
        positioning,
        height,
        activatorRect
      } = this.state;
      return {
        measuring,
        left,
        right,
        desiredHeight: height,
        positioning,
        activatorRect
      };
    };

    this.setOverlay = node => {
      this.overlay = node;
    };

    this.handleMeasurement = () => {
      var {
        lockPosition,
        top
      } = this.state;
      this.observer.disconnect();
      this.setState(({
        left,
        top,
        right
      }) => ({
        left,
        right,
        top,
        height: 0,
        positioning: 'below',
        measuring: true
      }), () => {
        if (this.overlay == null || this.scrollableContainer == null) {
          return;
        }

        var {
          activator,
          preferredPosition = 'below',
          preferredAlignment = 'center',
          onScrollOut,
          fullWidth,
          fixed,
          preferInputActivator = true
        } = this.props;
        var preferredActivator = preferInputActivator ? activator.querySelector('input') || activator : activator;
        var activatorRect = getRectForNode(preferredActivator);
        var currentOverlayRect = getRectForNode(this.overlay);
        var scrollableElement = isDocument$1(this.scrollableContainer) ? document.body : this.scrollableContainer;
        var scrollableContainerRect = getRectForNode(scrollableElement);
        var overlayRect = fullWidth ? new Rect(_objectSpread2(_objectSpread2({}, currentOverlayRect), {}, {
          width: activatorRect.width
        })) : currentOverlayRect; // If `body` is 100% height, it still acts as though it were not constrained to that size. This adjusts for that.

        if (scrollableElement === document.body) {
          scrollableContainerRect.height = document.body.scrollHeight;
        }

        var overlayMargins = this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement ? getMarginsForNode(this.overlay.firstElementChild) : {
          activator: 0,
          container: 0,
          horizontal: 0
        };
        var containerRect = windowRect();
        var zIndexForLayer = getZIndexForLayerFromNode(activator);
        var zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1;
        var verticalPosition = calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed);
        var horizontalPosition = calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment);
        this.setState({
          measuring: false,
          activatorRect: getRectForNode(activator),
          left: preferredAlignment !== 'right' ? horizontalPosition : undefined,
          right: preferredAlignment === 'right' ? horizontalPosition : undefined,
          top: lockPosition ? top : verticalPosition.top,
          lockPosition: Boolean(fixed),
          height: verticalPosition.height || 0,
          width: fullWidth ? overlayRect.width : null,
          positioning: verticalPosition.positioning,
          outsideScrollableContainer: onScrollOut != null && rectIsOutsideOfRect(activatorRect, intersectionWithViewport(scrollableContainerRect)),
          zIndex
        }, () => {
          if (!this.overlay) return;
          this.observer.observe(this.overlay, OBSERVER_CONFIG);
        });
      });
    };

    this.observer = new MutationObserver(this.handleMeasurement);
  }

  componentDidMount() {
    this.scrollableContainer = Scrollable.forNode(this.props.activator);

    if (this.scrollableContainer && !this.props.fixed) {
      this.scrollableContainer.addEventListener('scroll', this.handleMeasurement);
    }

    this.handleMeasurement();
  }

  componentWillUnmount() {
    if (this.scrollableContainer && !this.props.fixed) {
      this.scrollableContainer.removeEventListener('scroll', this.handleMeasurement);
    }
  }

  componentDidUpdate() {
    var {
      outsideScrollableContainer,
      top
    } = this.state;
    var {
      onScrollOut,
      active
    } = this.props;

    if (active && onScrollOut != null && top !== 0 && outsideScrollableContainer) {
      onScrollOut();
    }
  }

  render() {
    var {
      left,
      right,
      top,
      zIndex,
      width
    } = this.state;
    var {
      render,
      fixed,
      preventInteraction,
      classNames: propClassNames
    } = this.props;
    var style = {
      top: top == null || isNaN(top) ? undefined : top,
      left: left == null || isNaN(left) ? undefined : left,
      right: right == null || isNaN(right) ? undefined : right,
      width: width == null || isNaN(width) ? undefined : width,
      zIndex: zIndex == null || isNaN(zIndex) ? undefined : zIndex
    };
    var className = classNames(styles$6.PositionedOverlay, fixed && styles$6.fixed, preventInteraction && styles$6.preventInteraction, propClassNames);
    return /*#__PURE__*/React__default.createElement("div", {
      className: className,
      style: style,
      ref: this.setOverlay
    }, /*#__PURE__*/React__default.createElement(EventListener, {
      event: "resize",
      handler: this.handleMeasurement
    }), render(this.overlayDetails()));
  }

}

function getMarginsForNode(node) {
  var nodeStyles = window.getComputedStyle(node);
  return {
    activator: parseFloat(nodeStyles.marginTop || '0'),
    container: parseFloat(nodeStyles.marginBottom || '0'),
    horizontal: parseFloat(nodeStyles.marginLeft || '0')
  };
}

function getZIndexForLayerFromNode(node) {
  var layerNode = node.closest(layer.selector) || document.body;
  var zIndex = layerNode === document.body ? 'auto' : parseInt(window.getComputedStyle(layerNode).zIndex || '0', 10);
  return zIndex === 'auto' || isNaN(zIndex) ? null : zIndex;
}

function isDocument$1(node) {
  return node === document;
}

(function (PopoverCloseSource) {
  PopoverCloseSource[PopoverCloseSource["Click"] = 0] = "Click";
  PopoverCloseSource[PopoverCloseSource["EscapeKeypress"] = 1] = "EscapeKeypress";
  PopoverCloseSource[PopoverCloseSource["FocusOut"] = 2] = "FocusOut";
  PopoverCloseSource[PopoverCloseSource["ScrollOut"] = 3] = "ScrollOut";
})(exports.PopoverCloseSource || (exports.PopoverCloseSource = {}));

var TransitionStatus;

(function (TransitionStatus) {
  TransitionStatus["Entering"] = "entering";
  TransitionStatus["Entered"] = "entered";
  TransitionStatus["Exiting"] = "exiting";
  TransitionStatus["Exited"] = "exited";
})(TransitionStatus || (TransitionStatus = {}));

class PopoverOverlay extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      transitionStatus: this.props.active ? TransitionStatus.Entering : TransitionStatus.Exited
    };
    this.contentNode = /*#__PURE__*/React.createRef();
    this.enteringTimer = void 0;
    this.exitingTimer = void 0;

    this.renderPopover = overlayDetails => {
      var {
        measuring,
        desiredHeight,
        positioning
      } = overlayDetails;
      var {
        id,
        children,
        sectioned,
        fullWidth,
        fullHeight,
        fluidContent,
        hideOnPrint
      } = this.props;
      var className = classNames(styles$5.Popover, positioning === 'above' && styles$5.positionedAbove, fullWidth && styles$5.fullWidth, measuring && styles$5.measuring, hideOnPrint && styles$5['PopoverOverlay-hideOnPrint']);
      var contentStyles = measuring ? undefined : {
        height: desiredHeight
      };
      var contentClassNames = classNames(styles$5.Content, fullHeight && styles$5['Content-fullHeight'], fluidContent && styles$5['Content-fluidContent']);
      var content = /*#__PURE__*/React__default.createElement("div", {
        id: id,
        tabIndex: -1,
        className: contentClassNames,
        style: contentStyles,
        ref: this.contentNode
      }, renderPopoverContent(children, {
        sectioned
      }));
      return /*#__PURE__*/React__default.createElement("div", Object.assign({
        className: className
      }, overlay.props), /*#__PURE__*/React__default.createElement(EventListener, {
        event: "click",
        handler: this.handleClick
      }), /*#__PURE__*/React__default.createElement(EventListener, {
        event: "touchstart",
        handler: this.handleClick
      }), /*#__PURE__*/React__default.createElement(KeypressListener, {
        keyCode: exports.Key.Escape,
        handler: this.handleEscape
      }), /*#__PURE__*/React__default.createElement("div", {
        className: styles$5.FocusTracker // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
        ,
        tabIndex: 0,
        onFocus: this.handleFocusFirstItem
      }), /*#__PURE__*/React__default.createElement("div", {
        className: styles$5.Wrapper
      }, content), /*#__PURE__*/React__default.createElement("div", {
        className: styles$5.FocusTracker // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
        ,
        tabIndex: 0,
        onFocus: this.handleFocusLastItem
      }));
    };

    this.handleClick = event => {
      var target = event.target;
      var {
        contentNode,
        props: {
          activator,
          onClose
        }
      } = this;
      var isDescendant = contentNode.current != null && nodeContainsDescendant(contentNode.current, target);
      var isActivatorDescendant = nodeContainsDescendant(activator, target);

      if (isDescendant || isActivatorDescendant || this.state.transitionStatus !== TransitionStatus.Entered) {
        return;
      }

      onClose(exports.PopoverCloseSource.Click);
    };

    this.handleScrollOut = () => {
      this.props.onClose(exports.PopoverCloseSource.ScrollOut);
    };

    this.handleEscape = () => {
      this.props.onClose(exports.PopoverCloseSource.EscapeKeypress);
    };

    this.handleFocusFirstItem = () => {
      this.props.onClose(exports.PopoverCloseSource.FocusOut);
    };

    this.handleFocusLastItem = () => {
      this.props.onClose(exports.PopoverCloseSource.FocusOut);
    };
  }

  changeTransitionStatus(transitionStatus, cb) {
    this.setState({
      transitionStatus
    }, cb); // Forcing a reflow to enable the animation

    this.contentNode.current && this.contentNode.current.getBoundingClientRect();
  }

  componentDidMount() {
    if (this.props.active) {
      this.focusContent();
      this.changeTransitionStatus(TransitionStatus.Entered);
    }
  }

  componentDidUpdate(oldProps) {
    if (this.props.active && !oldProps.active) {
      this.focusContent();
      this.changeTransitionStatus(TransitionStatus.Entering, () => {
        this.clearTransitionTimeout();
        this.enteringTimer = window.setTimeout(() => {
          this.setState({
            transitionStatus: TransitionStatus.Entered
          });
        }, tokens.durationBase);
      });
    }

    if (!this.props.active && oldProps.active) {
      this.changeTransitionStatus(TransitionStatus.Exiting, () => {
        this.clearTransitionTimeout();
        this.exitingTimer = window.setTimeout(() => {
          this.setState({
            transitionStatus: TransitionStatus.Exited
          });
        }, tokens.durationBase);
      });
    }
  }

  componentWillUnmount() {
    this.clearTransitionTimeout();
  }

  render() {
    var {
      active,
      activator,
      fullWidth,
      preferredPosition = 'below',
      preferredAlignment = 'center',
      preferInputActivator = true,
      fixed
    } = this.props;
    var {
      transitionStatus
    } = this.state;
    if (transitionStatus === TransitionStatus.Exited && !active) return null;
    var className = classNames(styles$5.PopoverOverlay, transitionStatus === TransitionStatus.Entering && styles$5['PopoverOverlay-entering'], transitionStatus === TransitionStatus.Entered && styles$5['PopoverOverlay-open'], transitionStatus === TransitionStatus.Exiting && styles$5['PopoverOverlay-exiting']);
    return /*#__PURE__*/React__default.createElement(PositionedOverlay, {
      fullWidth: fullWidth,
      active: active,
      activator: activator,
      preferInputActivator: preferInputActivator,
      preferredPosition: preferredPosition,
      preferredAlignment: preferredAlignment,
      render: this.renderPopover.bind(this),
      fixed: fixed,
      onScrollOut: this.handleScrollOut,
      classNames: className
    });
  }

  clearTransitionTimeout() {
    if (this.enteringTimer) {
      window.clearTimeout(this.enteringTimer);
    }

    if (this.exitingTimer) {
      window.clearTimeout(this.exitingTimer);
    }
  }

  focusContent() {
    if (this.props.preventAutofocus) {
      return;
    }

    if (this.contentNode == null) {
      return;
    }

    requestAnimationFrame(() => {
      if (this.contentNode.current == null) {
        return;
      }

      this.contentNode.current.focus({
        preventScroll: process.env.NODE_ENV === 'development'
      });
    });
  } // eslint-disable-next-line @shopify/react-no-multiple-render-methods


}

function renderPopoverContent(children, props) {
  var childrenArray = React.Children.toArray(children);

  if (isElementOfType(childrenArray[0], Pane)) {
    return childrenArray;
  }

  return wrapWithComponent(childrenArray, Pane, props);
}

function nodeContainsDescendant(rootNode, descendant) {
  if (rootNode === descendant) {
    return true;
  }

  var parent = descendant.parentNode;

  while (parent != null) {
    if (parent === rootNode) {
      return true;
    }

    parent = parent.parentNode;
  }

  return false;
}

function setActivatorAttributes(activator, {
  id,
  active = false,
  ariaHaspopup,
  activatorDisabled = false
}) {
  if (!activatorDisabled) {
    activator.tabIndex = activator.tabIndex || 0;
  }

  activator.setAttribute('aria-controls', id);
  activator.setAttribute('aria-owns', id);
  activator.setAttribute('aria-expanded', String(active));

  if (ariaHaspopup != null) {
    activator.setAttribute('aria-haspopup', String(ariaHaspopup));
  }
}

// TypeScript can't generate types that correctly infer the typing of
// subcomponents so explicitly state the subcomponents in the type definition.
// Letting this be implicit works in this project but fails in projects that use
// generated *.d.ts files.
var Popover = function Popover(_ref) {
  var {
    activatorWrapper = 'div',
    children,
    onClose,
    activator,
    active,
    fixed,
    ariaHaspopup,
    preferInputActivator = true
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["activatorWrapper", "children", "onClose", "activator", "active", "fixed", "ariaHaspopup", "preferInputActivator"]);

  var [activatorNode, setActivatorNode] = React.useState();
  var activatorContainer = React.useRef(null);
  var WrapperComponent = activatorWrapper;
  var id = useUniqueId('popover');
  var setAccessibilityAttributes = React.useCallback(() => {
    if (activatorContainer.current == null) {
      return;
    }

    var firstFocusable = findFirstFocusableNodeIncludingDisabled(activatorContainer.current);
    var focusableActivator = firstFocusable || activatorContainer.current;
    var activatorDisabled = 'disabled' in focusableActivator && Boolean(focusableActivator.disabled);
    setActivatorAttributes(focusableActivator, {
      id,
      active,
      ariaHaspopup,
      activatorDisabled
    });
  }, [id, active, ariaHaspopup]);

  var handleClose = source => {
    onClose(source);

    if (activatorContainer.current == null) {
      return;
    }

    if ((source === exports.PopoverCloseSource.FocusOut || source === exports.PopoverCloseSource.EscapeKeypress) && activatorNode) {
      var focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode) || findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;

      if (!focusNextFocusableNode(focusableActivator, isInPortal)) {
        focusableActivator.focus();
      }
    }
  };

  React.useEffect(() => {
    if (!activatorNode && activatorContainer.current) {
      setActivatorNode(activatorContainer.current.firstElementChild);
    } else if (activatorNode && activatorContainer.current && !activatorContainer.current.contains(activatorNode)) {
      setActivatorNode(activatorContainer.current.firstElementChild);
    }

    setAccessibilityAttributes();
  }, [activatorNode, setAccessibilityAttributes]);
  React.useEffect(() => {
    if (activatorNode && activatorContainer.current) {
      setActivatorNode(activatorContainer.current.firstElementChild);
    }

    setAccessibilityAttributes();
  }, [activatorNode, setAccessibilityAttributes]);
  var portal = activatorNode ? /*#__PURE__*/React__default.createElement(Portal, {
    idPrefix: "popover"
  }, /*#__PURE__*/React__default.createElement(PopoverOverlay, Object.assign({
    id: id,
    activator: activatorNode,
    preferInputActivator: preferInputActivator,
    onClose: handleClose,
    active: active,
    fixed: fixed
  }, rest), children)) : null;
  return /*#__PURE__*/React__default.createElement(WrapperComponent, {
    ref: activatorContainer
  }, React.Children.only(activator), portal);
};

function isInPortal(element) {
  var parentElement = element.parentElement;

  while (parentElement) {
    if (parentElement.matches(portal.selector)) return false;
    parentElement = parentElement.parentElement;
  }

  return true;
}

Popover.Pane = Pane;
Popover.Section = Section;

var styles$7 = {
  "Badge": "Polaris-Badge",
  "Pip": "Polaris-Badge__Pip",
  "sizeSmall": "Polaris-Badge--sizeSmall",
  "statusSuccess": "Polaris-Badge--statusSuccess",
  "statusInfo": "Polaris-Badge--statusInfo",
  "statusAttention": "Polaris-Badge--statusAttention",
  "statusWarning": "Polaris-Badge--statusWarning",
  "statusCritical": "Polaris-Badge--statusCritical",
  "statusNew": "Polaris-Badge--statusNew",
  "progressIncomplete": "Polaris-Badge--progressIncomplete",
  "progressPartiallyComplete": "Polaris-Badge--progressPartiallyComplete",
  "progressComplete": "Polaris-Badge--progressComplete"
};

var PROGRESS_LABELS = {
  incomplete: 'incomplete',
  partiallyComplete: 'partiallyComplete',
  complete: 'complete'
};
var STATUS_LABELS = {
  info: 'info',
  success: 'success',
  warning: 'warning',
  critical: 'critical',
  attention: 'attention',
  new: 'new'
};
var DEFAULT_SIZE = 'medium';
function Badge({
  children,
  status,
  progress,
  size = DEFAULT_SIZE
}) {
  var i18n = useI18n();
  var className = classNames(styles$7.Badge, status && styles$7[variationName('status', status)], progress && styles$7[variationName('progress', progress)], size && size !== DEFAULT_SIZE && styles$7[variationName('size', size)]);
  var progressMarkup;

  switch (progress) {
    case PROGRESS_LABELS.incomplete:
      progressMarkup = i18n.translate('Polaris.Badge.PROGRESS_LABELS.incomplete');
      break;

    case PROGRESS_LABELS.partiallyComplete:
      progressMarkup = i18n.translate('Polaris.Badge.PROGRESS_LABELS.partiallyComplete');
      break;

    case PROGRESS_LABELS.complete:
      progressMarkup = i18n.translate('Polaris.Badge.PROGRESS_LABELS.complete');
      break;
  }

  var pipMarkup = progress ? /*#__PURE__*/React__default.createElement("span", {
    className: styles$7.Pip
  }, /*#__PURE__*/React__default.createElement(VisuallyHidden, null, progressMarkup)) : null;
  var statusMarkup;

  switch (status) {
    case STATUS_LABELS.info:
      statusMarkup = i18n.translate('Polaris.Badge.STATUS_LABELS.info');
      break;

    case STATUS_LABELS.success:
      statusMarkup = i18n.translate('Polaris.Badge.STATUS_LABELS.success');
      break;

    case STATUS_LABELS.warning:
      statusMarkup = i18n.translate('Polaris.Badge.STATUS_LABELS.warning');
      break;

    case STATUS_LABELS.critical:
      statusMarkup = i18n.translate('Polaris.Badge.STATUS_LABELS.critical');
      break;

    case STATUS_LABELS.attention:
      statusMarkup = i18n.translate('Polaris.Badge.STATUS_LABELS.attention');
      break;

    case STATUS_LABELS.new:
      statusMarkup = i18n.translate('Polaris.Badge.STATUS_LABELS.new');
      break;
  }

  var statusLabelMarkup = status ? /*#__PURE__*/React__default.createElement(VisuallyHidden, null, statusMarkup) : null;
  return /*#__PURE__*/React__default.createElement("span", {
    className: className
  }, statusLabelMarkup, pipMarkup, children);
}

var styles$8 = {
  "variationPositive": "Polaris-TextStyle--variationPositive",
  "variationNegative": "Polaris-TextStyle--variationNegative",
  "variationCode": "Polaris-TextStyle--variationCode",
  "variationStrong": "Polaris-TextStyle--variationStrong",
  "variationSubdued": "Polaris-TextStyle--variationSubdued"
};

var VariationValue;

(function (VariationValue) {
  VariationValue["Positive"] = "positive";
  VariationValue["Negative"] = "negative";
  VariationValue["Strong"] = "strong";
  VariationValue["Subdued"] = "subdued";
  VariationValue["Code"] = "code";
})(VariationValue || (VariationValue = {}));

function TextStyle({
  variation,
  children
}) {
  var className = classNames(variation && styles$8[variationName('variation', variation)], variation === VariationValue.Code && styles$8.code);
  var Element = variationElement(variation);
  return /*#__PURE__*/React__default.createElement(Element, {
    className: className
  }, children);
}

function variationElement(variation) {
  return variation === VariationValue.Code ? 'code' : 'span';
}

var styles$9 = {
  "ActionList": "Polaris-ActionList",
  "newDesignLanguage": "Polaris-ActionList--newDesignLanguage",
  "Section-withoutTitle": "Polaris-ActionList__Section--withoutTitle",
  "Actions": "Polaris-ActionList__Actions",
  "Section": "Polaris-ActionList__Section",
  "Title": "Polaris-ActionList__Title",
  "Item": "Polaris-ActionList__Item",
  "active": "Polaris-ActionList--active",
  "destructive": "Polaris-ActionList--destructive",
  "disabled": "Polaris-ActionList--disabled",
  "Image": "Polaris-ActionList__Image",
  "Suffix": "Polaris-ActionList__Suffix",
  "Content": "Polaris-ActionList__Content",
  "Text": "Polaris-ActionList__Text"
};

var _ref$2 = /*#__PURE__*/React__default.createElement(Scrollable.ScrollTo, null);

function Item({
  id,
  badge,
  content,
  accessibilityLabel,
  helpText,
  url,
  onAction,
  icon,
  image,
  suffix,
  disabled,
  external,
  destructive,
  ellipsis,
  active,
  role
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles$9.Item, disabled && styles$9.disabled, destructive && styles$9.destructive, active && styles$9.active, newDesignLanguage && styles$9.newDesignLanguage);
  var imageElement = null;

  if (icon) {
    imageElement = /*#__PURE__*/React__default.createElement("div", {
      className: styles$9.Image
    }, /*#__PURE__*/React__default.createElement(Icon, {
      source: icon
    }));
  } else if (image) {
    imageElement = /*#__PURE__*/React__default.createElement("div", {
      role: "presentation",
      className: styles$9.Image,
      style: {
        backgroundImage: "url(".concat(image)
      }
    });
  }

  var contentText = ellipsis && content ? "".concat(content, "\u2026") : content;
  var contentMarkup = helpText ? /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", null, contentText), /*#__PURE__*/React__default.createElement(TextStyle, {
    variation: "subdued"
  }, helpText)) : contentText;
  var badgeMarkup = badge && /*#__PURE__*/React__default.createElement("span", {
    className: styles$9.Suffix
  }, /*#__PURE__*/React__default.createElement(Badge, {
    status: badge.status
  }, badge.content));
  var suffixMarkup = suffix && /*#__PURE__*/React__default.createElement("span", {
    className: styles$9.Suffix
  }, suffix);
  var textMarkup = imageElement ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$9.Text
  }, contentMarkup) : contentMarkup;
  var contentElement = /*#__PURE__*/React__default.createElement("div", {
    className: styles$9.Content
  }, imageElement, textMarkup, badgeMarkup, suffixMarkup);
  var scrollMarkup = active ? _ref$2 : null;
  var control = url ? /*#__PURE__*/React__default.createElement(UnstyledLink, {
    id: id,
    url: url,
    className: className,
    external: external,
    "aria-label": accessibilityLabel,
    onClick: onAction
  }, contentElement) : /*#__PURE__*/React__default.createElement("button", {
    id: id,
    type: "button",
    className: className,
    disabled: disabled,
    "aria-label": accessibilityLabel,
    onClick: onAction
  }, contentElement);
  return /*#__PURE__*/React__default.createElement("li", {
    role: role,
    "aria-selected": active
  }, scrollMarkup, control);
}

function Section$1({
  section,
  hasMultipleSections,
  actionRole,
  onActionAnyItem
}) {
  var handleAction = itemOnAction => {
    return () => {
      if (itemOnAction) {
        itemOnAction();
      }

      if (onActionAnyItem) {
        onActionAnyItem();
      }
    };
  };

  var actionMarkup = section.items.map((_ref, index) => {
    var {
      content,
      helpText,
      onAction
    } = _ref,
        item = _objectWithoutProperties(_ref, ["content", "helpText", "onAction"]);

    return /*#__PURE__*/React__default.createElement(Item, Object.assign({
      key: "".concat(content, "-").concat(index),
      content: content,
      helpText: helpText,
      role: actionRole,
      onAction: handleAction(onAction)
    }, item));
  });
  var className = section.title ? undefined : styles$9['Section-withoutTitle'];
  var titleMarkup = section.title ? /*#__PURE__*/React__default.createElement("p", {
    className: styles$9.Title
  }, section.title) : null;
  var sectionRole = actionRole === 'option' ? 'presentation' : undefined;
  var sectionMarkup = /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, titleMarkup, /*#__PURE__*/React__default.createElement("ul", {
    className: styles$9.Actions,
    role: sectionRole
  }, actionMarkup));
  return hasMultipleSections ? /*#__PURE__*/React__default.createElement("li", {
    className: styles$9.Section
  }, sectionMarkup) : sectionMarkup;
}

function ActionList({
  items,
  sections = [],
  actionRole,
  onActionAnyItem
}) {
  var finalSections = [];

  if (items) {
    finalSections = [{
      items
    }, ...sections];
  } else if (sections) {
    finalSections = sections;
  }

  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles$9.ActionList, newDesignLanguage && styles$9.newDesignLanguage);
  var hasMultipleSections = finalSections.length > 1;
  var Element = hasMultipleSections ? 'ul' : 'div';
  var sectionMarkup = finalSections.map((section, index) => {
    return section.items.length > 0 ? /*#__PURE__*/React__default.createElement(Section$1, {
      key: section.title || index,
      section: section,
      hasMultipleSections: hasMultipleSections,
      actionRole: actionRole,
      onActionAnyItem: onActionAnyItem
    }) : null;
  });
  return /*#__PURE__*/React__default.createElement(Element, {
    className: className
  }, sectionMarkup);
}

var styles$a = {
  "Button": "Polaris-Button",
  "newDesignLanguage": "Polaris-Button--newDesignLanguage",
  "pressed": "Polaris-Button--pressed",
  "disabled": "Polaris-Button--disabled",
  "connectedDisclosure": "Polaris-Button--connectedDisclosure",
  "Content": "Polaris-Button__Content",
  "textAlignLeft": "Polaris-Button--textAlignLeft",
  "textAlignCenter": "Polaris-Button--textAlignCenter",
  "textAlignRight": "Polaris-Button--textAlignRight",
  "Icon": "Polaris-Button__Icon",
  "Spinner": "Polaris-Button__Spinner",
  "primary": "Polaris-Button--primary",
  "destructive": "Polaris-Button--destructive",
  "outline": "Polaris-Button--outline",
  "loading": "Polaris-Button--loading",
  "plain": "Polaris-Button--plain",
  "iconOnly": "Polaris-Button--iconOnly",
  "fullWidth": "Polaris-Button--fullWidth",
  "sizeSlim": "Polaris-Button--sizeSlim",
  "sizeLarge": "Polaris-Button--sizeLarge",
  "monochrome": "Polaris-Button--monochrome",
  "Text": "Polaris-Button__Text",
  "DisclosureIcon": "Polaris-Button__DisclosureIcon",
  "DisclosureIconFacingUp": "Polaris-Button__DisclosureIconFacingUp",
  "ConnectedDisclosureWrapper": "Polaris-Button__ConnectedDisclosureWrapper",
  "ConnectedDisclosure": "Polaris-Button__ConnectedDisclosure"
};

var DEFAULT_SIZE$1 = 'medium';

var _ref$3 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.CaretDownMinor
});

function Button({
  id,
  url,
  disabled,
  loading,
  children,
  accessibilityLabel,
  ariaControls,
  ariaExpanded,
  ariaPressed,
  onClick,
  onFocus,
  onBlur,
  onKeyDown,
  onKeyPress,
  onKeyUp,
  onMouseEnter,
  onTouchStart,
  external,
  download,
  icon,
  primary,
  outline,
  destructive,
  disclosure,
  plain,
  monochrome,
  submit,
  size = DEFAULT_SIZE$1,
  textAlign,
  fullWidth,
  pressed,
  connectedDisclosure
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var hasGivenDeprecationWarning = React.useRef(false);

  if (ariaPressed && !hasGivenDeprecationWarning.current) {
    // eslint-disable-next-line no-console
    console.warn('Deprecation: The ariaPressed prop has been replaced with pressed');
    hasGivenDeprecationWarning.current = true;
  }

  var i18n = useI18n();
  var isDisabled = disabled || loading;
  var className = classNames(styles$a.Button, newDesignLanguage && styles$a.newDesignLanguage, primary && styles$a.primary, outline && styles$a.outline, destructive && styles$a.destructive, isDisabled && styles$a.disabled, loading && styles$a.loading, plain && styles$a.plain, pressed && !disabled && !url && styles$a.pressed, monochrome && styles$a.monochrome, size && size !== DEFAULT_SIZE$1 && styles$a[variationName('size', size)], textAlign && styles$a[variationName('textAlign', textAlign)], fullWidth && styles$a.fullWidth, icon && children == null && styles$a.iconOnly, connectedDisclosure && styles$a.connectedDisclosure);
  var disclosureIcon = /*#__PURE__*/React__default.createElement(Icon, {
    source: loading ? 'placeholder' : polarisIcons.CaretDownMinor
  });
  var disclosureIconMarkup = disclosure ? /*#__PURE__*/React__default.createElement("span", {
    className: styles$a.Icon
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classNames(styles$a.DisclosureIcon, disclosure === 'up' && styles$a.DisclosureIconFacingUp)
  }, disclosureIcon)) : null;
  var iconMarkup;

  if (icon) {
    var iconInner = isIconSource(icon) ? /*#__PURE__*/React__default.createElement(Icon, {
      source: loading ? 'placeholder' : icon
    }) : icon;
    iconMarkup = /*#__PURE__*/React__default.createElement("span", {
      className: styles$a.Icon
    }, iconInner);
  }

  var childMarkup = children ? /*#__PURE__*/React__default.createElement("span", {
    className: styles$a.Text
  }, children) : null;
  var spinnerColor = primary || destructive ? 'white' : 'inkLightest';
  var spinnerSVGMarkup = loading ? /*#__PURE__*/React__default.createElement("span", {
    className: styles$a.Spinner
  }, /*#__PURE__*/React__default.createElement(Spinner, {
    size: "small",
    color: spinnerColor,
    accessibilityLabel: i18n.translate('Polaris.Button.spinnerAccessibilityLabel')
  })) : null;
  var content = iconMarkup || disclosureIconMarkup ? /*#__PURE__*/React__default.createElement("span", {
    className: styles$a.Content
  }, spinnerSVGMarkup, iconMarkup, childMarkup, disclosureIconMarkup) : /*#__PURE__*/React__default.createElement("span", {
    className: styles$a.Content
  }, spinnerSVGMarkup, childMarkup);
  var type = submit ? 'submit' : 'button';
  var ariaPressedStatus = pressed !== undefined ? pressed : ariaPressed;
  var [disclosureActive, setDisclosureActive] = React.useState(false);
  var toggleDisclosureActive = React.useCallback(() => {
    setDisclosureActive(disclosureActive => !disclosureActive);
  }, []);
  var connectedDisclosureMarkup;

  if (connectedDisclosure) {
    var connectedDisclosureClassName = classNames(styles$a.Button, primary && styles$a.primary, outline && styles$a.outline, size && size !== DEFAULT_SIZE$1 && styles$a[variationName('size', size)], textAlign && styles$a[variationName('textAlign', textAlign)], destructive && styles$a.destructive, connectedDisclosure.disabled && styles$a.disabled, styles$a.iconOnly, styles$a.ConnectedDisclosure, newDesignLanguage && styles$a.newDesignLanguage);
    var defaultLabel = i18n.translate('Polaris.Button.connectedDisclosureAccessibilityLabel');
    var {
      disabled: _disabled,
      accessibilityLabel: disclosureLabel = defaultLabel
    } = connectedDisclosure;
    var connectedDisclosureActivator = /*#__PURE__*/React__default.createElement("button", {
      type: "button",
      className: connectedDisclosureClassName,
      disabled: _disabled,
      "aria-label": disclosureLabel,
      onClick: toggleDisclosureActive,
      onMouseUp: handleMouseUpByBlurring
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$a.Icon
    }, _ref$3));
    connectedDisclosureMarkup = /*#__PURE__*/React__default.createElement(Popover, {
      active: disclosureActive,
      onClose: toggleDisclosureActive,
      activator: connectedDisclosureActivator,
      preferredAlignment: "right"
    }, /*#__PURE__*/React__default.createElement(ActionList, {
      items: connectedDisclosure.actions,
      onActionAnyItem: toggleDisclosureActive
    }));
  }

  var buttonMarkup;

  if (url) {
    buttonMarkup = isDisabled ?
    /*#__PURE__*/
    // Render an `<a>` so toggling disabled/enabled state changes only the
    // `href` attribute instead of replacing the whole element.
    // eslint-disable-next-line jsx-a11y/anchor-is-valid
    React__default.createElement("a", {
      id: id,
      className: className,
      "aria-label": accessibilityLabel
    }, content) : /*#__PURE__*/React__default.createElement(UnstyledLink, {
      id: id,
      url: url,
      external: external,
      download: download,
      onClick: onClick,
      onFocus: onFocus,
      onBlur: onBlur,
      onMouseUp: handleMouseUpByBlurring,
      onMouseEnter: onMouseEnter,
      onTouchStart: onTouchStart,
      className: className,
      "aria-label": accessibilityLabel
    }, content);
  } else {
    buttonMarkup = /*#__PURE__*/React__default.createElement("button", {
      id: id,
      type: type,
      onClick: onClick,
      onFocus: onFocus,
      onBlur: onBlur,
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp,
      onKeyPress: onKeyPress,
      onMouseUp: handleMouseUpByBlurring,
      onMouseEnter: onMouseEnter,
      onTouchStart: onTouchStart,
      className: className,
      disabled: isDisabled,
      "aria-label": accessibilityLabel,
      "aria-controls": ariaControls,
      "aria-expanded": ariaExpanded,
      "aria-pressed": ariaPressedStatus,
      role: loading ? 'alert' : undefined,
      "aria-busy": loading ? true : undefined
    }, content);
  }

  return connectedDisclosureMarkup ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$a.ConnectedDisclosureWrapper
  }, buttonMarkup, connectedDisclosureMarkup) : buttonMarkup;
}

function isIconSource(x) {
  return typeof x === 'string' || typeof x === 'object' && x.body || typeof x === 'function';
}

function buttonsFrom(actions, overrides = {}) {
  if (Array.isArray(actions)) {
    return actions.map((action, index) => buttonFrom(action, overrides, index));
  } else {
    var _action = actions;
    return buttonFrom(_action, overrides);
  }
}
function buttonFrom(_ref, overrides, key) {
  var {
    content,
    onAction
  } = _ref,
      action = _objectWithoutProperties(_ref, ["content", "onAction"]);

  return /*#__PURE__*/React__default.createElement(Button, Object.assign({
    key: key,
    onClick: onAction
  }, action, overrides), content);
}

/**
 * Returns a stateful value, and a set of memoized functions to toggle it,
 * set it to true and set it to false
 */

function useToggle(initialState) {
  var [value, setState] = React.useState(initialState);
  return {
    value,
    toggle: React.useCallback(() => setState(state => !state), []),
    setTrue: React.useCallback(() => setState(true), []),
    setFalse: React.useCallback(() => setState(false), [])
  };
}

var WithinContentContext = /*#__PURE__*/React.createContext(false);

var styles$b = {
  "ButtonGroup": "Polaris-ButtonGroup",
  "Item": "Polaris-ButtonGroup__Item",
  "Item-plain": "Polaris-ButtonGroup__Item--plain",
  "segmented": "Polaris-ButtonGroup--segmented",
  "Item-focused": "Polaris-ButtonGroup__Item--focused",
  "fullWidth": "Polaris-ButtonGroup--fullWidth"
};

function Item$1({
  button
}) {
  var {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle(false);
  var className = classNames(styles$b.Item, focused && styles$b['Item-focused'], button.props.plain && styles$b['Item-plain']);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    onFocus: forceTrueFocused,
    onBlur: forceFalseFocused
  }, button);
}

function ButtonGroup({
  children,
  segmented,
  fullWidth,
  connectedTop
}) {
  var className = classNames(styles$b.ButtonGroup, segmented && styles$b.segmented, fullWidth && styles$b.fullWidth);
  var contents = elementChildren(children).map((child, index) => /*#__PURE__*/React__default.createElement(Item$1, {
    button: child,
    key: index
  }));
  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    "data-buttongroup-segmented": segmented,
    "data-buttongroup-connected-top": connectedTop,
    "data-buttongroup-full-width": fullWidth
  }, contents);
}

var styles$c = {
  "Stack": "Polaris-Stack",
  "Item": "Polaris-Stack__Item",
  "noWrap": "Polaris-Stack--noWrap",
  "spacingNone": "Polaris-Stack--spacingNone",
  "spacingExtraTight": "Polaris-Stack--spacingExtraTight",
  "spacingTight": "Polaris-Stack--spacingTight",
  "spacingLoose": "Polaris-Stack--spacingLoose",
  "spacingExtraLoose": "Polaris-Stack--spacingExtraLoose",
  "distributionLeading": "Polaris-Stack--distributionLeading",
  "distributionTrailing": "Polaris-Stack--distributionTrailing",
  "distributionCenter": "Polaris-Stack--distributionCenter",
  "distributionEqualSpacing": "Polaris-Stack--distributionEqualSpacing",
  "distributionFill": "Polaris-Stack--distributionFill",
  "distributionFillEvenly": "Polaris-Stack--distributionFillEvenly",
  "alignmentLeading": "Polaris-Stack--alignmentLeading",
  "alignmentTrailing": "Polaris-Stack--alignmentTrailing",
  "alignmentCenter": "Polaris-Stack--alignmentCenter",
  "alignmentFill": "Polaris-Stack--alignmentFill",
  "alignmentBaseline": "Polaris-Stack--alignmentBaseline",
  "vertical": "Polaris-Stack--vertical",
  "Item-fill": "Polaris-Stack__Item--fill"
};

function Item$2({
  children,
  fill
}) {
  var className = classNames(styles$c.Item, fill && styles$c['Item-fill']);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, children);
}

var Stack = /*#__PURE__*/React.memo(function Stack({
  children,
  vertical,
  spacing,
  distribution,
  alignment,
  wrap
}) {
  var className = classNames(styles$c.Stack, vertical && styles$c.vertical, spacing && styles$c[variationName('spacing', spacing)], distribution && styles$c[variationName('distribution', distribution)], alignment && styles$c[variationName('alignment', alignment)], wrap === false && styles$c.noWrap);
  var itemMarkup = elementChildren(children).map((child, index) => {
    var props = {
      key: index
    };
    return wrapWithComponent(child, Item$2, props);
  });
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, itemMarkup);
});
Stack.Item = Item$2;

var styles$d = {
  "Heading": "Polaris-Heading"
};

function Heading({
  element: Element = 'h2',
  children
}) {
  return /*#__PURE__*/React__default.createElement(Element, {
    className: styles$d.Heading
  }, children);
}

var styles$e = {
  "Card": "Polaris-Card",
  "newDesignLanguage": "Polaris-Card--newDesignLanguage",
  "subdued": "Polaris-Card--subdued",
  "Header": "Polaris-Card__Header",
  "Section": "Polaris-Card__Section",
  "Section-fullWidth": "Polaris-Card__Section--fullWidth",
  "Section-subdued": "Polaris-Card__Section--subdued",
  "SectionHeader": "Polaris-Card__SectionHeader",
  "Subsection": "Polaris-Card__Subsection",
  "Footer": "Polaris-Card__Footer",
  "LeftJustified": "Polaris-Card__LeftJustified"
};

function Header({
  children,
  title,
  actions
}) {
  var actionMarkup = actions ? /*#__PURE__*/React__default.createElement(ButtonGroup, null, buttonsFrom(actions, {
    plain: true
  })) : null;
  var titleMarkup = /*#__PURE__*/React.isValidElement(title) ? title : /*#__PURE__*/React__default.createElement(Heading, null, title);
  var headingMarkup = actionMarkup || children ? /*#__PURE__*/React__default.createElement(Stack, {
    alignment: "baseline"
  }, /*#__PURE__*/React__default.createElement(Stack.Item, {
    fill: true
  }, titleMarkup), actionMarkup, children) : titleMarkup;
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$e.Header
  }, headingMarkup);
}

var styles$f = {
  "Subheading": "Polaris-Subheading"
};

function Subheading({
  element: Element = 'h3',
  children
}) {
  var ariaLabel = typeof children === 'string' ? children : undefined;
  return /*#__PURE__*/React__default.createElement(Element, {
    "aria-label": ariaLabel,
    className: styles$f.Subheading
  }, children);
}

function Section$2({
  children,
  title,
  subdued,
  fullWidth,
  actions
}) {
  var className = classNames(styles$e.Section, subdued && styles$e['Section-subdued'], fullWidth && styles$e['Section-fullWidth']);
  var actionMarkup = actions ? /*#__PURE__*/React__default.createElement(ButtonGroup, null, buttonsFrom(actions, {
    plain: true
  })) : null;
  var titleMarkup = typeof title === 'string' ? /*#__PURE__*/React__default.createElement(Subheading, null, title) : title;
  var titleAreaMarkup = titleMarkup || actionMarkup ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$e.SectionHeader
  }, actionMarkup ? /*#__PURE__*/React__default.createElement(Stack, {
    alignment: "baseline"
  }, /*#__PURE__*/React__default.createElement(Stack.Item, {
    fill: true
  }, titleMarkup), actionMarkup) : titleMarkup) : null;
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, titleAreaMarkup, children);
}

function Subsection({
  children
}) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$e.Subsection
  }, children);
}

// TypeScript can't generate types that correctly infer the typing of
// subcomponents so explicitly state the subcomponents in the type definition.
// Letting this be implicit works in this project but fails in projects that use
// generated *.d.ts files.
var Card = function Card({
  children,
  title,
  subdued,
  sectioned,
  actions,
  primaryFooterAction,
  secondaryFooterActions,
  secondaryFooterActionsDisclosureText,
  footerActionAlignment = 'right'
}) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var {
    value: secondaryActionsPopoverOpen,
    toggle: toggleSecondaryActionsPopoverOpen
  } = useToggle(false);
  var className = classNames(styles$e.Card, subdued && styles$e.subdued, newDesignLanguage && styles$e.newDesignLanguage);
  var headerMarkup = title || actions ? /*#__PURE__*/React__default.createElement(Header, {
    actions: actions,
    title: title
  }) : null;
  var content = sectioned ? /*#__PURE__*/React__default.createElement(Section$2, null, children) : children;
  var primaryFooterActionMarkup = primaryFooterAction ? buttonFrom(primaryFooterAction, {
    primary: true
  }) : null;
  var secondaryFooterActionsMarkup = null;

  if (secondaryFooterActions && secondaryFooterActions.length) {
    if (secondaryFooterActions.length === 1) {
      secondaryFooterActionsMarkup = buttonFrom(secondaryFooterActions[0]);
    } else {
      secondaryFooterActionsMarkup = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Popover, {
        active: secondaryActionsPopoverOpen,
        activator: /*#__PURE__*/React__default.createElement(Button, {
          disclosure: true,
          onClick: toggleSecondaryActionsPopoverOpen
        }, secondaryFooterActionsDisclosureText || i18n.translate('Polaris.Common.more')),
        onClose: toggleSecondaryActionsPopoverOpen
      }, /*#__PURE__*/React__default.createElement(ActionList, {
        items: secondaryFooterActions
      })));
    }
  }

  var footerMarkup = primaryFooterActionMarkup || secondaryFooterActionsMarkup ? /*#__PURE__*/React__default.createElement("div", {
    className: classNames(styles$e.Footer, footerActionAlignment === 'left' && styles$e.LeftJustified)
  }, footerActionAlignment === 'right' ? /*#__PURE__*/React__default.createElement(ButtonGroup, null, secondaryFooterActionsMarkup, primaryFooterActionMarkup) : /*#__PURE__*/React__default.createElement(ButtonGroup, null, primaryFooterActionMarkup, secondaryFooterActionsMarkup)) : null;
  return /*#__PURE__*/React__default.createElement(WithinContentContext.Provider, {
    value: true
  }, /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, headerMarkup, content, footerMarkup));
};
Card.Header = Header;
Card.Section = Section$2;
Card.Subsection = Subsection;

var styles$g = {
  "SettingAction": "Polaris-SettingAction",
  "Setting": "Polaris-SettingAction__Setting",
  "Action": "Polaris-SettingAction__Action"
};

function SettingAction({
  action,
  children
}) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$g.SettingAction
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$g.Setting
  }, children), /*#__PURE__*/React__default.createElement("div", {
    className: styles$g.Action
  }, action));
}

var styles$h = {
  "TermsOfService": "Polaris-AccountConnection__TermsOfService",
  "Content": "Polaris-AccountConnection__Content"
};

function AccountConnection({
  connected = false,
  action,
  avatarUrl,
  accountName = '',
  title,
  details,
  termsOfService
}) {
  var initials = accountName ? accountName.split(/\s+/).map(name => name[0]).join('') : undefined;
  var avatarMarkup = connected ? /*#__PURE__*/React__default.createElement(Avatar, {
    accessibilityLabel: "",
    name: accountName,
    initials: initials,
    source: avatarUrl
  }) : null;
  var titleMarkup = null;

  if (title) {
    titleMarkup = /*#__PURE__*/React__default.createElement("div", null, title);
  } else if (accountName) {
    titleMarkup = /*#__PURE__*/React__default.createElement("div", null, accountName);
  }

  var detailsMarkup = details ? /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(TextStyle, {
    variation: "subdued"
  }, details)) : null;
  var termsOfServiceMarkup = termsOfService ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$h.TermsOfService
  }, termsOfService) : null;
  var actionElement = action ? buttonFrom(action, {
    primary: !connected
  }) : null;
  return /*#__PURE__*/React__default.createElement(Card, {
    sectioned: true
  }, /*#__PURE__*/React__default.createElement(SettingAction, {
    action: actionElement
  }, /*#__PURE__*/React__default.createElement(Stack, null, avatarMarkup, /*#__PURE__*/React__default.createElement(Stack.Item, {
    fill: true
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$h.Content
  }, titleMarkup, detailsMarkup)))), termsOfServiceMarkup);
}

function sortAndOverrideActionOrder(actions) {
  var actionsWithOverrides = actions.filter(action => action.index !== undefined);

  if (actionsWithOverrides.length === 0) {
    return actions;
  }

  var sortedActionsWithOverrides = actionsWithOverrides.sort(({
    index: indexA
  }, {
    index: indexB
  }) => {
    return indexA - indexB;
  });
  var actionsWithoutOverrides = actions.filter(action => action.index === undefined);
  var overriddenActions = [...actionsWithoutOverrides];
  sortedActionsWithOverrides.forEach(action => {
    overriddenActions.splice(action.index, 0, action);
  });
  return overriddenActions;
}

var styles$i = {
  "MenuAction": "Polaris-ActionMenu-MenuAction",
  "IconWrapper": "Polaris-ActionMenu-MenuAction__IconWrapper",
  "disabled": "Polaris-ActionMenu-MenuAction--disabled",
  "ContentWrapper": "Polaris-ActionMenu-MenuAction__ContentWrapper"
};

var _ref$4 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.CaretDownMinor
});

function MenuAction({
  content,
  accessibilityLabel,
  url,
  external,
  icon,
  disclosure,
  disabled,
  onAction
}) {
  var iconMarkup = icon && /*#__PURE__*/React__default.createElement("span", {
    className: styles$i.IconWrapper
  }, /*#__PURE__*/React__default.createElement(Icon, {
    source: icon
  }));
  var disclosureIconMarkup = disclosure && /*#__PURE__*/React__default.createElement("span", {
    className: styles$i.IconWrapper
  }, _ref$4);
  var contentMarkup = iconMarkup || disclosureIconMarkup ? /*#__PURE__*/React__default.createElement("span", {
    className: styles$i.ContentWrapper
  }, iconMarkup, /*#__PURE__*/React__default.createElement("span", {
    className: styles$i.Content
  }, content), disclosureIconMarkup) : content;
  var menuActionClassNames = classNames(styles$i.MenuAction, disabled && styles$i.disabled);

  if (url) {
    return /*#__PURE__*/React__default.createElement(UnstyledLink, {
      className: menuActionClassNames,
      url: url,
      external: external,
      "aria-label": accessibilityLabel,
      onMouseUp: handleMouseUpByBlurring
    }, contentMarkup);
  }

  return /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: menuActionClassNames,
    disabled: disabled,
    "aria-label": accessibilityLabel,
    onClick: onAction,
    onMouseUp: handleMouseUpByBlurring
  }, contentMarkup);
}

var styles$j = {
  "Details": "Polaris-ActionMenu-MenuGroup__Details"
};

function MenuGroup({
  accessibilityLabel,
  active,
  actions,
  details,
  title,
  icon,
  onClose,
  onOpen
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var handleClose = React.useCallback(() => {
    onClose(title);
  }, [onClose, title]);
  var handleOpen = React.useCallback(() => {
    onOpen(title);
  }, [onOpen, title]);

  if (!actions.length) {
    return null;
  }

  var popoverActivator = newDesignLanguage ? /*#__PURE__*/React__default.createElement(Button, {
    disclosure: true,
    icon: icon,
    accessibilityLabel: accessibilityLabel,
    onClick: handleOpen
  }, title) : /*#__PURE__*/React__default.createElement(MenuAction, {
    disclosure: true,
    content: title,
    icon: icon,
    accessibilityLabel: accessibilityLabel,
    onAction: handleOpen
  });
  return /*#__PURE__*/React__default.createElement(Popover, {
    active: Boolean(active),
    activator: popoverActivator,
    preferredAlignment: "left",
    onClose: handleClose
  }, /*#__PURE__*/React__default.createElement(ActionList, {
    items: actions,
    onActionAnyItem: handleClose
  }), details && /*#__PURE__*/React__default.createElement("div", {
    className: styles$j.Details
  }, details));
}

var styles$k = {
  "ActionsLayout": "Polaris-ActionMenu-Actions__ActionsLayout"
};

function Actions({
  actions = [],
  groups = []
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var [activeMenuGroup, setActiveMenuGroup] = React.useState(undefined);
  var handleMenuGroupToggle = React.useCallback(group => setActiveMenuGroup(activeMenuGroup ? undefined : group), [activeMenuGroup]);
  var handleMenuGroupClose = React.useCallback(() => setActiveMenuGroup(undefined), []);
  var menuActions = [...actions, ...groups];
  var overriddenActions = sortAndOverrideActionOrder(menuActions);
  var actionMarkup = overriddenActions.map((action, index) => {
    if ('title' in action) {
      var {
        title,
        actions: _actions
      } = action,
          _rest = _objectWithoutProperties(action, ["title", "actions"]);

      return _actions.length > 0 ? /*#__PURE__*/React__default.createElement(MenuGroup, Object.assign({
        key: "MenuGroup-".concat(index),
        title: title,
        active: title === activeMenuGroup,
        actions: _actions
      }, _rest, {
        onOpen: handleMenuGroupToggle,
        onClose: handleMenuGroupClose
      })) : null;
    }

    var {
      content,
      onAction
    } = action,
        rest = _objectWithoutProperties(action, ["content", "onAction"]);

    return newDesignLanguage ? /*#__PURE__*/React__default.createElement(Button, Object.assign({
      key: index,
      onClick: onAction
    }, rest), content) : /*#__PURE__*/React__default.createElement(MenuAction, Object.assign({
      key: "MenuAction-".concat(index),
      content: content,
      onAction: onAction
    }, rest));
  });
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$k.ActionsLayout
  }, newDesignLanguage ? /*#__PURE__*/React__default.createElement(ButtonGroup, null, actionMarkup) : actionMarkup);
}

var styles$l = {
  "RollupActivator": "Polaris-ActionMenu-RollupActions__RollupActivator"
};

function RollupActions({
  items = [],
  sections = []
}) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var {
    value: rollupOpen,
    toggle: toggleRollupOpen
  } = useToggle(false);

  if (items.length === 0 && sections.length === 0) {
    return null;
  }

  var activatorMarkup = /*#__PURE__*/React__default.createElement("div", {
    className: styles$l.RollupActivator
  }, /*#__PURE__*/React__default.createElement(Button, {
    plain: !newDesignLanguage,
    icon: polarisIcons.HorizontalDotsMinor,
    accessibilityLabel: i18n.translate('Polaris.ActionMenu.RollupActions.rollupButton'),
    onClick: toggleRollupOpen
  }));
  return /*#__PURE__*/React__default.createElement(Popover, {
    active: rollupOpen,
    activator: activatorMarkup,
    preferredAlignment: "right",
    onClose: toggleRollupOpen
  }, /*#__PURE__*/React__default.createElement(ActionList, {
    items: items,
    sections: sections,
    onActionAnyItem: toggleRollupOpen
  }));
}

var styles$m = {
  "ActionMenu": "Polaris-ActionMenu",
  "rollup": "Polaris-ActionMenu--rollup"
};

function ActionMenu({
  actions = [],
  groups = [],
  rollup
}) {
  if (actions.length === 0 && groups.length === 0) {
    return null;
  }

  var actionMenuClassNames = classNames(styles$m.ActionMenu, rollup && styles$m.rollup);
  var rollupSections = groups.map(group => convertGroupToSection(group));
  return /*#__PURE__*/React__default.createElement("div", {
    className: actionMenuClassNames
  }, rollup ? /*#__PURE__*/React__default.createElement(RollupActions, {
    items: actions,
    sections: rollupSections
  }) : /*#__PURE__*/React__default.createElement(Actions, {
    actions: actions,
    groups: groups
  }));
}
function hasGroupsWithActions(groups = []) {
  return groups.length === 0 ? false : groups.some(group => group.actions.length > 0);
}

function convertGroupToSection({
  title,
  actions
}) {
  return {
    title,
    items: actions
  };
}

function arraysAreEqual(firstArray, secondArray, comparator) {
  if (firstArray.length !== secondArray.length) {
    return false;
  }

  return firstArray.every((firstItem, index) => {
    var secondItem = secondArray[index];

    if (comparator != null) {
      return comparator(firstItem, secondItem);
    }

    return firstItem === secondItem;
  });
}

/**
 * Allows for custom or deep comparison of a dependency list. Useful to keep a consistent dependency
 * list across reference changes.
 * @param dependencies A dependency array similar to React's useEffect / useCallback / useMemo
 * @param comparator An optional function to compare dependencies that'll default to a deep comparison
 * @returns A dependency list
 * @see {@link https://github.com/Shopify/polaris-react/blob/master/src/utilities/use-deep-effect.tsx}
 * @see {@link https://github.com/Shopify/polaris-react/blob/master/src/utilities/use-deep-callback.tsx}
 * @example
 * function useDeepEffectExample(callback, dependencies, customCompare) {
 *  useEffect(callback, useDeepCompareRef(dependencies, customCompare));
 * }
 */
function useDeepCompareRef(dependencies, comparator = isEqual) {
  var dependencyList = React.useRef(dependencies);

  if (!comparator(dependencyList.current, dependencies)) {
    dependencyList.current = dependencies;
  }

  return dependencyList.current;
}

/**
 * A replacement for React's useEffect that'll allow for custom and deep
 * compares of the dependency list.
 * @see {@link https://reactjs.org/docs/hooks-reference.html#useeffect}
 * @param callback Accepts a callback that's forwarded to React's useEffect
 * @param dependencies A dependency array similar to React's useEffect however it utilizes a deep compare
 * @param customCompare Opportunity to provide a custom compare function
 * @example
 * function ComponentExample() {
 *  const [, forceUpdate] = useState();
 *  const obj = {a: 1};
 *
 *  useDeepEffect(() => {
 *    console.log('useDeepEffect invocation');
 *    forceUpdate(obj);
 *  }, [obj]);
 *
 *  return null;
 * }
 */
function useDeepEffect(callback, dependencies, customCompare) {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  React.useEffect(callback, useDeepCompareRef(dependencies, customCompare));
}

var styles$n = {
  "Checkbox": "Polaris-OptionList-Checkbox",
  "Input": "Polaris-OptionList-Checkbox__Input",
  "newDesignLanguage": "Polaris-OptionList-Checkbox--newDesignLanguage",
  "Backdrop": "Polaris-OptionList-Checkbox__Backdrop",
  "Icon": "Polaris-OptionList-Checkbox__Icon",
  "active": "Polaris-OptionList-Checkbox--active",
  "keyFocused": "Polaris-OptionList-Checkbox--keyFocused",
  "Input-indeterminate": "Polaris-OptionList-Checkbox__Input--indeterminate",
  "hover": "Polaris-OptionList-Checkbox--hover"
};

var _ref$5 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.TickSmallMinor
});

function Checkbox({
  id: idProp,
  checked = false,
  disabled,
  active,
  onChange,
  name,
  value,
  role
}) {
  var id = useUniqueId('Checkbox', idProp);
  var {
    newDesignLanguage
  } = useFeatures();
  var [keyFocused, setKeyFocused] = React.useState(false);
  var className = classNames(styles$n.Checkbox, active && styles$n.active, newDesignLanguage && styles$n.newDesignLanguage);

  var handleBlur = () => {
    setKeyFocused(false);
  };

  var handleKeyUp = () => {
    !keyFocused && setKeyFocused(true);
  };

  var inputClassName = classNames(styles$n.Input, newDesignLanguage && keyFocused && styles$n.keyFocused);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, /*#__PURE__*/React__default.createElement("input", {
    id: id,
    name: name,
    value: value,
    type: "checkbox",
    checked: checked,
    disabled: disabled,
    className: inputClassName,
    "aria-checked": checked,
    onChange: onChange,
    onBlur: handleBlur,
    onKeyUp: handleKeyUp,
    role: role
  }), /*#__PURE__*/React__default.createElement("div", {
    className: styles$n.Backdrop
  }), /*#__PURE__*/React__default.createElement("div", {
    className: styles$n.Icon
  }, _ref$5));
}

var styles$o = {
  "Option": "Polaris-OptionList-Option",
  "SingleSelectOption": "Polaris-OptionList-Option__SingleSelectOption",
  "disabled": "Polaris-OptionList-Option--disabled",
  "Media": "Polaris-OptionList-Option__Media",
  "Label": "Polaris-OptionList-Option__Label",
  "Checkbox": "Polaris-OptionList-Option__Checkbox",
  "newDesignLanguage": "Polaris-OptionList-Option--newDesignLanguage",
  "focused": "Polaris-OptionList-Option--focused",
  "select": "Polaris-OptionList-Option--select",
  "active": "Polaris-OptionList-Option--active"
};

var _ref$6 = /*#__PURE__*/React__default.createElement(Scrollable.ScrollTo, null);

function Option({
  label,
  value,
  id,
  select,
  active,
  allowMultiple,
  disabled,
  role,
  media,
  onClick,
  section,
  index
}) {
  var {
    value: focused,
    toggle: toggleFocused
  } = useToggle(false);
  var {
    newDesignLanguage
  } = useFeatures();
  var handleClick = React.useCallback(() => {
    if (disabled) {
      return;
    }

    onClick(section, index);
  }, [disabled, index, onClick, section]);
  var mediaMarkup = media ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$o.Media
  }, media) : null;
  var singleSelectClassName = classNames(styles$o.SingleSelectOption, focused && styles$o.focused, disabled && styles$o.disabled, select && styles$o.select, active && styles$o.active);
  var multiSelectClassName = classNames(styles$o.Label, disabled && styles$o.disabled, active && styles$o.active, newDesignLanguage && select && styles$o.select);
  var checkBoxRole = role === 'option' ? 'presentation' : undefined;
  var optionMarkup = allowMultiple ? /*#__PURE__*/React__default.createElement("label", {
    htmlFor: id,
    className: multiSelectClassName
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$o.Checkbox
  }, /*#__PURE__*/React__default.createElement(Checkbox, {
    id: id,
    value: value,
    checked: select,
    active: active,
    disabled: disabled,
    onChange: handleClick,
    role: checkBoxRole
  })), mediaMarkup, label) : /*#__PURE__*/React__default.createElement("button", {
    id: id,
    type: "button",
    className: singleSelectClassName,
    onClick: handleClick,
    disabled: disabled,
    onFocus: toggleFocused,
    onBlur: toggleFocused
  }, mediaMarkup, label);
  var scrollMarkup = active ? _ref$6 : null;
  var optionClassName = classNames(styles$o.Option, newDesignLanguage && styles$o.newDesignLanguage);
  return /*#__PURE__*/React__default.createElement("li", {
    key: id,
    className: optionClassName,
    tabIndex: -1,
    "aria-selected": active,
    role: role
  }, scrollMarkup, optionMarkup);
}

var styles$p = {
  "OptionList": "Polaris-OptionList",
  "newDesignLanguage": "Polaris-OptionList--newDesignLanguage",
  "Options": "Polaris-OptionList__Options",
  "Title": "Polaris-OptionList__Title"
};

function OptionList({
  options,
  sections,
  title,
  selected,
  allowMultiple,
  role,
  optionRole,
  onChange,
  id: idProp
}) {
  var [normalizedOptions, setNormalizedOptions] = React.useState(createNormalizedOptions(options, sections, title));
  var id = useUniqueId('OptionList', idProp);
  var {
    newDesignLanguage
  } = useFeatures();
  useDeepEffect(() => {
    setNormalizedOptions(createNormalizedOptions(options || [], sections || [], title));
  }, [options, sections, title], optionArraysAreEqual);
  var handleClick = React.useCallback((sectionIndex, optionIndex) => {
    var selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
    var foundIndex = selected.indexOf(selectedValue);

    if (allowMultiple) {
      var newSelection = foundIndex === -1 ? [selectedValue, ...selected] : [...selected.slice(0, foundIndex), ...selected.slice(foundIndex + 1, selected.length)];
      onChange(newSelection);
      return;
    }

    onChange([selectedValue]);
  }, [normalizedOptions, selected, allowMultiple, onChange]);
  var optionsExist = normalizedOptions.length > 0;
  var optionsMarkup = optionsExist ? normalizedOptions.map(({
    title,
    options
  }, sectionIndex) => {
    var titleMarkup = title ? /*#__PURE__*/React__default.createElement("p", {
      className: styles$p.Title,
      role: role
    }, title) : null;
    var optionsMarkup = options && options.map((option, optionIndex) => {
      var isSelected = selected.includes(option.value);
      var optionId = option.id || "".concat(id, "-").concat(sectionIndex, "-").concat(optionIndex);
      return /*#__PURE__*/React__default.createElement(Option, Object.assign({}, option, {
        key: optionId,
        id: optionId,
        section: sectionIndex,
        index: optionIndex,
        onClick: handleClick,
        select: isSelected,
        allowMultiple: allowMultiple,
        role: optionRole
      }));
    });
    return /*#__PURE__*/React__default.createElement("li", {
      key: title || "noTitle-".concat(sectionIndex)
    }, titleMarkup, /*#__PURE__*/React__default.createElement("ul", {
      className: styles$p.Options,
      id: "".concat(id, "-").concat(sectionIndex),
      role: role,
      "aria-multiselectable": allowMultiple
    }, optionsMarkup));
  }) : null;
  var optionListClassName = classNames(styles$p.OptionList, newDesignLanguage && styles$p.newDesignLanguage);
  return /*#__PURE__*/React__default.createElement("ul", {
    className: optionListClassName,
    role: role
  }, optionsMarkup);
}

function createNormalizedOptions(options, sections, title) {
  if (options == null) {
    var section = {
      options: [],
      title
    };
    return sections == null ? [] : [section, ...sections];
  }

  if (sections == null) {
    return [{
      title,
      options
    }];
  }

  return [{
    title,
    options
  }, ...sections];
}

function isSection(arr) {
  return typeof arr[0] === 'object' && Object.prototype.hasOwnProperty.call(arr[0], 'options');
}

function optionArraysAreEqual(firstArray, secondArray) {
  if (isSection(firstArray) && isSection(secondArray)) {
    return arraysAreEqual(firstArray, secondArray, testSectionsPropEquality);
  }

  return arraysAreEqual(firstArray, secondArray);
}

function testSectionsPropEquality(previousSection, currentSection) {
  var {
    options: previousOptions
  } = previousSection;
  var {
    options: currentOptions
  } = currentSection;
  var optionsAreEqual = arraysAreEqual(previousOptions, currentOptions);
  var titlesAreEqual = previousSection.title === currentSection.title;
  return optionsAreEqual && titlesAreEqual;
}

var ComboBoxContext = /*#__PURE__*/React.createContext({});

var styles$q = {
  "EmptyState": "Polaris-Autocomplete-ComboBox__EmptyState"
};

function ComboBox({
  id: idProp,
  options,
  selected,
  textField,
  preferredPosition,
  listTitle,
  allowMultiple,
  actionsBefore,
  actionsAfter,
  contentBefore,
  contentAfter,
  emptyState,
  onSelect,
  onEndReached
}) {
  var [selectedIndex, setSelectedIndex] = React.useState(-1);
  var [selectedOptions, setSelectedOptions] = React.useState(selected);
  var [navigableOptions, setNavigableOptions] = React.useState([]);
  var {
    value: popoverActive,
    setTrue: forcePopoverActiveTrue,
    setFalse: forcePopoverActiveFalse
  } = useToggle(false);
  var id = useUniqueId('ComboBox', idProp);
  var getActionsWithIds = React.useCallback((actions, before) => {
    if (before) {
      return navigableOptions.slice(0, actions.length);
    }

    return navigableOptions.slice(-actions.length);
  }, [navigableOptions]);
  var visuallyUpdateSelectedOption = React.useCallback((newOption, oldOption) => {
    if (oldOption) {
      oldOption.active = false;
    }

    if (newOption) {
      newOption.active = true;
    }
  }, []);
  var resetVisuallySelectedOptions = React.useCallback(() => {
    setSelectedIndex(-1);
    navigableOptions.forEach(option => {
      option.active = false;
    });
  }, [navigableOptions]);
  var selectOptionAtIndex = React.useCallback(newOptionIndex => {
    if (navigableOptions.length === 0) {
      return;
    }

    var oldSelectedOption = navigableOptions[selectedIndex];
    var newSelectedOption = navigableOptions[newOptionIndex];
    visuallyUpdateSelectedOption(newSelectedOption, oldSelectedOption);
    setSelectedIndex(newOptionIndex);
  }, [navigableOptions, selectedIndex, visuallyUpdateSelectedOption]);
  var selectNextOption = React.useCallback(() => {
    if (navigableOptions.length === 0) {
      return;
    }

    var newIndex = selectedIndex;

    if (selectedIndex + 1 >= navigableOptions.length) {
      newIndex = 0;
    } else {
      newIndex++;
    }

    selectOptionAtIndex(newIndex);
  }, [navigableOptions, selectOptionAtIndex, selectedIndex]);
  var selectPreviousOption = React.useCallback(() => {
    if (navigableOptions.length === 0) {
      return;
    }

    var newIndex = selectedIndex;

    if (selectedIndex <= 0) {
      newIndex = navigableOptions.length - 1;
    } else {
      newIndex--;
    }

    selectOptionAtIndex(newIndex);
  }, [navigableOptions, selectOptionAtIndex, selectedIndex]);
  var selectOptions = React.useCallback(selected => {
    selected && onSelect(selected);

    if (!allowMultiple) {
      resetVisuallySelectedOptions();
      forcePopoverActiveFalse();
    }
  }, [allowMultiple, forcePopoverActiveFalse, onSelect, resetVisuallySelectedOptions]);
  var handleSelection = React.useCallback(newSelected => {
    var newlySelectedOptions = selected;

    if (selected.includes(newSelected)) {
      newlySelectedOptions.splice(newlySelectedOptions.indexOf(newSelected), 1);
    } else if (allowMultiple) {
      newlySelectedOptions.push(newSelected);
    } else {
      newlySelectedOptions = [newSelected];
    }

    selectOptions(newlySelectedOptions);
  }, [allowMultiple, selectOptions, selected]);
  var handleEnter = React.useCallback(event => {
    if (event.keyCode !== exports.Key.Enter) {
      return;
    }

    if (popoverActive && selectedIndex > -1) {
      var selectedOption = navigableOptions[selectedIndex];

      if (isOption(selectedOption)) {
        event.preventDefault();
        handleSelection(selectedOption.value);
      } else {
        selectedOption.onAction && selectedOption.onAction();
      }
    }
  }, [handleSelection, navigableOptions, popoverActive, selectedIndex]);
  var handleBlur = React.useCallback(() => {
    forcePopoverActiveFalse();
    resetVisuallySelectedOptions();
  }, [forcePopoverActiveFalse, resetVisuallySelectedOptions]);
  var activatePopover = React.useCallback(() => {
    !popoverActive && forcePopoverActiveTrue();
  }, [forcePopoverActiveTrue, popoverActive]);
  var updateIndexOfSelectedOption = React.useCallback(newOptions => {
    var selectedOption = navigableOptions[selectedIndex];

    if (selectedOption && newOptions.includes(selectedOption)) {
      selectOptionAtIndex(newOptions.indexOf(selectedOption));
    } else if (selectedIndex > newOptions.length - 1) {
      resetVisuallySelectedOptions();
    } else {
      selectOptionAtIndex(selectedIndex);
    }
  }, [navigableOptions, resetVisuallySelectedOptions, selectOptionAtIndex, selectedIndex]);
  React.useEffect(() => {
    if (selectedOptions !== selected) {
      setSelectedOptions(selected);
    }
  }, [selected, selectedOptions]);
  React.useEffect(() => {
    var newNavigableOptions = [];

    if (actionsBefore) {
      newNavigableOptions = newNavigableOptions.concat(actionsBefore);
    }

    if (options) {
      newNavigableOptions = newNavigableOptions.concat(options);
    }

    if (actionsAfter) {
      newNavigableOptions = newNavigableOptions.concat(actionsAfter);
    }

    newNavigableOptions = assignOptionIds(newNavigableOptions, id);
    setNavigableOptions(newNavigableOptions);
  }, [actionsAfter, actionsBefore, id, options]);
  React.useEffect(() => {
    updateIndexOfSelectedOption(navigableOptions);
  }, [navigableOptions, updateIndexOfSelectedOption]);
  var actionsBeforeMarkup;

  if (actionsBefore && actionsBefore.length > 0) {
    actionsBeforeMarkup = /*#__PURE__*/React__default.createElement(ActionList, {
      actionRole: "option",
      items: getActionsWithIds(actionsBefore, true)
    });
  }

  var actionsAfterMarkup;

  if (actionsAfter && actionsAfter.length > 0) {
    actionsAfterMarkup = /*#__PURE__*/React__default.createElement(ActionList, {
      actionRole: "option",
      items: getActionsWithIds(actionsAfter)
    });
  }

  var optionsMarkup = options.length > 0 && /*#__PURE__*/React__default.createElement(OptionList, {
    role: "presentation",
    optionRole: "option",
    options: filterForOptions(navigableOptions),
    onChange: selectOptions,
    selected: selectedOptions,
    title: listTitle,
    allowMultiple: allowMultiple
  });
  var emptyStateMarkup = !actionsAfter && !actionsBefore && !contentAfter && !contentBefore && options.length === 0 && emptyState && /*#__PURE__*/React__default.createElement("div", {
    className: styles$q.EmptyState
  }, emptyState);
  var selectedOptionId = selectedIndex > -1 ? "".concat(id, "-").concat(selectedIndex) : undefined;
  var context = {
    id,
    selectedOptionId
  };
  return /*#__PURE__*/React__default.createElement(ComboBoxContext.Provider, {
    value: context
  }, /*#__PURE__*/React__default.createElement("div", {
    onClick: activatePopover,
    onKeyDown: activatePopover,
    role: "combobox",
    "aria-expanded": popoverActive,
    "aria-owns": id,
    "aria-controls": id,
    "aria-haspopup": true,
    onFocus: forcePopoverActiveTrue,
    onBlur: handleBlur,
    tabIndex: options.length === 0 ? -1 : 0
  }, /*#__PURE__*/React__default.createElement(KeypressListener, {
    keyCode: exports.Key.DownArrow,
    handler: selectNextOption
  }), /*#__PURE__*/React__default.createElement(KeypressListener, {
    keyCode: exports.Key.UpArrow,
    handler: selectPreviousOption
  }), /*#__PURE__*/React__default.createElement(EventListener, {
    event: "keydown",
    handler: handleEnter
  }), /*#__PURE__*/React__default.createElement(KeypressListener, {
    keyCode: exports.Key.Escape,
    handler: forcePopoverActiveFalse
  }), /*#__PURE__*/React__default.createElement(Popover, {
    activator: textField,
    active: popoverActive,
    onClose: forcePopoverActiveFalse,
    preferredPosition: preferredPosition,
    fullWidth: true,
    preventAutofocus: true
  }, /*#__PURE__*/React__default.createElement(Popover.Pane, {
    onScrolledToBottom: onEndReached
  }, /*#__PURE__*/React__default.createElement("div", {
    id: id,
    role: "listbox",
    "aria-multiselectable": allowMultiple
  }, contentBefore, actionsBeforeMarkup, optionsMarkup, actionsAfterMarkup, contentAfter, emptyStateMarkup)))));
}

function assignOptionIds(options, id) {
  return options.map((option, optionIndex) => _objectSpread2(_objectSpread2({}, option), {}, {
    id: "".concat(id, "-").concat(optionIndex)
  }));
}

function isOption(navigableOption) {
  return 'value' in navigableOption && navigableOption.value !== undefined;
}

function filterForOptions(mixedArray) {
  return mixedArray.filter(isOption);
}

var styles$r = {
  "Label": "Polaris-Label",
  "hidden": "Polaris-Label--hidden",
  "Text": "Polaris-Label__Text"
};

function labelID(id) {
  return "".concat(id, "Label");
}
function Label({
  children,
  id,
  hidden
}) {
  var className = classNames(styles$r.Label, hidden && styles$r.hidden);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, /*#__PURE__*/React__default.createElement("label", {
    id: labelID(id),
    htmlFor: id,
    className: styles$r.Text
  }, children));
}

var styles$s = {
  "InlineError": "Polaris-InlineError",
  "Icon": "Polaris-InlineError__Icon"
};

var _ref$7 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.AlertMinor
});

function InlineError({
  message,
  fieldID
}) {
  if (!message) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", {
    id: errorTextID(fieldID),
    className: styles$s.InlineError
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$s.Icon
  }, _ref$7), message);
}
function errorTextID(id) {
  return "".concat(id, "Error");
}

var styles$t = {
  "hidden": "Polaris-Labelled--hidden",
  "LabelWrapper": "Polaris-Labelled__LabelWrapper",
  "HelpText": "Polaris-Labelled__HelpText",
  "Error": "Polaris-Labelled__Error",
  "Action": "Polaris-Labelled__Action"
};

function Labelled(_ref) {
  var {
    id,
    label,
    error,
    action,
    helpText,
    children,
    labelHidden
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["id", "label", "error", "action", "helpText", "children", "labelHidden"]);

  var className = classNames(labelHidden && styles$t.hidden);
  var actionMarkup = action ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$t.Action
  }, buttonFrom(action, {
    plain: true
  })) : null;
  var helpTextMarkup = helpText ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$t.HelpText,
    id: helpTextID(id)
  }, helpText) : null;
  var errorMarkup = error && typeof error !== 'boolean' && /*#__PURE__*/React__default.createElement("div", {
    className: styles$t.Error
  }, /*#__PURE__*/React__default.createElement(InlineError, {
    message: error,
    fieldID: id
  }));
  var labelMarkup = label ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$t.LabelWrapper
  }, /*#__PURE__*/React__default.createElement(Label, Object.assign({
    id: id
  }, rest, {
    hidden: false
  }), label), actionMarkup) : null;
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, labelMarkup, children, errorMarkup, helpTextMarkup);
}
function helpTextID(id) {
  return "".concat(id, "HelpText");
}

var styles$u = {
  "Connected": "Polaris-Connected",
  "Item": "Polaris-Connected__Item",
  "Item-primary": "Polaris-Connected__Item--primary",
  "Item-connection": "Polaris-Connected__Item--connection",
  "Item-focused": "Polaris-Connected__Item--focused",
  "newDesignLanguage": "Polaris-Connected--newDesignLanguage"
};

class Item$3 extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      focused: false
    };

    this.handleBlur = () => {
      this.setState({
        focused: false
      });
    };

    this.handleFocus = () => {
      this.setState({
        focused: true
      });
    };
  }

  render() {
    var {
      focused
    } = this.state;
    var {
      children,
      position
    } = this.props;
    var className = classNames(styles$u.Item, focused && styles$u['Item-focused'], position === 'primary' ? styles$u['Item-primary'] : styles$u['Item-connection']);
    return /*#__PURE__*/React__default.createElement("div", {
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      className: className
    }, children);
  }

}

function Connected({
  children,
  left,
  right
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles$u.Connected, newDesignLanguage && styles$u.newDesignLanguage);
  var leftConnectionMarkup = left ? /*#__PURE__*/React__default.createElement(Item$3, {
    position: "left"
  }, left) : null;
  var rightConnectionMarkup = right ? /*#__PURE__*/React__default.createElement(Item$3, {
    position: "right"
  }, right) : null;
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, leftConnectionMarkup, /*#__PURE__*/React__default.createElement(Item$3, {
    position: "primary"
  }, children), rightConnectionMarkup);
}

var styles$v = {
  "TextField": "Polaris-TextField",
  "multiline": "Polaris-TextField--multiline",
  "Input": "Polaris-TextField__Input",
  "hasValue": "Polaris-TextField--hasValue",
  "focus": "Polaris-TextField--focus",
  "Backdrop": "Polaris-TextField__Backdrop",
  "error": "Polaris-TextField--error",
  "readOnly": "Polaris-TextField--readOnly",
  "disabled": "Polaris-TextField--disabled",
  "Prefix": "Polaris-TextField__Prefix",
  "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
  "Input-suffixed": "Polaris-TextField__Input--suffixed",
  "Input-alignRight": "Polaris-TextField__Input--alignRight",
  "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
  "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
  "Suffix": "Polaris-TextField__Suffix",
  "CharacterCount": "Polaris-TextField__CharacterCount",
  "AlignFieldBottom": "Polaris-TextField__AlignFieldBottom",
  "ClearButton": "Polaris-TextField__ClearButton",
  "Spinner": "Polaris-TextField__Spinner",
  "SpinnerIcon": "Polaris-TextField__SpinnerIcon",
  "Resizer": "Polaris-TextField__Resizer",
  "DummyInput": "Polaris-TextField__DummyInput",
  "Segment": "Polaris-TextField__Segment",
  "newDesignLanguage": "Polaris-TextField--newDesignLanguage"
};

function Resizer({
  contents,
  currentHeight: currentHeightProp = null,
  minimumLines,
  onHeightChange
}) {
  var contentNode = React.useRef(null);
  var minimumLinesNode = React.useRef(null);
  var animationFrame = React.useRef();
  var currentHeight = React.useRef(currentHeightProp);

  if (currentHeightProp !== currentHeight.current) {
    currentHeight.current = currentHeightProp;
  }

  React.useEffect(() => {
    return () => {
      if (animationFrame.current) {
        cancelAnimationFrame(animationFrame.current);
      }
    };
  }, []);
  var minimumLinesMarkup = minimumLines ? /*#__PURE__*/React__default.createElement("div", {
    ref: minimumLinesNode,
    className: styles$v.DummyInput,
    dangerouslySetInnerHTML: {
      __html: getContentsForMinimumLines(minimumLines)
    }
  }) : null;
  var handleHeightCheck = React.useCallback(() => {
    if (animationFrame.current) {
      cancelAnimationFrame(animationFrame.current);
    }

    animationFrame.current = requestAnimationFrame(() => {
      if (!contentNode.current || !minimumLinesNode.current) {
        return;
      }

      var newHeight = Math.max(contentNode.current.offsetHeight, minimumLinesNode.current.offsetHeight);

      if (newHeight !== currentHeight.current) {
        onHeightChange(newHeight);
      }
    });
  }, [onHeightChange]);
  React.useLayoutEffect(() => {
    handleHeightCheck();
  });
  return /*#__PURE__*/React__default.createElement("div", {
    "aria-hidden": true,
    className: styles$v.Resizer
  }, /*#__PURE__*/React__default.createElement(EventListener, {
    event: "resize",
    handler: handleHeightCheck
  }), /*#__PURE__*/React__default.createElement("div", {
    ref: contentNode,
    className: styles$v.DummyInput,
    dangerouslySetInnerHTML: {
      __html: getFinalContents(contents)
    }
  }), minimumLinesMarkup);
}
var ENTITIES_TO_REPLACE = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '\n': '<br>',
  '\r': ''
};
var REPLACE_REGEX$1 = new RegExp("[".concat(Object.keys(ENTITIES_TO_REPLACE).join(), "]"), 'g');

function replaceEntity(entity) {
  return ENTITIES_TO_REPLACE[entity];
}

function getContentsForMinimumLines(minimumLines) {
  var content = '';

  for (var line = 0; line < minimumLines; line++) {
    content += '<br>';
  }

  return content;
}

function getFinalContents(contents) {
  return contents ? "".concat(contents.replace(REPLACE_REGEX$1, replaceEntity), "<br>") : '<br>';
}

var _ref$8 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.CaretUpMinor
});

var _ref2$1 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.CaretDownMinor
});

function Spinner$1({
  onChange,
  onClick,
  onMouseDown,
  onMouseUp
}) {
  function handleStep(step) {
    return () => onChange(step);
  }

  function handleMouseDown(onChange) {
    return event => {
      if (event.button !== 0) return;
      onMouseDown(onChange);
    };
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$v.Spinner,
    onClick: onClick,
    "aria-hidden": true
  }, /*#__PURE__*/React__default.createElement("div", {
    role: "button",
    className: styles$v.Segment,
    tabIndex: -1,
    onClick: handleStep(1),
    onMouseDown: handleMouseDown(handleStep(1)),
    onMouseUp: onMouseUp
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$v.SpinnerIcon
  }, _ref$8)), /*#__PURE__*/React__default.createElement("div", {
    role: "button",
    className: styles$v.Segment,
    tabIndex: -1,
    onClick: handleStep(-1),
    onMouseDown: handleMouseDown(handleStep(-1)),
    onMouseUp: onMouseUp
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$v.SpinnerIcon
  }, _ref2$1)));
}

var _ref$9 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.CircleCancelMinor,
  color: "inkLightest"
});

function TextField({
  prefix,
  suffix,
  placeholder,
  value,
  helpText,
  label,
  labelAction,
  labelHidden,
  disabled,
  clearButton,
  readOnly,
  autoFocus,
  focused,
  multiline,
  error,
  connectedRight,
  connectedLeft,
  type,
  name,
  id: idProp,
  role,
  step,
  autoComplete,
  max,
  maxLength,
  min,
  minLength,
  pattern,
  inputMode,
  spellCheck,
  ariaOwns,
  ariaControls,
  ariaActiveDescendant,
  ariaAutocomplete,
  showCharacterCount,
  align,
  onClearButtonClick,
  onChange,
  onFocus,
  onBlur
}) {
  var i18n = useI18n();
  var [height, setHeight] = React.useState(null);
  var [focus, setFocus] = React.useState(Boolean(focused));
  var isAfterInitial = useIsAfterInitialMount();
  var id = useUniqueId('TextField', idProp);
  var inputRef = React.useRef(null);
  var prefixRef = React.useRef(null);
  var suffixRef = React.useRef(null);
  var buttonPressTimer = React.useRef();
  React.useEffect(() => {
    var input = inputRef.current;
    if (!input || focused === undefined) return;
    focused ? input.focus() : input.blur();
  }, [focused]);
  var {
    newDesignLanguage
  } = useFeatures(); // Use a typeof check here as Typescript mostly protects us from non-stringy
  // values but overzealous usage of `any` in consuming apps means people have
  // been known to pass a number in, so make it clear that doesn't work.

  var normalizedValue = typeof value === 'string' ? value : '';
  var normalizedStep = step != null ? step : 1;
  var normalizedMax = max != null ? max : Infinity;
  var normalizedMin = min != null ? min : -Infinity;
  var className = classNames(styles$v.TextField, Boolean(normalizedValue) && styles$v.hasValue, disabled && styles$v.disabled, readOnly && styles$v.readOnly, error && styles$v.error, multiline && styles$v.multiline, focus && styles$v.focus, newDesignLanguage && styles$v.newDesignLanguage);
  var inputType = type === 'currency' ? 'text' : type;
  var prefixMarkup = prefix ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$v.Prefix,
    id: "".concat(id, "Prefix"),
    ref: prefixRef
  }, prefix) : null;
  var suffixMarkup = suffix ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$v.Suffix,
    id: "".concat(id, "Suffix"),
    ref: suffixRef
  }, suffix) : null;
  var characterCountMarkup = null;

  if (showCharacterCount) {
    var characterCount = normalizedValue.length;
    var characterCountLabel = maxLength ? i18n.translate('Polaris.TextField.characterCountWithMaxLength', {
      count: characterCount,
      limit: maxLength
    }) : i18n.translate('Polaris.TextField.characterCount', {
      count: characterCount
    });
    var characterCountClassName = classNames(styles$v.CharacterCount, multiline && styles$v.AlignFieldBottom);
    var characterCountText = !maxLength ? characterCount : "".concat(characterCount, "/").concat(maxLength);
    characterCountMarkup = /*#__PURE__*/React__default.createElement("div", {
      id: "".concat(id, "CharacterCounter"),
      className: characterCountClassName,
      "aria-label": characterCountLabel,
      "aria-live": focus ? 'polite' : 'off',
      "aria-atomic": "true"
    }, characterCountText);
  }

  var clearButtonMarkup = clearButton && normalizedValue !== '' ? /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: styles$v.ClearButton,
    onClick: handleClearButtonPress,
    disabled: disabled
  }, /*#__PURE__*/React__default.createElement(VisuallyHidden, null, i18n.translate('Polaris.Common.clear')), _ref$9) : null;
  var handleNumberChange = React.useCallback(steps => {
    if (onChange == null) {
      return;
    } // Returns the length of decimal places in a number


    var dpl = num => (num.toString().split('.')[1] || []).length;

    var numericValue = value ? parseFloat(value) : 0;

    if (isNaN(numericValue)) {
      return;
    } // Making sure the new value has the same length of decimal places as the
    // step / value has.


    var decimalPlaces = Math.max(dpl(numericValue), dpl(normalizedStep));
    var newValue = Math.min(Number(normalizedMax), Math.max(numericValue + steps * normalizedStep, Number(normalizedMin)));
    onChange(String(newValue.toFixed(decimalPlaces)), id);
  }, [id, normalizedMax, normalizedMin, onChange, normalizedStep, value]);
  var handleButtonRelease = React.useCallback(() => {
    clearTimeout(buttonPressTimer.current);
  }, []);
  var handleButtonPress = React.useCallback(onChange => {
    var minInterval = 50;
    var decrementBy = 10;
    var interval = 200;

    var onChangeInterval = () => {
      if (interval > minInterval) interval -= decrementBy;
      onChange();
      buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
    };

    buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
    document.addEventListener('mouseup', handleButtonRelease, {
      once: true
    });
  }, [handleButtonRelease]);
  var spinnerMarkup = type === 'number' && !disabled && !readOnly ? /*#__PURE__*/React__default.createElement(Spinner$1, {
    onChange: handleNumberChange,
    onMouseDown: handleButtonPress,
    onMouseUp: handleButtonRelease
  }) : null;
  var style = multiline && height ? {
    height
  } : null;
  var handleExpandingResize = React.useCallback(height => {
    setHeight(height);
  }, []);
  var resizer = multiline && isAfterInitial ? /*#__PURE__*/React__default.createElement(Resizer, {
    contents: normalizedValue || placeholder,
    currentHeight: height,
    minimumLines: typeof multiline === 'number' ? multiline : 1,
    onHeightChange: handleExpandingResize
  }) : null;
  var describedBy = [];

  if (error) {
    describedBy.push("".concat(id, "Error"));
  }

  if (helpText) {
    describedBy.push(helpTextID(id));
  }

  if (showCharacterCount) {
    describedBy.push("".concat(id, "CharacterCounter"));
  }

  var labelledBy = [];

  if (prefix) {
    labelledBy.push("".concat(id, "Prefix"));
  }

  if (suffix) {
    labelledBy.push("".concat(id, "Suffix"));
  }

  labelledBy.unshift(labelID(id));
  var inputClassName = classNames(styles$v.Input, align && styles$v[variationName('Input-align', align)], suffix && styles$v['Input-suffixed'], clearButton && styles$v['Input-hasClearButton']);
  var input = /*#__PURE__*/React.createElement(multiline ? 'textarea' : 'input', {
    name,
    id,
    disabled,
    readOnly,
    role,
    autoFocus,
    value: normalizedValue,
    placeholder,
    onFocus,
    onBlur,
    onKeyPress: handleKeyPress,
    style,
    autoComplete: normalizeAutoComplete(autoComplete),
    className: inputClassName,
    onChange: handleChange,
    ref: inputRef,
    min,
    max,
    step,
    minLength,
    maxLength,
    spellCheck,
    pattern,
    inputMode,
    type: inputType,
    'aria-describedby': describedBy.length ? describedBy.join(' ') : undefined,
    'aria-labelledby': labelledBy.join(' '),
    'aria-invalid': Boolean(error),
    'aria-owns': ariaOwns,
    'aria-activedescendant': ariaActiveDescendant,
    'aria-autocomplete': ariaAutocomplete,
    'aria-controls': ariaControls,
    'aria-multiline': normalizeAriaMultiline(multiline)
  });
  var backdropClassName = classNames(styles$v.Backdrop, newDesignLanguage && connectedLeft && styles$v['Backdrop-connectedLeft'], newDesignLanguage && connectedRight && styles$v['Backdrop-connectedRight']);
  return /*#__PURE__*/React__default.createElement(Labelled, {
    label: label,
    id: id,
    error: error,
    action: labelAction,
    labelHidden: labelHidden,
    helpText: helpText
  }, /*#__PURE__*/React__default.createElement(Connected, {
    left: connectedLeft,
    right: connectedRight
  }, /*#__PURE__*/React__default.createElement("div", {
    className: className,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onClick: handleClick
  }, prefixMarkup, input, suffixMarkup, characterCountMarkup, clearButtonMarkup, spinnerMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: backdropClassName
  }), resizer)));

  function handleClearButtonPress() {
    onClearButtonClick && onClearButtonClick(id);
  }

  function handleKeyPress(event) {
    var {
      key,
      which
    } = event;
    var numbersSpec = /[\d.eE+-]$/;

    if (type !== 'number' || which === exports.Key.Enter || numbersSpec.test(key)) {
      return;
    }

    event.preventDefault();
  }

  function containsAffix(target) {
    return target instanceof HTMLElement && (prefixRef.current && prefixRef.current.contains(target) || suffixRef.current && suffixRef.current.contains(target));
  }

  function handleChange(event) {
    onChange && onChange(event.currentTarget.value, id);
  }

  function handleFocus({
    target
  }) {
    if (containsAffix(target)) {
      return;
    }

    setFocus(true);
  }

  function handleBlur() {
    setFocus(false);
  }

  function handleClick({
    target
  }) {
    if (containsAffix(target)) {
      return;
    }

    inputRef.current && inputRef.current.focus();
  }
}

function normalizeAutoComplete(autoComplete) {
  if (autoComplete === true) {
    return 'on';
  } else if (autoComplete === false) {
    return 'off';
  } else {
    return autoComplete;
  }
}

function normalizeAriaMultiline(multiline) {
  switch (typeof multiline) {
    case 'undefined':
      return false;

    case 'boolean':
      return multiline;

    case 'number':
      return Boolean(multiline > 0);
  }
}

function TextField$1(props) {
  return /*#__PURE__*/React__default.createElement(ComboBoxContext.Consumer, null, ({
    selectedOptionId,
    comboBoxId
  }) => /*#__PURE__*/React__default.createElement(TextField, Object.assign({}, props, {
    autoComplete: false,
    ariaAutocomplete: "list",
    ariaActiveDescendant: selectedOptionId,
    ariaControls: comboBoxId
  })));
}

var styles$w = {
  "Loading": "Polaris-Autocomplete__Loading"
};

// TypeScript can't generate types that correctly infer the typing of
// subcomponents so explicitly state the subcomponents in the type definition.
// Letting this be implicit works in this project but fails in projects that use
// generated *.d.ts files.
var Autocomplete = function Autocomplete({
  id,
  options,
  selected,
  textField,
  preferredPosition,
  listTitle,
  allowMultiple,
  loading,
  actionBefore,
  willLoadMoreResults,
  emptyState,
  onSelect,
  onLoadMoreResults
}) {
  var i18n = useI18n();
  var spinnerMarkup = loading ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$w.Loading
  }, /*#__PURE__*/React__default.createElement(Spinner, {
    size: "small",
    accessibilityLabel: i18n.translate('Polaris.Autocomplete.spinnerAccessibilityLabel')
  })) : null;
  var conditionalOptions = loading && !willLoadMoreResults ? [] : options;
  var conditionalAction = actionBefore && actionBefore !== [] ? [actionBefore] : undefined;
  return /*#__PURE__*/React__default.createElement(ComboBox, {
    id: id,
    options: conditionalOptions,
    selected: selected,
    textField: textField,
    preferredPosition: preferredPosition,
    listTitle: listTitle,
    allowMultiple: allowMultiple,
    contentAfter: spinnerMarkup,
    actionsBefore: conditionalAction,
    onSelect: onSelect,
    onEndReached: onLoadMoreResults,
    emptyState: emptyState
  });
};
Autocomplete.ComboBox = ComboBox;
Autocomplete.TextField = TextField$1;

var ScrollLock = {};

// Even though this has no args, reference ScrollLockProps so the prop explorer
// in the styleguide works without warnings about unfound props
function ScrollLock$1(_) {
  var scrollLockManager = useScrollLockManager();
  React.useEffect(() => {
    scrollLockManager.registerScrollLock();
    return () => {
      scrollLockManager.unregisterScrollLock();
    };
  }, [scrollLockManager]);
  return null;
}

var styles$x = {
  "Backdrop": "Polaris-Backdrop",
  "fade-in": "Polaris-Backdrop__fade--in",
  "transparent": "Polaris-Backdrop--transparent",
  "belowNavigation": "Polaris-Backdrop--belowNavigation"
};

var _ref$a = /*#__PURE__*/React__default.createElement(ScrollLock$1, null);

function Backdrop(props) {
  var {
    onClick,
    onTouchStart,
    belowNavigation,
    transparent
  } = props;
  var className = classNames(styles$x.Backdrop, belowNavigation && styles$x.belowNavigation, transparent && styles$x.transparent);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, _ref$a, /*#__PURE__*/React__default.createElement("div", {
    className: className,
    onClick: onClick,
    onTouchStart: onTouchStart
  }));
}

var BannerContext = /*#__PURE__*/React.createContext(false);

var styles$y = {
  "Banner": "Polaris-Banner",
  "ContentWrapper": "Polaris-Banner__ContentWrapper",
  "withinContentContainer": "Polaris-Banner--withinContentContainer",
  "newDesignLanguage": "Polaris-Banner--newDesignLanguage",
  "keyFocused": "Polaris-Banner--keyFocused",
  "statusSuccess": "Polaris-Banner--statusSuccess",
  "statusInfo": "Polaris-Banner--statusInfo",
  "statusWarning": "Polaris-Banner--statusWarning",
  "statusCritical": "Polaris-Banner--statusCritical",
  "Ribbon": "Polaris-Banner__Ribbon",
  "Actions": "Polaris-Banner__Actions",
  "Dismiss": "Polaris-Banner__Dismiss",
  "withinPage": "Polaris-Banner--withinPage",
  "hasDismiss": "Polaris-Banner--hasDismiss",
  "Heading": "Polaris-Banner__Heading",
  "Content": "Polaris-Banner__Content",
  "PrimaryAction": "Polaris-Banner__PrimaryAction",
  "SecondaryAction": "Polaris-Banner__SecondaryAction",
  "Text": "Polaris-Banner__Text"
};

var Banner = /*#__PURE__*/React.forwardRef(function Banner({
  icon,
  action,
  secondaryAction,
  title,
  children,
  status,
  onDismiss,
  stopAnnouncements
}, bannerRef) {
  var {
    newDesignLanguage
  } = useFeatures();
  var withinContentContainer = React.useContext(WithinContentContext);
  var buttonSizeValue = withinContentContainer ? 'slim' : undefined;
  var id = useUniqueId('Banner');
  var {
    wrapperRef,
    handleKeyUp,
    handleBlur,
    handleMouseUp,
    shouldShowFocus
  } = useBannerFocus(bannerRef);
  var {
    defaultIcon,
    iconColor,
    ariaRoleType
  } = useBannerAttributes(status, newDesignLanguage);
  var iconName = icon || defaultIcon;
  var className = classNames(styles$y.Banner, status && styles$y[variationName('status', status)], onDismiss && styles$y.hasDismiss, shouldShowFocus && styles$y.keyFocused, withinContentContainer ? styles$y.withinContentContainer : styles$y.withinPage, newDesignLanguage && styles$y.newDesignLanguage);
  var headingMarkup = null;
  var headingID;

  if (title) {
    headingID = "".concat(id, "Heading");
    headingMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: styles$y.Heading,
      id: headingID
    }, /*#__PURE__*/React__default.createElement(Heading, {
      element: "p"
    }, title));
  }

  var actionMarkup = action && /*#__PURE__*/React__default.createElement("div", {
    className: styles$y.Actions
  }, /*#__PURE__*/React__default.createElement(ButtonGroup, null, /*#__PURE__*/React__default.createElement("div", {
    className: styles$y.PrimaryAction
  }, buttonFrom(action, {
    outline: true,
    size: buttonSizeValue
  })), secondaryAction && /*#__PURE__*/React__default.createElement(SecondaryActionFrom, {
    action: secondaryAction
  })));
  var contentMarkup = null;
  var contentID;

  if (children || actionMarkup) {
    contentID = "".concat(id, "Content");
    contentMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: styles$y.Content,
      id: contentID
    }, children, actionMarkup);
  }

  var dismissButton = onDismiss && /*#__PURE__*/React__default.createElement("div", {
    className: styles$y.Dismiss
  }, /*#__PURE__*/React__default.createElement(Button, {
    plain: true,
    icon: polarisIcons.CancelSmallMinor,
    onClick: onDismiss,
    accessibilityLabel: "Dismiss notification"
  }));
  return /*#__PURE__*/React__default.createElement(BannerContext.Provider, {
    value: true
  }, /*#__PURE__*/React__default.createElement("div", {
    className: className // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
    ,
    tabIndex: 0,
    ref: wrapperRef,
    role: ariaRoleType,
    "aria-live": stopAnnouncements ? 'off' : 'polite',
    onMouseUp: handleMouseUp,
    onKeyUp: handleKeyUp,
    onBlur: handleBlur,
    "aria-labelledby": headingID,
    "aria-describedby": contentID
  }, dismissButton, /*#__PURE__*/React__default.createElement("div", {
    className: styles$y.Ribbon
  }, /*#__PURE__*/React__default.createElement(Icon, {
    source: iconName,
    color: iconColor,
    backdrop: !newDesignLanguage
  })), /*#__PURE__*/React__default.createElement("div", {
    className: styles$y.ContentWrapper
  }, headingMarkup, contentMarkup)));
});

function SecondaryActionFrom({
  action
}) {
  if (action.url) {
    return /*#__PURE__*/React__default.createElement(UnstyledLink, {
      className: styles$y.SecondaryAction,
      url: action.url,
      external: action.external
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$y.Text
    }, action.content));
  }

  return /*#__PURE__*/React__default.createElement("button", {
    className: styles$y.SecondaryAction,
    onClick: action.onAction
  }, /*#__PURE__*/React__default.createElement("span", {
    className: styles$y.Text
  }, action.content));
}

function useBannerAttributes(status, newDesignLanguage) {
  switch (status) {
    case 'success':
      return {
        defaultIcon: newDesignLanguage ? polarisIcons.CircleTickMajorFilled : polarisIcons.CircleTickMajorTwotone,
        iconColor: newDesignLanguage ? 'success' : 'greenDark',
        ariaRoleType: 'status'
      };

    case 'info':
      return {
        defaultIcon: newDesignLanguage ? polarisIcons.CircleInformationMajorFilled : polarisIcons.CircleInformationMajorTwotone,
        iconColor: newDesignLanguage ? 'highlight' : 'tealDark',
        ariaRoleType: 'status'
      };

    case 'warning':
      return {
        defaultIcon: newDesignLanguage ? polarisIcons.CircleAlertMajorFilled : polarisIcons.CircleAlertMajorTwotone,
        iconColor: newDesignLanguage ? 'warning' : 'yellowDark',
        ariaRoleType: 'alert'
      };

    case 'critical':
      return {
        defaultIcon: newDesignLanguage ? polarisIcons.CircleDisabledMajorFilled : polarisIcons.CircleDisabledMajorTwotone,
        iconColor: newDesignLanguage ? 'critical' : 'redDark',
        ariaRoleType: 'alert'
      };

    default:
      return {
        defaultIcon: newDesignLanguage ? polarisIcons.CircleInformationMajorFilled : polarisIcons.FlagMajorTwotone,
        iconColor: newDesignLanguage ? 'base' : 'inkLighter',
        ariaRoleType: 'status'
      };
  }
}

function useBannerFocus(bannerRef) {
  var wrapperRef = React.useRef(null);
  var [shouldShowFocus, setShouldShowFocus] = React.useState(false);
  React.useImperativeHandle(bannerRef, () => ({
    focus: () => {
      var _wrapperRef$current;

      (_wrapperRef$current = wrapperRef.current) == null ? void 0 : _wrapperRef$current.focus();
      setShouldShowFocus(true);
    }
  }));

  var handleKeyUp = event => {
    if (event.target === wrapperRef.current) {
      setShouldShowFocus(true);
    }
  };

  var handleBlur = () => setShouldShowFocus(false);

  var handleMouseUp = event => {
    event.currentTarget.blur();
    setShouldShowFocus(false);
  };

  return {
    wrapperRef,
    handleKeyUp,
    handleBlur,
    handleMouseUp,
    shouldShowFocus
  };
}

var styles$z = {
  "Breadcrumb": "Polaris-Breadcrumbs__Breadcrumb",
  "newDesignLanguage": "Polaris-Breadcrumbs--newDesignLanguage",
  "Icon": "Polaris-Breadcrumbs__Icon",
  "ContentWrapper": "Polaris-Breadcrumbs__ContentWrapper",
  "Content": "Polaris-Breadcrumbs__Content"
};

class Breadcrumbs extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.context = void 0;
  }

  render() {
    var {
      newDesignLanguage
    } = this.context || {};
    var {
      breadcrumbs
    } = this.props;
    var breadcrumb = breadcrumbs[breadcrumbs.length - 1];

    if (breadcrumb == null) {
      return null;
    }

    var {
      content
    } = breadcrumb;
    var contentMarkup = /*#__PURE__*/React__default.createElement("span", {
      className: styles$z.ContentWrapper
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$z.Icon
    }, /*#__PURE__*/React__default.createElement(Icon, {
      source: newDesignLanguage ? polarisIcons.ArrowLeftMinor : polarisIcons.ChevronLeftMinor
    })), newDesignLanguage ? null : /*#__PURE__*/React__default.createElement("span", {
      className: styles$z.Content
    }, content));
    var breadcrumbClassNames = classNames(styles$z.Breadcrumb, newDesignLanguage && styles$z.newDesignLanguage);
    var breadcrumbMarkup = 'url' in breadcrumb ? /*#__PURE__*/React__default.createElement(UnstyledLink, {
      key: content,
      url: breadcrumb.url,
      className: breadcrumbClassNames,
      onMouseUp: handleMouseUpByBlurring,
      "aria-label": breadcrumb.accessibilityLabel
    }, contentMarkup) : /*#__PURE__*/React__default.createElement("button", {
      key: content,
      className: breadcrumbClassNames,
      onClick: breadcrumb.onAction,
      onMouseUp: handleMouseUpByBlurring,
      type: "button",
      "aria-label": breadcrumb.accessibilityLabel
    }, contentMarkup);
    return /*#__PURE__*/React__default.createElement("nav", {
      role: "navigation"
    }, breadcrumbMarkup);
  }

}
Breadcrumbs.contextType = FeaturesContext;

var styles$A = {
  "TextContainer": "Polaris-TextContainer",
  "spacingTight": "Polaris-TextContainer--spacingTight",
  "spacingLoose": "Polaris-TextContainer--spacingLoose"
};

function TextContainer({
  spacing,
  children
}) {
  var className = classNames(styles$A.TextContainer, spacing && styles$A[variationName('spacing', spacing)]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, children);
}

var styles$B = {
  "CalloutCard": "Polaris-CalloutCard",
  "Image": "Polaris-CalloutCard__Image",
  "DismissImage": "Polaris-CalloutCard__DismissImage",
  "Content": "Polaris-CalloutCard__Content",
  "Title": "Polaris-CalloutCard__Title",
  "Buttons": "Polaris-CalloutCard__Buttons",
  "Container": "Polaris-CalloutCard__Container",
  "Dismiss": "Polaris-CalloutCard__Dismiss"
};

function CalloutCard({
  title,
  children,
  illustration,
  primaryAction,
  secondaryAction,
  onDismiss
}) {
  var primaryActionMarkup = buttonFrom(primaryAction);
  var secondaryActionMarkup = secondaryAction ? buttonFrom(secondaryAction, {
    plain: true
  }) : null;
  var buttonMarkup = secondaryActionMarkup ? /*#__PURE__*/React__default.createElement(ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup) : primaryActionMarkup;
  var dismissButton = onDismiss ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$B.Dismiss
  }, /*#__PURE__*/React__default.createElement(Button, {
    plain: true,
    icon: polarisIcons.CancelSmallMinor,
    onClick: onDismiss,
    accessibilityLabel: "Dismiss card"
  })) : null;
  var imageClassName = classNames(styles$B.Image, onDismiss && styles$B.DismissImage);
  return /*#__PURE__*/React__default.createElement(Card, null, /*#__PURE__*/React__default.createElement("div", {
    className: styles$B.Container
  }, dismissButton, /*#__PURE__*/React__default.createElement(Card.Section, null, /*#__PURE__*/React__default.createElement("div", {
    className: styles$B.CalloutCard
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$B.Content
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$B.Title
  }, /*#__PURE__*/React__default.createElement(Heading, null, title)), /*#__PURE__*/React__default.createElement(TextContainer, null, children), /*#__PURE__*/React__default.createElement("div", {
    className: styles$B.Buttons
  }, buttonMarkup)), /*#__PURE__*/React__default.createElement(Image, {
    alt: "",
    className: imageClassName,
    source: illustration
  })))));
}

var styles$C = {
  "Caption": "Polaris-Caption"
};

function Caption({
  children
}) {
  return /*#__PURE__*/React__default.createElement("p", {
    className: styles$C.Caption
  }, children);
}

var styles$D = {
  "Choice": "Polaris-Choice",
  "labelHidden": "Polaris-Choice--labelHidden",
  "Label": "Polaris-Choice__Label",
  "Control": "Polaris-Choice__Control",
  "disabled": "Polaris-Choice--disabled",
  "Descriptions": "Polaris-Choice__Descriptions",
  "HelpText": "Polaris-Choice__HelpText"
};

function Choice({
  id,
  label,
  disabled,
  error,
  children,
  labelHidden,
  helpText,
  onClick,
  onMouseOut,
  onMouseOver
}) {
  var className = classNames(styles$D.Choice, labelHidden && styles$D.labelHidden, disabled && styles$D.disabled);
  var labelMarkup = /*#__PURE__*/React__default.createElement("label", {
    className: className,
    htmlFor: id,
    onClick: onClick,
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut
  }, /*#__PURE__*/React__default.createElement("span", {
    className: styles$D.Control
  }, children), /*#__PURE__*/React__default.createElement("span", {
    className: styles$D.Label
  }, label));
  var helpTextMarkup = helpText ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$D.HelpText,
    id: helpTextID$1(id)
  }, helpText) : null;
  var errorMarkup = error && typeof error !== 'boolean' && /*#__PURE__*/React__default.createElement("div", {
    className: styles$D.Error
  }, /*#__PURE__*/React__default.createElement(InlineError, {
    message: error,
    fieldID: id
  }));
  var descriptionMarkup = helpTextMarkup || errorMarkup ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$D.Descriptions
  }, errorMarkup, helpTextMarkup) : null;
  return descriptionMarkup ? /*#__PURE__*/React__default.createElement("div", null, labelMarkup, descriptionMarkup) : labelMarkup;
}
function helpTextID$1(id) {
  return "".concat(id, "HelpText");
}

var styles$E = {
  "Checkbox": "Polaris-Checkbox",
  "Input": "Polaris-Checkbox__Input",
  "newDesignLanguage": "Polaris-Checkbox--newDesignLanguage",
  "Backdrop": "Polaris-Checkbox__Backdrop",
  "Input-indeterminate": "Polaris-Checkbox__Input--indeterminate",
  "Icon": "Polaris-Checkbox__Icon",
  "keyFocused": "Polaris-Checkbox--keyFocused",
  "hover": "Polaris-Checkbox--hover",
  "error": "Polaris-Checkbox--error"
};

var Checkbox$1 = /*#__PURE__*/React.forwardRef(function Checkbox({
  ariaDescribedBy: ariaDescribedByProp,
  label,
  labelHidden,
  checked = false,
  helpText,
  disabled,
  id: idProp,
  name,
  value,
  error,
  onChange,
  onFocus,
  onBlur
}, ref) {
  var inputNode = React.useRef(null);
  var {
    newDesignLanguage
  } = useFeatures();
  var id = useUniqueId('Checkbox', idProp);
  var {
    value: mouseOver,
    setTrue: handleMouseOver,
    setFalse: handleMouseOut
  } = useToggle(false);
  var [keyFocused, setKeyFocused] = React.useState(false);
  React.useImperativeHandle(ref, () => ({
    focus: () => {
      if (inputNode.current) {
        inputNode.current.focus();
      }
    }
  }));

  var handleBlur = () => {
    onBlur && onBlur();
    setKeyFocused(false);
  };

  var handleInput = () => {
    if (onChange == null || inputNode.current == null || disabled) {
      return;
    }

    onChange(!inputNode.current.checked, id);
    inputNode.current.focus();
  };

  var handleKeyUp = event => {
    var {
      keyCode
    } = event;
    !keyFocused && setKeyFocused(true);

    if (keyCode === exports.Key.Space) {
      handleInput();
    }
  };

  var describedBy = [];

  if (error && typeof error !== 'boolean') {
    describedBy.push(errorTextID(id));
  }

  if (helpText) {
    describedBy.push(helpTextID$1(id));
  }

  if (ariaDescribedByProp) {
    describedBy.push(ariaDescribedByProp);
  }

  var ariaDescribedBy = describedBy.length ? describedBy.join(' ') : undefined;
  var wrapperClassName = classNames(styles$E.Checkbox, error && styles$E.error, newDesignLanguage && styles$E.newDesignLanguage);
  var backdropClassName = classNames(styles$E.Backdrop, mouseOver && styles$E.hover);
  var isIndeterminate = checked === 'indeterminate';
  var isChecked = !isIndeterminate && Boolean(checked);
  var indeterminateAttributes = isIndeterminate ? {
    indeterminate: 'true',
    'aria-checked': 'mixed'
  } : {
    'aria-checked': isChecked
  };
  var iconSource = isIndeterminate ? polarisIcons.MinusMinor : polarisIcons.TickSmallMinor;
  var inputClassName = classNames(styles$E.Input, isIndeterminate && styles$E['Input-indeterminate'], newDesignLanguage && keyFocused && styles$E.keyFocused);
  return (
    /*#__PURE__*/

    /* eslint-disable jsx-a11y/no-redundant-roles */
    React__default.createElement(Choice, {
      id: id,
      label: label,
      labelHidden: labelHidden,
      helpText: helpText,
      error: error,
      disabled: disabled,
      onClick: handleInput,
      onMouseOver: handleMouseOver,
      onMouseOut: handleMouseOut
    }, /*#__PURE__*/React__default.createElement("span", {
      className: wrapperClassName
    }, /*#__PURE__*/React__default.createElement("input", Object.assign({
      onKeyUp: handleKeyUp,
      ref: inputNode,
      id: id,
      name: name,
      value: value,
      type: "checkbox",
      checked: isChecked,
      disabled: disabled,
      className: inputClassName,
      onFocus: onFocus,
      onBlur: handleBlur,
      onClick: stopPropagation,
      onChange: noop$2,
      "aria-invalid": error != null,
      "aria-describedby": ariaDescribedBy,
      role: "checkbox"
    }, indeterminateAttributes)), /*#__PURE__*/React__default.createElement("span", {
      className: backdropClassName
    }), /*#__PURE__*/React__default.createElement("span", {
      className: styles$E.Icon
    }, /*#__PURE__*/React__default.createElement(Icon, {
      source: iconSource
    }))))
    /* eslint-enable jsx-a11y/no-redundant-roles */

  );
});

function noop$2() {}

function stopPropagation(event) {
  event.stopPropagation();
}

var styles$F = {
  "RadioButton": "Polaris-RadioButton",
  "Input": "Polaris-RadioButton__Input",
  "newDesignLanguage": "Polaris-RadioButton--newDesignLanguage",
  "Backdrop": "Polaris-RadioButton__Backdrop",
  "Icon": "Polaris-RadioButton__Icon",
  "hover": "Polaris-RadioButton--hover",
  "keyFocused": "Polaris-RadioButton--keyFocused"
};

function RadioButton({
  ariaDescribedBy: ariaDescribedByProp,
  label,
  labelHidden,
  helpText,
  checked,
  disabled,
  onChange,
  onFocus,
  onBlur,
  id: idProp,
  name: nameProp,
  value
}) {
  var id = useUniqueId('RadioButton', idProp);
  var name = nameProp || id;
  var inputNode = React.useRef(null);
  var [keyFocused, setKeyFocused] = React.useState(false);
  var {
    newDesignLanguage
  } = useFeatures();
  var {
    value: mouseOver,
    setTrue: handleMouseOver,
    setFalse: handleMouseOut
  } = useToggle(false);

  var handleKeyUp = () => {
    !keyFocused && setKeyFocused(true);
  };

  var handleBlur = () => {
    onBlur && onBlur();
    setKeyFocused(false);
  };

  function handleChange({
    currentTarget
  }) {
    onChange && onChange(currentTarget.checked, id);
  }

  var describedBy = [];

  if (helpText) {
    describedBy.push(helpTextID$1(id));
  }

  if (ariaDescribedByProp) {
    describedBy.push(ariaDescribedByProp);
  }

  var ariaDescribedBy = describedBy.length ? describedBy.join(' ') : undefined;
  var inputClassName = classNames(styles$F.Input, newDesignLanguage && keyFocused && styles$F.keyFocused);
  var wrapperClassName = classNames(styles$F.RadioButton, newDesignLanguage && styles$F.newDesignLanguage);
  var iconMarkup = !newDesignLanguage && /*#__PURE__*/React__default.createElement("span", {
    className: styles$F.Icon
  });
  var backdropClassName = classNames(styles$F.Backdrop, mouseOver && styles$F.hover);
  return /*#__PURE__*/React__default.createElement(Choice, {
    label: label,
    labelHidden: labelHidden,
    disabled: disabled,
    id: id,
    helpText: helpText,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut
  }, /*#__PURE__*/React__default.createElement("span", {
    className: wrapperClassName
  }, /*#__PURE__*/React__default.createElement("input", {
    id: id,
    name: name,
    value: value,
    type: "radio",
    checked: checked,
    disabled: disabled,
    className: inputClassName,
    onChange: handleChange,
    onFocus: onFocus,
    onKeyUp: handleKeyUp,
    onBlur: handleBlur,
    "aria-describedby": ariaDescribedBy,
    ref: inputNode
  }), /*#__PURE__*/React__default.createElement("span", {
    className: backdropClassName
  }), iconMarkup));
}

var styles$G = {
  "ChoiceList": "Polaris-ChoiceList",
  "titleHidden": "Polaris-ChoiceList--titleHidden",
  "Title": "Polaris-ChoiceList__Title",
  "Choices": "Polaris-ChoiceList__Choices",
  "ChoiceChildren": "Polaris-ChoiceList__ChoiceChildren",
  "ChoiceError": "Polaris-ChoiceList__ChoiceError"
};

function ChoiceList({
  title,
  titleHidden,
  allowMultiple,
  choices,
  selected,
  onChange = noop$3,
  error,
  disabled = false,
  name: nameProp
}) {
  // Type asserting to any is required for TS3.2 but can be removed when we update to 3.3
  // see https://github.com/Microsoft/TypeScript/issues/28768
  var ControlComponent = allowMultiple ? Checkbox$1 : RadioButton;
  var name = useUniqueId('ChoiceList', nameProp);
  var finalName = allowMultiple ? "".concat(name, "[]") : name;
  var className = classNames(styles$G.ChoiceList, titleHidden && styles$G.titleHidden);
  var titleMarkup = title ? /*#__PURE__*/React__default.createElement("legend", {
    className: styles$G.Title
  }, title) : null;
  var choicesMarkup = choices.map(choice => {
    var {
      value,
      label,
      helpText,
      disabled: choiceDisabled,
      describedByError
    } = choice;

    function handleChange(checked) {
      onChange(updateSelectedChoices(choice, checked, selected, allowMultiple), name);
    }

    var isSelected = choiceIsSelected(choice, selected);
    var renderedChildren = choice.renderChildren ? choice.renderChildren(isSelected) : null;
    var children = renderedChildren ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$G.ChoiceChildren
    }, renderedChildren) : null;
    return /*#__PURE__*/React__default.createElement("li", {
      key: value
    }, /*#__PURE__*/React__default.createElement(ControlComponent, {
      name: finalName,
      value: value,
      label: label,
      disabled: choiceDisabled || disabled,
      checked: choiceIsSelected(choice, selected),
      helpText: helpText,
      onChange: handleChange,
      ariaDescribedBy: error && describedByError ? errorTextID(finalName) : null
    }), children);
  });
  var errorMarkup = error && /*#__PURE__*/React__default.createElement("div", {
    className: styles$G.ChoiceError
  }, /*#__PURE__*/React__default.createElement(InlineError, {
    message: error,
    fieldID: finalName
  }));
  return /*#__PURE__*/React__default.createElement("fieldset", {
    className: className,
    id: finalName,
    "aria-invalid": error != null
  }, titleMarkup, /*#__PURE__*/React__default.createElement("ul", {
    className: styles$G.Choices
  }, choicesMarkup), errorMarkup);
}

function noop$3() {}

function choiceIsSelected({
  value
}, selected) {
  return selected.includes(value);
}

function updateSelectedChoices({
  value
}, checked, selected, allowMultiple = false) {
  if (checked) {
    return allowMultiple ? [...selected, value] : [value];
  }

  return selected.filter(selectedChoice => selectedChoice !== value);
}

var styles$H = {
  "Collapsible": "Polaris-Collapsible",
  "animating": "Polaris-Collapsible--animating",
  "open": "Polaris-Collapsible--open",
  "fullyOpen": "Polaris-Collapsible--fullyOpen",
  "expandOnPrint": "Polaris-Collapsible--expandOnPrint"
};

var ParentCollapsibleExpandingContext = /*#__PURE__*/React.createContext(false);

class CollapsibleInner extends React.Component {
  constructor(...args) {
    super(...args);
    this.context = void 0;
    this.state = {
      height: null,
      animationState: 'idle',
      // eslint-disable-next-line react/no-unused-state
      open: this.props.open
    };
    this.node = /*#__PURE__*/React.createRef();
    this.heightNode = /*#__PURE__*/React.createRef();

    this.handleTransitionEnd = event => {
      var {
        target
      } = event;

      if (target === this.node.current) {
        this.setState({
          animationState: 'idle',
          height: null
        });
      }
    };
  }

  static getDerivedStateFromProps({
    open: willOpen
  }, {
    open,
    animationState: prevAnimationState
  }) {
    var nextAnimationState = prevAnimationState;

    if (open !== willOpen) {
      nextAnimationState = 'measuring';
    }

    return {
      animationState: nextAnimationState,
      open: willOpen
    };
  }

  componentDidUpdate({
    open: wasOpen
  }) {
    var {
      animationState
    } = this.state;
    var parentCollapsibleExpanding = this.context;

    if (parentCollapsibleExpanding && animationState !== 'idle') {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        animationState: 'idle'
      });
      return;
    }

    requestAnimationFrame(() => {
      var heightNode = this.heightNode.current;

      switch (animationState) {
        case 'idle':
          break;

        case 'measuring':
          this.setState({
            animationState: wasOpen ? 'closingStart' : 'openingStart',
            height: wasOpen && heightNode ? heightNode.scrollHeight : 0
          });
          break;

        case 'closingStart':
          this.setState({
            animationState: 'closing',
            height: 0
          });
          break;

        case 'openingStart':
          this.setState({
            animationState: 'opening',
            height: heightNode ? heightNode.scrollHeight : 0
          });
      }
    });
  }

  render() {
    var {
      id,
      expandOnPrint,
      open,
      children,
      transition
    } = this.props;
    var {
      animationState,
      height
    } = this.state;
    var parentCollapsibleExpanding = this.context;
    var animating = animationState !== 'idle';
    var wrapperClassName = classNames(styles$H.Collapsible, open && styles$H.open, animating && styles$H.animating, !animating && open && styles$H.fullyOpen, expandOnPrint && styles$H.expandOnPrint);
    var displayHeight = collapsibleHeight(open, animationState, height);
    var content = animating || open || expandOnPrint ? children : null;
    var transitionProperties = transition ? {
      transitionDuration: "".concat(transition.duration),
      transitionTimingFunction: "".concat(transition.timingFunction)
    } : null;
    return /*#__PURE__*/React__default.createElement(ParentCollapsibleExpandingContext.Provider, {
      value: parentCollapsibleExpanding || open && animationState !== 'idle'
    }, /*#__PURE__*/React__default.createElement("div", {
      id: id,
      "aria-hidden": !open,
      style: _objectSpread2({
        maxHeight: "".concat(displayHeight)
      }, transitionProperties),
      className: wrapperClassName,
      ref: this.node,
      onTransitionEnd: this.handleTransitionEnd
    }, /*#__PURE__*/React__default.createElement("div", {
      ref: this.heightNode
    }, content)));
  }

}

CollapsibleInner.contextType = ParentCollapsibleExpandingContext;

function collapsibleHeight(open, animationState, height) {
  if (animationState === 'idle' && open) {
    return open ? 'none' : undefined;
  }

  if (animationState === 'measuring') {
    return open ? undefined : 'none';
  }

  return "".concat(height || 0, "px");
}

var Collapsible = CollapsibleInner;

var styles$I = {
  "ColorPicker": "Polaris-ColorPicker",
  "MainColor": "Polaris-ColorPicker__MainColor",
  "Dragger": "Polaris-ColorPicker__Dragger",
  "ColorLayer": "Polaris-ColorPicker__ColorLayer",
  "HuePicker": "Polaris-ColorPicker__HuePicker",
  "AlphaPicker": "Polaris-ColorPicker__AlphaPicker",
  "Slidable": "Polaris-ColorPicker__Slidable"
};

var isDragging = false; // Required to solve a bug causing the underlying page/container to scroll
// while trying to drag the ColorPicker controls.
// This must be called as soon as possible to properly prevent the event.
// `passive: false` must also be set, as it seems webkit has changed the "default" behaviour
// https://bugs.webkit.org/show_bug.cgi?id=182521

if (!isServer) {
  window.addEventListener('touchmove', event => {
    if (!isDragging) {
      return;
    }

    event.preventDefault();
  }, {
    passive: false
  });
}

class Slidable extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      dragging: false
    };
    this.node = null;
    this.draggerNode = null;

    this.setDraggerNode = node => {
      this.draggerNode = node;
    };

    this.setNode = node => {
      this.node = node;
    };

    this.startDrag = event => {
      if (isMouseDownEvent(event)) {
        this.handleDraggerMove(event.clientX, event.clientY);
      }

      isDragging = true;
      this.setState({
        dragging: true
      });
    };

    this.handleDragEnd = () => {
      isDragging = false;
      this.setState({
        dragging: false
      });
    };

    this.handleMove = event => {
      event.stopImmediatePropagation();
      event.stopPropagation();

      if (event.cancelable) {
        event.preventDefault();
      }

      if (isMouseMoveEvent(event)) {
        this.handleDraggerMove(event.clientX, event.clientY);
        return;
      }

      this.handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);
    };

    this.handleDraggerMove = (x, y) => {
      if (this.node == null) {
        return;
      }

      var {
        onChange
      } = this.props;
      var rect = this.node.getBoundingClientRect();
      var offsetX = x - rect.left;
      var offsetY = y - rect.top;
      onChange({
        x: offsetX,
        y: offsetY
      });
    };
  }

  componentDidMount() {
    var {
      onDraggerHeight
    } = this.props;

    if (onDraggerHeight == null) {
      return;
    }

    var {
      draggerNode
    } = this;

    if (draggerNode == null) {
      return;
    }

    onDraggerHeight(draggerNode.clientWidth);

    if (process.env.NODE_ENV === 'development') {
      setTimeout(() => {
        onDraggerHeight(draggerNode.clientWidth);
      }, 0);
    }
  }

  render() {
    var {
      dragging
    } = this.state;
    var {
      draggerX = 0,
      draggerY = 0
    } = this.props;
    var draggerPositioning = {
      transform: "translate3d(".concat(draggerX, "px, ").concat(draggerY, "px, 0)")
    };
    var moveListener = dragging ? /*#__PURE__*/React__default.createElement(EventListener, {
      event: "mousemove",
      handler: this.handleMove,
      passive: false
    }) : null;
    var touchMoveListener = dragging ? /*#__PURE__*/React__default.createElement(EventListener, {
      event: "touchmove",
      handler: this.handleMove,
      passive: false
    }) : null;
    var endDragListener = dragging ? /*#__PURE__*/React__default.createElement(EventListener, {
      event: "mouseup",
      handler: this.handleDragEnd
    }) : null;
    var touchEndListener = dragging ? /*#__PURE__*/React__default.createElement(EventListener, {
      event: "touchend",
      handler: this.handleDragEnd
    }) : null;
    var touchCancelListener = dragging ? /*#__PURE__*/React__default.createElement(EventListener, {
      event: "touchcancel",
      handler: this.handleDragEnd
    }) : null;
    return /*#__PURE__*/React__default.createElement("div", {
      ref: this.setNode,
      className: styles$I.Slidable,
      onMouseDown: this.startDrag,
      onTouchStart: this.startDrag
    }, endDragListener, moveListener, touchMoveListener, touchEndListener, touchCancelListener, /*#__PURE__*/React__default.createElement("div", {
      style: draggerPositioning,
      className: styles$I.Dragger,
      ref: this.setDraggerNode
    }));
  }

}

function isMouseMoveEvent(event) {
  return event.type === 'mousemove';
}

function isMouseDownEvent(event) {
  return event.type === 'mousedown';
}

var VERTICAL_PADDING = 13;
function calculateDraggerY(alpha, sliderHeight, draggerHeight) {
  var offset = offsetForAlpha(alpha, sliderHeight, draggerHeight);
  return clamp(offset, 0, sliderHeight);
}
function alphaForDraggerY(y, sliderHeight) {
  var offsetY = clamp(y, 0, sliderHeight);
  return alphaForOffset(offsetY, sliderHeight);
}
function alphaForOffset(offset, sliderHeight) {
  var selectionHeight = offset - VERTICAL_PADDING;
  var slidableArea = sliderHeight - VERTICAL_PADDING * 2;
  return clamp(1 - selectionHeight / slidableArea, 0, 1);
}

function offsetForAlpha(alpha, sliderHeight, draggerHeight) {
  var slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
  return clamp((1 - alpha) * slidableArea + VERTICAL_PADDING, 0, sliderHeight - draggerHeight);
}

class AlphaPicker extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      sliderHeight: 0,
      draggerHeight: 0
    };

    this.setSliderHeight = node => {
      if (node == null) {
        return;
      }

      this.setState({
        sliderHeight: node.clientHeight
      });

      if (process.env.NODE_ENV === 'development') {
        setTimeout(() => {
          this.setState({
            sliderHeight: node.clientHeight
          });
        }, 0);
      }
    };

    this.setDraggerHeight = height => {
      this.setState({
        draggerHeight: height
      });
    };

    this.handleChange = ({
      y
    }) => {
      var {
        onChange
      } = this.props;
      var {
        sliderHeight
      } = this.state;
      var alpha = alphaForDraggerY(y, sliderHeight);
      onChange(alpha);
    };
  }

  render() {
    var {
      color,
      alpha
    } = this.props;
    var {
      sliderHeight,
      draggerHeight
    } = this.state;
    var draggerY = calculateDraggerY(alpha, sliderHeight, draggerHeight);
    var background = alphaGradientForColor(color);
    return /*#__PURE__*/React__default.createElement("div", {
      className: styles$I.AlphaPicker,
      ref: this.setSliderHeight
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$I.ColorLayer,
      style: {
        background
      }
    }), /*#__PURE__*/React__default.createElement(Slidable, {
      draggerY: draggerY,
      draggerX: 0,
      onChange: this.handleChange,
      onDraggerHeight: this.setDraggerHeight
    }));
  }

}

function alphaGradientForColor(color) {
  var {
    red,
    green,
    blue
  } = hsbToRgb(color);
  var rgb = "".concat(red, ", ").concat(green, ", ").concat(blue);
  return "linear-gradient(to top, rgba(".concat(rgb, ", 0) 18px, rgba(").concat(rgb, ", 1) calc(100% - 18px))");
}

var VERTICAL_PADDING$1 = 13;
function calculateDraggerY$1(hue, sliderHeight, draggerHeight) {
  var offset = offsetForHue(hue, sliderHeight, draggerHeight);
  return clamp(offset, 0, sliderHeight);
}
function hueForDraggerY(y, sliderHeight) {
  var offsetY = clamp(y, 0, sliderHeight);
  return hueForOffset(offsetY, sliderHeight);
}

function hueForOffset(offset, sliderHeight) {
  var selectionHeight = offset - VERTICAL_PADDING$1;
  var slidableArea = sliderHeight - VERTICAL_PADDING$1 * 2;
  return clamp(selectionHeight / slidableArea * 360, 0, 360);
}

function offsetForHue(hue, sliderHeight, draggerHeight) {
  var slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING$1);
  return clamp(hue / 360 * slidableArea + VERTICAL_PADDING$1, 0, sliderHeight - draggerHeight);
}

class HuePicker extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      sliderHeight: 0,
      draggerHeight: 0
    };

    this.setSliderHeight = node => {
      if (node == null) {
        return;
      }

      this.setState({
        sliderHeight: node.clientHeight
      });

      if (process.env.NODE_ENV === 'development') {
        setTimeout(() => {
          this.setState({
            sliderHeight: node.clientHeight
          });
        }, 0);
      }
    };

    this.setDraggerHeight = height => {
      this.setState({
        draggerHeight: height
      });
    };

    this.handleChange = ({
      y
    }) => {
      var {
        onChange
      } = this.props;
      var {
        sliderHeight
      } = this.state;
      var hue = hueForDraggerY(y, sliderHeight);
      onChange(hue);
    };
  }

  render() {
    var {
      hue
    } = this.props;
    var {
      sliderHeight,
      draggerHeight
    } = this.state;
    var draggerY = calculateDraggerY$1(hue, sliderHeight, draggerHeight);
    return /*#__PURE__*/React__default.createElement("div", {
      className: styles$I.HuePicker,
      ref: this.setSliderHeight
    }, /*#__PURE__*/React__default.createElement(Slidable, {
      draggerY: draggerY,
      draggerX: 0,
      onChange: this.handleChange,
      onDraggerHeight: this.setDraggerHeight
    }));
  }

}

class ColorPicker extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      pickerSize: 0
    };
    this.colorNode = null;

    this.setColorNode = node => {
      this.colorNode = node;
    };

    this.handleHueChange = hue => {
      var {
        color: {
          brightness,
          saturation,
          alpha = 1
        },
        onChange
      } = this.props;
      onChange({
        hue,
        brightness,
        saturation,
        alpha
      });
    };

    this.handleAlphaChange = alpha => {
      var {
        color: {
          hue,
          brightness,
          saturation
        },
        onChange
      } = this.props;
      onChange({
        hue,
        brightness,
        saturation,
        alpha
      });
    };

    this.handleDraggerMove = ({
      x,
      y
    }) => {
      var {
        pickerSize
      } = this.state;
      var {
        color: {
          hue,
          alpha = 1
        },
        onChange
      } = this.props;
      var saturation = clamp(x / pickerSize, 0, 1);
      var brightness = clamp(1 - y / pickerSize, 0, 1);
      onChange({
        hue,
        saturation,
        brightness,
        alpha
      });
    };

    this.handlePickerDrag = event => {
      // prevents external elements from being selected
      event.preventDefault();
    };
  }

  componentDidMount() {
    var {
      colorNode
    } = this;

    if (colorNode == null) {
      return;
    }

    this.setState({
      pickerSize: colorNode.clientWidth
    });

    if (process.env.NODE_ENV === 'development') {
      setTimeout(() => {
        this.setState({
          pickerSize: colorNode.clientWidth
        });
      }, 0);
    }
  }

  render() {
    var {
      id,
      color,
      allowAlpha
    } = this.props;
    var {
      hue,
      saturation,
      brightness,
      alpha: providedAlpha
    } = color;
    var {
      pickerSize
    } = this.state;
    var alpha = providedAlpha != null && allowAlpha ? providedAlpha : 1;
    var {
      red,
      green,
      blue
    } = hsbToRgb({
      hue,
      saturation: 1,
      brightness: 1
    });
    var colorString = "rgba(".concat(red, ", ").concat(green, ", ").concat(blue, ", ").concat(alpha, ")");
    var draggerX = clamp(saturation * pickerSize, 0, pickerSize);
    var draggerY = clamp(pickerSize - brightness * pickerSize, 0, pickerSize);
    var alphaSliderMarkup = allowAlpha ? /*#__PURE__*/React__default.createElement(AlphaPicker, {
      alpha: alpha,
      color: color,
      onChange: this.handleAlphaChange
    }) : null;
    return /*#__PURE__*/React__default.createElement("div", {
      className: styles$I.ColorPicker,
      id: id,
      onMouseDown: this.handlePickerDrag
    }, /*#__PURE__*/React__default.createElement("div", {
      ref: this.setColorNode,
      className: styles$I.MainColor
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$I.ColorLayer,
      style: {
        backgroundColor: colorString
      }
    }), /*#__PURE__*/React__default.createElement(Slidable, {
      onChange: this.handleDraggerMove,
      draggerX: draggerX,
      draggerY: draggerY
    })), /*#__PURE__*/React__default.createElement(HuePicker, {
      hue: hue,
      onChange: this.handleHueChange
    }), alphaSliderMarkup);
  }

}

var FrameContext = /*#__PURE__*/React.createContext(undefined);

function useFrame() {
  var frame = React.useContext(FrameContext);

  if (!frame) {
    throw new Error('No Frame context was provided. Your component must be wrapped in a <Frame> component. See https://polaris.shopify.com/components/structure/frame for implementation instructions.');
  }

  return frame;
}

// that the interface defining the props is defined in this file, not imported
// from elsewhere. This silly workaround ensures that the Props Explorer table
// is generated correctly.

var ContextualSaveBar = /*#__PURE__*/React.memo(function ContextualSaveBar({
  message,
  saveAction,
  discardAction,
  alignContentFlush,
  fullWidth
}) {
  var {
    setContextualSaveBar,
    removeContextualSaveBar
  } = useFrame();
  React.useEffect(() => {
    setContextualSaveBar({
      message,
      saveAction,
      discardAction,
      alignContentFlush,
      fullWidth
    });
  }, [message, saveAction, discardAction, alignContentFlush, setContextualSaveBar, fullWidth]);
  React.useEffect(() => {
    return removeContextualSaveBar;
  }, [removeContextualSaveBar]);
  return null;
});

var styles$J = {
  "DataTable": "Polaris-DataTable",
  "condensed": "Polaris-DataTable--condensed",
  "Navigation": "Polaris-DataTable__Navigation",
  "Pip": "Polaris-DataTable__Pip",
  "Pip-visible": "Polaris-DataTable__Pip--visible",
  "ScrollContainer": "Polaris-DataTable__ScrollContainer",
  "Table": "Polaris-DataTable__Table",
  "TableRow": "Polaris-DataTable__TableRow",
  "Cell": "Polaris-DataTable__Cell",
  "Cell-firstColumn": "Polaris-DataTable__Cell--firstColumn",
  "Cell-numeric": "Polaris-DataTable__Cell--numeric",
  "Cell-truncated": "Polaris-DataTable__Cell--truncated",
  "Cell-header": "Polaris-DataTable__Cell--header",
  "Cell-sortable": "Polaris-DataTable__Cell--sortable",
  "Cell-verticalAlignTop": "Polaris-DataTable__Cell--verticalAlignTop",
  "Cell-verticalAlignBottom": "Polaris-DataTable__Cell--verticalAlignBottom",
  "Cell-verticalAlignMiddle": "Polaris-DataTable__Cell--verticalAlignMiddle",
  "Cell-verticalAlignBaseline": "Polaris-DataTable__Cell--verticalAlignBaseline",
  "Icon": "Polaris-DataTable__Icon",
  "Heading": "Polaris-DataTable__Heading",
  "Heading-left": "Polaris-DataTable__Heading--left",
  "Cell-sorted": "Polaris-DataTable__Cell--sorted",
  "Cell-total": "Polaris-DataTable__Cell--total",
  "Cell-total-footer": "Polaris-DataTable--cellTotalFooter",
  "Footer": "Polaris-DataTable__Footer"
};

function Cell({
  content,
  contentType,
  firstColumn,
  truncate,
  header,
  total,
  totalInFooter,
  sorted,
  sortable,
  sortDirection,
  verticalAlign = 'top',
  defaultSortDirection = 'ascending',
  onSort
}) {
  var i18n = useI18n();
  var numeric = contentType === 'numeric';
  var className = classNames(styles$J.Cell, styles$J["Cell-".concat(variationName('verticalAlign', verticalAlign))], firstColumn && styles$J['Cell-firstColumn'], firstColumn && truncate && styles$J['Cell-truncated'], header && styles$J['Cell-header'], total && styles$J['Cell-total'], totalInFooter && styles$J['Cell-total-footer'], numeric && styles$J['Cell-numeric'], sortable && styles$J['Cell-sortable'], sorted && styles$J['Cell-sorted']);
  var headerClassName = classNames(header && styles$J.Heading, header && contentType === 'text' && styles$J['Heading-left']);
  var iconClassName = classNames(sortable && styles$J.Icon);
  var direction = sorted && sortDirection ? sortDirection : defaultSortDirection;
  var source = direction === 'descending' ? polarisIcons.CaretDownMinor : polarisIcons.CaretUpMinor;
  var oppositeDirection = sortDirection === 'ascending' ? 'descending' : 'ascending';
  var sortAccessibilityLabel = i18n.translate('Polaris.DataTable.sortAccessibilityLabel', {
    direction: sorted ? oppositeDirection : direction
  });
  var iconMarkup = /*#__PURE__*/React__default.createElement("span", {
    className: iconClassName
  }, /*#__PURE__*/React__default.createElement(Icon, {
    source: source,
    accessibilityLabel: sortAccessibilityLabel
  }));
  var sortableHeadingContent = /*#__PURE__*/React__default.createElement("button", {
    className: headerClassName,
    onClick: onSort
  }, iconMarkup, content);
  var columnHeadingContent = sortable ? sortableHeadingContent : content;
  var headingMarkup = header ? /*#__PURE__*/React__default.createElement("th", Object.assign({}, headerCell.props, {
    className: className,
    scope: "col",
    "aria-sort": sortDirection
  }), columnHeadingContent) : /*#__PURE__*/React__default.createElement("th", {
    className: className,
    scope: "row"
  }, content);
  var cellMarkup = header || firstColumn ? headingMarkup : /*#__PURE__*/React__default.createElement("td", {
    className: className
  }, content);
  return cellMarkup;
}

function Navigation({
  columnVisibilityData,
  isScrolledFarthestLeft,
  isScrolledFarthestRight,
  navigateTableLeft,
  navigateTableRight
}) {
  var i18n = useI18n();
  var pipMarkup = columnVisibilityData.map((column, index) => {
    var className = classNames(styles$J.Pip, column.isVisible && styles$J['Pip-visible']);
    return /*#__PURE__*/React__default.createElement("div", {
      className: className,
      key: "pip-".concat(index)
    });
  });
  var leftA11yLabel = i18n.translate('Polaris.DataTable.navAccessibilityLabel', {
    direction: 'left'
  });
  var rightA11yLabel = i18n.translate('Polaris.DataTable.navAccessibilityLabel', {
    direction: 'right'
  });
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$J.Navigation
  }, /*#__PURE__*/React__default.createElement(Button, {
    plain: true,
    icon: polarisIcons.ChevronLeftMinor,
    disabled: isScrolledFarthestLeft,
    accessibilityLabel: leftA11yLabel,
    onClick: navigateTableLeft
  }), pipMarkup, /*#__PURE__*/React__default.createElement(Button, {
    plain: true,
    icon: polarisIcons.ChevronRightMinor,
    disabled: isScrolledFarthestRight,
    accessibilityLabel: rightA11yLabel,
    onClick: navigateTableRight
  }));
}

function measureColumn(tableData) {
  return function (column, index) {
    var {
      firstVisibleColumnIndex,
      tableLeftVisibleEdge: tableStart,
      tableRightVisibleEdge: tableEnd
    } = tableData;
    var leftEdge = column.offsetLeft;
    var rightEdge = leftEdge + column.offsetWidth;
    var isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd);
    var isVisibleRight = isEdgeVisible(rightEdge, tableStart, tableEnd);
    var isVisible = isVisibleLeft || isVisibleRight;

    if (isVisible) {
      tableData.firstVisibleColumnIndex = Math.min(firstVisibleColumnIndex, index);
    }

    return {
      leftEdge,
      rightEdge,
      isVisible
    };
  };
}
function isEdgeVisible(position, start, end) {
  var minVisiblePixels = 30;
  return position >= start + minVisiblePixels && position <= end - minVisiblePixels;
}
function getPrevAndCurrentColumns(tableData, columnData) {
  var {
    firstVisibleColumnIndex
  } = tableData;
  var previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0);
  var previousColumn = columnData[previousColumnIndex];
  var currentColumn = columnData[firstVisibleColumnIndex];
  return {
    previousColumn,
    currentColumn
  };
}

class DataTableInner extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      condensed: false,
      columnVisibilityData: [],
      isScrolledFarthestLeft: true,
      isScrolledFarthestRight: false
    };
    this.dataTable = /*#__PURE__*/React.createRef();
    this.scrollContainer = /*#__PURE__*/React.createRef();
    this.table = /*#__PURE__*/React.createRef();
    this.handleResize = debounce(() => {
      var {
        table: {
          current: table
        },
        scrollContainer: {
          current: scrollContainer
        }
      } = this;
      var condensed = false;

      if (table && scrollContainer) {
        condensed = table.scrollWidth > scrollContainer.clientWidth;
      }

      this.setState(_objectSpread2({
        condensed
      }, this.calculateColumnVisibilityData(condensed)));
    });

    this.calculateColumnVisibilityData = condensed => {
      var {
        table: {
          current: table
        },
        scrollContainer: {
          current: scrollContainer
        },
        dataTable: {
          current: dataTable
        }
      } = this;

      if (condensed && table && scrollContainer && dataTable) {
        var headerCells = table.querySelectorAll(headerCell.selector);

        if (headerCells.length > 0) {
          var firstVisibleColumnIndex = headerCells.length - 1;
          var tableLeftVisibleEdge = scrollContainer.scrollLeft;
          var tableRightVisibleEdge = scrollContainer.scrollLeft + dataTable.offsetWidth;
          var tableData = {
            firstVisibleColumnIndex,
            tableLeftVisibleEdge,
            tableRightVisibleEdge
          };
          var columnVisibilityData = [...headerCells].map(measureColumn(tableData));
          var lastColumn = columnVisibilityData[columnVisibilityData.length - 1];
          return _objectSpread2(_objectSpread2({
            columnVisibilityData
          }, getPrevAndCurrentColumns(tableData, columnVisibilityData)), {}, {
            isScrolledFarthestLeft: tableLeftVisibleEdge === 0,
            isScrolledFarthestRight: lastColumn.rightEdge <= tableRightVisibleEdge
          });
        }
      }

      return {
        columnVisibilityData: [],
        previousColumn: undefined,
        currentColumn: undefined
      };
    };

    this.scrollListener = () => {
      this.setState(prevState => _objectSpread2({}, this.calculateColumnVisibilityData(prevState.condensed)));
    };

    this.navigateTable = direction => {
      var {
        currentColumn,
        previousColumn
      } = this.state;
      var {
        current: scrollContainer
      } = this.scrollContainer;

      var handleScroll = () => {
        if (!currentColumn || !previousColumn) {
          return;
        }

        if (scrollContainer) {
          scrollContainer.scrollLeft = direction === 'right' ? currentColumn.rightEdge : previousColumn.leftEdge;
          requestAnimationFrame(() => {
            this.setState(prevState => _objectSpread2({}, this.calculateColumnVisibilityData(prevState.condensed)));
          });
        }
      };

      return handleScroll;
    };

    this.renderHeadings = (heading, headingIndex) => {
      var {
        sortable,
        truncate = false,
        columnContentTypes,
        defaultSortDirection,
        initialSortColumnIndex = 0,
        verticalAlign
      } = this.props;
      var {
        sortDirection = defaultSortDirection,
        sortedColumnIndex = initialSortColumnIndex
      } = this.state;
      var sortableHeadingProps;
      var id = "heading-cell-".concat(headingIndex);

      if (sortable) {
        var isSortable = sortable[headingIndex];
        var isSorted = isSortable && sortedColumnIndex === headingIndex;

        var _direction = isSorted ? sortDirection : 'none';

        sortableHeadingProps = {
          defaultSortDirection,
          sorted: isSorted,
          sortable: isSortable,
          sortDirection: _direction,
          onSort: this.defaultOnSort(headingIndex)
        };
      }

      return /*#__PURE__*/React__default.createElement(Cell, Object.assign({
        header: true,
        key: id,
        content: heading,
        contentType: columnContentTypes[headingIndex],
        firstColumn: headingIndex === 0,
        truncate: truncate
      }, sortableHeadingProps, {
        verticalAlign: verticalAlign
      }));
    };

    this.totalsRowHeading = () => {
      var {
        i18n,
        totals,
        totalsName
      } = this.props;
      var totalsLabel = totalsName ? totalsName : {
        singular: i18n.translate('Polaris.DataTable.totalRowHeading'),
        plural: i18n.translate('Polaris.DataTable.totalsRowHeading')
      };
      return totals && totals.filter(total => total !== '').length > 1 ? totalsLabel.plural : totalsLabel.singular;
    };

    this.renderTotals = (total, index) => {
      var id = "totals-cell-".concat(index);
      var {
        truncate = false,
        verticalAlign
      } = this.props;
      var content;
      var contentType;

      if (index === 0) {
        content = this.totalsRowHeading();
      }

      if (total !== '' && index > 0) {
        contentType = 'numeric';
        content = total;
      }

      var totalInFooter = this.props.showTotalsInFooter;
      return /*#__PURE__*/React__default.createElement(Cell, {
        total: true,
        totalInFooter: totalInFooter,
        firstColumn: index === 0,
        key: id,
        content: content,
        contentType: contentType,
        truncate: truncate,
        verticalAlign: verticalAlign
      });
    };

    this.defaultRenderRow = (row, index) => {
      var className = classNames(styles$J.TableRow);
      var {
        columnContentTypes,
        truncate = false,
        verticalAlign
      } = this.props;
      return /*#__PURE__*/React__default.createElement("tr", {
        key: "row-".concat(index),
        className: className
      }, row.map((content, cellIndex) => {
        var id = "cell-".concat(cellIndex, "-row-").concat(index);
        return /*#__PURE__*/React__default.createElement(Cell, {
          key: id,
          content: content,
          contentType: columnContentTypes[cellIndex],
          firstColumn: cellIndex === 0,
          truncate: truncate,
          verticalAlign: verticalAlign
        });
      }));
    };

    this.defaultOnSort = headingIndex => {
      var {
        onSort,
        defaultSortDirection = 'ascending',
        initialSortColumnIndex
      } = this.props;
      var {
        sortDirection = defaultSortDirection,
        sortedColumnIndex = initialSortColumnIndex
      } = this.state;
      var newSortDirection = defaultSortDirection;

      if (sortedColumnIndex === headingIndex) {
        newSortDirection = sortDirection === 'ascending' ? 'descending' : 'ascending';
      }

      var handleSort = () => {
        this.setState({
          sortDirection: newSortDirection,
          sortedColumnIndex: headingIndex
        }, () => {
          if (onSort) {
            onSort(headingIndex, newSortDirection);
          }
        });
      };

      return handleSort;
    };
  }

  componentDidMount() {
    // We need to defer the calculation in development so the styles have time to be injected.
    if (process.env.NODE_ENV === 'development') {
      setTimeout(() => {
        this.handleResize();
      }, 10);
    } else {
      this.handleResize();
    }
  }

  componentDidUpdate(prevProps) {
    if (isEqual(prevProps, this.props)) {
      return;
    }

    this.handleResize();
  }

  render() {
    var {
      headings,
      totals,
      showTotalsInFooter,
      rows,
      footerContent,
      hideScrollIndicator = false
    } = this.props;
    var {
      condensed,
      columnVisibilityData,
      isScrolledFarthestLeft,
      isScrolledFarthestRight
    } = this.state;
    var className = classNames(styles$J.DataTable, condensed && styles$J.condensed);
    var wrapperClassName = classNames(styles$J.TableWrapper, condensed && styles$J.condensed);
    var headingMarkup = /*#__PURE__*/React__default.createElement("tr", null, headings.map(this.renderHeadings));
    var totalsMarkup = totals ? /*#__PURE__*/React__default.createElement("tr", null, totals.map(this.renderTotals)) : null;
    var bodyMarkup = rows.map(this.defaultRenderRow);
    var footerMarkup = footerContent ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$J.Footer
    }, footerContent) : null;
    var headerTotalsMarkup = !showTotalsInFooter ? totalsMarkup : null;
    var footerTotalsMarkup = showTotalsInFooter ? /*#__PURE__*/React__default.createElement("tfoot", null, totalsMarkup) : null;
    var navigationMarkup = hideScrollIndicator ? null : /*#__PURE__*/React__default.createElement(Navigation, {
      columnVisibilityData: columnVisibilityData,
      isScrolledFarthestLeft: isScrolledFarthestLeft,
      isScrolledFarthestRight: isScrolledFarthestRight,
      navigateTableLeft: this.navigateTable('left'),
      navigateTableRight: this.navigateTable('right')
    });
    return /*#__PURE__*/React__default.createElement("div", {
      className: wrapperClassName
    }, navigationMarkup, /*#__PURE__*/React__default.createElement("div", {
      className: className,
      ref: this.dataTable
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$J.ScrollContainer,
      ref: this.scrollContainer
    }, /*#__PURE__*/React__default.createElement(EventListener, {
      event: "resize",
      handler: this.handleResize
    }), /*#__PURE__*/React__default.createElement(EventListener, {
      capture: true,
      event: "scroll",
      handler: this.scrollListener
    }), /*#__PURE__*/React__default.createElement("table", {
      className: styles$J.Table,
      ref: this.table
    }, /*#__PURE__*/React__default.createElement("thead", null, headingMarkup, headerTotalsMarkup), /*#__PURE__*/React__default.createElement("tbody", null, bodyMarkup), footerTotalsMarkup)), footerMarkup));
  }

}

function DataTable(props) {
  var i18n = useI18n();
  return /*#__PURE__*/React__default.createElement(DataTableInner, Object.assign({}, props, {
    i18n: i18n
  }));
}

var WEEK_LENGTH = 7;
function getWeeksForMonth(month, year, weekStartsOn = 0) {
  var firstOfMonth = new Date(year, month, 1);
  var firstDayOfWeek = firstOfMonth.getDay();
  var weeks = [[]];
  var currentWeek = weeks[0];
  var currentDate = firstOfMonth;
  var orderedWeekday = getOrderedWeekdays(weekStartsOn);

  for (var i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++) {
    currentWeek.push(null);
  }

  while (currentDate.getMonth() === month) {
    if (currentWeek.length === WEEK_LENGTH) {
      currentWeek = [];
      weeks.push(currentWeek);
    }

    currentWeek.push(currentDate);
    currentDate = new Date(year, month, currentDate.getDate() + 1);
  }

  while (currentWeek.length < 7) {
    currentWeek.push(null);
  }

  return weeks;
}
function dateIsInRange(day, range) {
  if (day == null) {
    return false;
  }

  var {
    start,
    end
  } = range;
  return Boolean(start && day > start && end && day < end);
}
function dateIsSelected(day, range) {
  if (day == null) {
    return false;
  }

  var {
    start,
    end
  } = range;
  return Boolean(start && isSameDay(start, day) || end && isSameDay(end, day));
}
function isSameDay(day1, day2) {
  return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();
}
function getNewRange(range, selected) {
  if (range == null) {
    return {
      start: selected,
      end: selected
    };
  }

  var {
    start,
    end
  } = range;

  if (end && (isDateAfter(start, end) || isDateBefore(start, end))) {
    return {
      start: selected,
      end: selected
    };
  }

  if (start) {
    if (isDateBefore(selected, start)) {
      return {
        start: selected,
        end: selected
      };
    }

    return {
      start,
      end: selected
    };
  }

  if (end) {
    if (isDateBefore(selected, end)) {
      return {
        start: selected,
        end
      };
    }

    return {
      start: start || end,
      end: selected
    };
  }

  return {
    start: selected,
    end: selected
  };
}
function getNextDisplayMonth(month) {
  if (month === 11) {
    return 0;
  }

  return month + 1;
}
function getNextDisplayYear(month, year) {
  if (month === 11) {
    return year + 1;
  }

  return year;
}
function getPreviousDisplayMonth(month) {
  if (month === 0) {
    return 11;
  }

  return month - 1;
}
function getPreviousDisplayYear(month, year) {
  if (month === 0) {
    return year - 1;
  }

  return year;
}
function isDateAfter(date, dateToCompare) {
  return date.getTime() > dateToCompare.getTime();
}
function isDateBefore(date, dateToCompare) {
  return date.getTime() < dateToCompare.getTime();
}
var WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];
function getOrderedWeekdays(weekStartsOn) {
  var weekDays = [...WEEKDAYS];
  var restOfDays = weekDays.splice(weekStartsOn);
  return [...restOfDays, ...weekDays];
}

function monthName(month) {
  switch (month) {
    case 0:
      return 'january';

    case 1:
      return 'february';

    case 2:
      return 'march';

    case 3:
      return 'april';

    case 4:
      return 'may';

    case 5:
      return 'june';

    case 6:
      return 'july';

    case 7:
      return 'august';

    case 8:
      return 'september';

    case 9:
      return 'october';

    case 10:
      return 'november';

    case 11:
      return 'december';
  }
}
function weekdayName(weekday) {
  switch (weekday) {
    case 0:
      return 'sunday';

    case 1:
      return 'monday';

    case 2:
      return 'tuesday';

    case 3:
      return 'wednesday';

    case 4:
      return 'thursday';

    case 5:
      return 'friday';

    case 6:
      return 'saturday';
  }
}

var styles$K = {
  "DatePicker": "Polaris-DatePicker",
  "MonthContainer": "Polaris-DatePicker__MonthContainer",
  "Month": "Polaris-DatePicker__Month",
  "Month-current": "Polaris-DatePicker__Month--current",
  "Week": "Polaris-DatePicker__Week",
  "WeekHeadings": "Polaris-DatePicker__WeekHeadings",
  "Day": "Polaris-DatePicker__Day",
  "EmptyDay": "Polaris-DatePicker__EmptyDay",
  "Day-today": "Polaris-DatePicker__Day--today",
  "Day-inRange": "Polaris-DatePicker__Day--inRange",
  "Day-selected": "Polaris-DatePicker__Day--selected",
  "Day-disabled": "Polaris-DatePicker__Day--disabled",
  "Weekday": "Polaris-DatePicker__Weekday",
  "Weekday-current": "Polaris-DatePicker__Weekday--current",
  "Header": "Polaris-DatePicker__Header",
  "Title": "Polaris-DatePicker__Title",
  "newDesignLanguage": "Polaris-DatePicker--newDesignLanguage",
  "Day-firstInRange": "Polaris-DatePicker__Day--firstInRange",
  "Day-hasRange": "Polaris-DatePicker__Day--hasRange",
  "Day-hoverRight": "Polaris-DatePicker__Day--hoverRight",
  "Day-lastInRange": "Polaris-DatePicker__Day--lastInRange"
};

var Day = /*#__PURE__*/React.memo(function Day({
  day,
  focused,
  onClick,
  onHover = noop$4,
  onFocus = noop$4,
  selected,
  inRange,
  inHoveringRange,
  disabled,
  lastDayOfMonth,
  isLastSelectedDay,
  isFirstSelectedDay,
  isHoveringRight,
  rangeIsDifferent
}) {
  var i18n = useI18n();
  var dayNode = React.useRef(null);
  var hoverValue = lastDayOfMonth || day;
  React.useEffect(() => {
    if (focused && dayNode.current) {
      dayNode.current.focus();
    }
  }, [focused]);

  if (!day) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: styles$K.EmptyDay,
      onMouseOver: () => onHover(hoverValue)
    });
  }

  var handleClick = onClick && !disabled ? onClick.bind(null, day) : noop$4;
  var today = isSameDay(new Date(), day);
  var className = classNames(styles$K.Day, selected && styles$K['Day-selected'], disabled && styles$K['Day-disabled'], today && styles$K['Day-today'], (inRange || inHoveringRange) && !disabled && styles$K['Day-inRange'], isLastSelectedDay && styles$K['Day-lastInRange'], isFirstSelectedDay && styles$K['Day-firstInRange'], isHoveringRight && styles$K['Day-hoverRight'], rangeIsDifferent && styles$K['Day-hasRange']);
  var date = day.getDate();
  var tabIndex = (focused || selected || today || date === 1) && !disabled ? 0 : -1;
  var ariaLabel = ["".concat(today ? i18n.translate('Polaris.DatePicker.today') : ''), "".concat(i18n.translate("Polaris.DatePicker.months.".concat(monthName(day.getMonth()))), " "), "".concat(date, " "), "".concat(day.getFullYear())].join('');
  return /*#__PURE__*/React__default.createElement("button", {
    onFocus: () => onFocus(day),
    type: "button",
    ref: dayNode,
    tabIndex: tabIndex,
    className: className,
    onMouseOver: () => onHover(hoverValue),
    onClick: handleClick,
    "aria-label": ariaLabel,
    "aria-selected": selected,
    "aria-disabled": disabled,
    role: "gridcell"
  }, date);
});

function noop$4() {}

var Weekday = /*#__PURE__*/React.memo(function Weekday({
  label,
  title,
  current
}) {
  var className = classNames(styles$K.Weekday, current && styles$K['Weekday-current']);
  return /*#__PURE__*/React__default.createElement("div", {
    "aria-label": label,
    className: className
  }, title);
});

function Month({
  focusedDate,
  selected,
  hoverDate,
  disableDatesBefore,
  disableDatesAfter,
  allowRange,
  onChange = noop$5,
  onHover = noop$5,
  onFocus = noop$5,
  month,
  year,
  weekStartsOn
}) {
  var i18n = useI18n();
  var isInHoveringRange = allowRange ? hoveringDateIsInRange : () => false;
  var now = new Date();
  var current = now.getMonth() === month && now.getFullYear() === year;
  var className = classNames(styles$K.Title, current && styles$K['Month-current']);
  var weeks = React.useMemo(() => getWeeksForMonth(month, year, weekStartsOn), [month, weekStartsOn, year]);
  var weekdays = getOrderedWeekdays(weekStartsOn).map(weekday => /*#__PURE__*/React__default.createElement(Weekday, {
    key: weekday,
    title: i18n.translate("Polaris.DatePicker.daysAbbreviated.".concat(weekdayName(weekday))),
    label: i18n.translate("Polaris.DatePicker.days.".concat(weekdayName(weekday))),
    current: current && new Date().getDay() === weekday
  }));
  var handleDateClick = React.useCallback(selectedDate => {
    onChange(getNewRange(allowRange ? selected : undefined, selectedDate));
  }, [allowRange, onChange, selected]);
  var lastDayOfMonth = React.useMemo(() => new Date(year, month + 1, 0), [month, year]);

  function renderWeek(day, dayIndex) {
    if (day == null) {
      return /*#__PURE__*/React__default.createElement(Day, {
        key: dayIndex,
        onHover: onHover,
        lastDayOfMonth: lastDayOfMonth
      });
    }

    var disabled = disableDatesBefore && isDateBefore(day, disableDatesBefore) || disableDatesAfter && isDateAfter(day, disableDatesAfter);
    var isFirstSelectedDay = allowRange && selected && isDateStart(day, selected);
    var isLastSelectedDay = allowRange && selected && (!isSameDay(selected.start, selected.end) && isDateEnd(day, selected) || hoverDate && isSameDay(selected.start, selected.end) && isDateAfter(hoverDate, selected.start) && isSameDay(day, hoverDate) && !isFirstSelectedDay);
    var rangeIsDifferent = !(selected && isSameDay(selected.start, selected.end));
    var isHoveringRight = hoverDate && isDateBefore(day, hoverDate);
    return /*#__PURE__*/React__default.createElement(Day, {
      focused: focusedDate != null && isSameDay(day, focusedDate),
      day: day,
      key: dayIndex,
      onFocus: onFocus,
      onClick: handleDateClick,
      onHover: onHover,
      selected: selected != null && dateIsSelected(day, selected),
      inRange: selected != null && dateIsInRange(day, selected),
      disabled: disabled,
      inHoveringRange: selected != null && hoverDate != null && isInHoveringRange(day, selected, hoverDate),
      isLastSelectedDay: isLastSelectedDay,
      isFirstSelectedDay: isFirstSelectedDay,
      isHoveringRight: isHoveringRight,
      rangeIsDifferent: rangeIsDifferent
    });
  }

  var weeksMarkup = weeks.map((week, index) => /*#__PURE__*/React__default.createElement("div", {
    role: "row",
    className: styles$K.Week,
    key: index
  }, week.map(renderWeek)));
  return /*#__PURE__*/React__default.createElement("div", {
    role: "grid",
    className: styles$K.Month
  }, /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, i18n.translate("Polaris.DatePicker.months.".concat(monthName(month))), " ", year), /*#__PURE__*/React__default.createElement("div", {
    role: "rowheader",
    className: styles$K.WeekHeadings
  }, weekdays), weeksMarkup);
}

function noop$5() {}

function hoveringDateIsInRange(day, range, hoverEndDate) {
  if (day == null) {
    return false;
  }

  var {
    start,
    end
  } = range;
  return Boolean(isSameDay(start, end) && day > start && day <= hoverEndDate);
}

function isDateEnd(day, range) {
  if (day == null) return false;
  var {
    end
  } = range;
  return Boolean(end && isSameDay(end, day));
}

function isDateStart(day, range) {
  if (day == null) return false;
  var {
    start
  } = range;
  return Boolean(start && isSameDay(start, day));
}

function DatePicker({
  id,
  selected,
  month,
  year,
  allowRange,
  multiMonth,
  disableDatesBefore,
  disableDatesAfter,
  weekStartsOn = 0,
  onMonthChange,
  onChange = noop$6
}) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var [hoverDate, setHoverDate] = React.useState(undefined);
  var [focusDate, setFocusDate] = React.useState(undefined);
  React.useEffect(() => {
    setFocusDate(undefined);
  }, [selected]);
  var handleFocus = React.useCallback(date => {
    setFocusDate(date);
  }, []);
  var setFocusDateAndHandleMonthChange = React.useCallback(date => {
    if (onMonthChange) {
      onMonthChange(date.getMonth(), date.getFullYear());
    }

    setHoverDate(date);
    setFocusDate(date);
  }, [onMonthChange]);
  var handleDateSelection = React.useCallback(range => {
    var {
      end
    } = range;
    setHoverDate(end);
    setFocusDate(new Date(end));
    onChange(range);
  }, [onChange]);
  var handleMonthChangeClick = React.useCallback((month, year) => {
    if (!onMonthChange) {
      return;
    }

    setFocusDate(undefined);
    onMonthChange(month, year);
  }, [onMonthChange]);
  var handleHover = React.useCallback(date => {
    setHoverDate(date);
  }, []);
  var handleKeyUp = React.useCallback(event => {
    var {
      key
    } = event;
    var range = deriveRange(selected);
    var focusedDate = focusDate || range && range.start;

    if (focusedDate == null) {
      return;
    }

    if (key === 'ArrowUp') {
      var previousWeek = new Date(focusedDate);
      previousWeek.setDate(focusedDate.getDate() - 7);

      if (!(disableDatesBefore && isDateBefore(previousWeek, disableDatesBefore))) {
        setFocusDateAndHandleMonthChange(previousWeek);
      }
    }

    if (key === 'ArrowDown') {
      var nextWeek = new Date(focusedDate);
      nextWeek.setDate(focusedDate.getDate() + 7);

      if (!(disableDatesAfter && isDateAfter(nextWeek, disableDatesAfter))) {
        setFocusDateAndHandleMonthChange(nextWeek);
      }
    }

    if (key === 'ArrowRight') {
      var tomorrow = new Date(focusedDate);
      tomorrow.setDate(focusedDate.getDate() + 1);

      if (!(disableDatesAfter && isDateAfter(tomorrow, disableDatesAfter))) {
        setFocusDateAndHandleMonthChange(tomorrow);
      }
    }

    if (key === 'ArrowLeft') {
      var yesterday = new Date(focusedDate);
      yesterday.setDate(focusedDate.getDate() - 1);

      if (!(disableDatesBefore && isDateBefore(yesterday, disableDatesBefore))) {
        setFocusDateAndHandleMonthChange(yesterday);
      }
    }
  }, [disableDatesAfter, disableDatesBefore, focusDate, selected, setFocusDateAndHandleMonthChange]);
  var showNextYear = getNextDisplayYear(month, year);
  var showNextMonth = getNextDisplayMonth(month);
  var showNextToNextYear = getNextDisplayYear(showNextMonth, showNextYear);
  var showNextToNextMonth = getNextDisplayMonth(showNextMonth);
  var showPreviousYear = getPreviousDisplayYear(month, year);
  var showPreviousMonth = getPreviousDisplayMonth(month);
  var previousMonthName = i18n.translate("Polaris.DatePicker.months.".concat(monthName(showPreviousMonth)));
  var nextMonth = multiMonth ? i18n.translate("Polaris.DatePicker.months.".concat(monthName(showNextToNextMonth))) : i18n.translate("Polaris.DatePicker.months.".concat(monthName(showNextMonth)));
  var nextYear = multiMonth ? showNextToNextYear : showNextYear;
  var monthIsSelected = React.useMemo(() => deriveRange(selected), [selected]);
  var secondDatePicker = multiMonth ? /*#__PURE__*/React__default.createElement(Month, {
    onFocus: handleFocus,
    focusedDate: focusDate,
    month: showNextMonth,
    year: showNextYear,
    selected: monthIsSelected,
    hoverDate: hoverDate,
    onChange: handleDateSelection,
    onHover: handleHover,
    disableDatesBefore: disableDatesBefore,
    disableDatesAfter: disableDatesAfter,
    allowRange: allowRange,
    weekStartsOn: weekStartsOn
  }) : null;
  var datePickerClassName = classNames(styles$K.DatePicker, newDesignLanguage && styles$K.newDesignLanguage);
  return /*#__PURE__*/React__default.createElement("div", {
    id: id,
    className: datePickerClassName,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$K.Header
  }, /*#__PURE__*/React__default.createElement(Button, {
    plain: true,
    icon: polarisIcons.ArrowLeftMinor,
    accessibilityLabel: i18n.translate('Polaris.DatePicker.previousMonth', {
      previousMonthName,
      showPreviousYear
    }),
    onClick: () => handleMonthChangeClick(showPreviousMonth, showPreviousYear)
  }), /*#__PURE__*/React__default.createElement(Button, {
    plain: true,
    icon: polarisIcons.ArrowRightMinor,
    accessibilityLabel: i18n.translate('Polaris.DatePicker.nextMonth', {
      nextMonth,
      nextYear
    }),
    onClick: () => handleMonthChangeClick(showNextMonth, showNextYear)
  })), /*#__PURE__*/React__default.createElement("div", {
    className: styles$K.MonthContainer
  }, /*#__PURE__*/React__default.createElement(Month, {
    onFocus: handleFocus,
    focusedDate: focusDate,
    month: month,
    year: year,
    selected: deriveRange(selected),
    hoverDate: hoverDate,
    onChange: handleDateSelection,
    onHover: handleHover,
    disableDatesBefore: disableDatesBefore,
    disableDatesAfter: disableDatesAfter,
    allowRange: allowRange,
    weekStartsOn: weekStartsOn
  }), secondDatePicker));
}

function noop$6() {}

function handleKeyDown(event) {
  var {
    key
  } = event;

  if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {
    event.preventDefault();
    event.stopPropagation();
  }
}

function deriveRange(selected) {
  return selected instanceof Date ? {
    start: selected,
    end: selected
  } : selected;
}

var styles$L = {
  "DescriptionList": "Polaris-DescriptionList",
  "Term": "Polaris-DescriptionList__Term",
  "Description": "Polaris-DescriptionList__Description"
};

function DescriptionList({
  items
}) {
  // There's no good key to give React so using the index is a last resport.
  // we can't use the term/description value as it may be a react component
  // which can't be stringified
  var terms = items.reduce((allTerms, {
    term,
    description
  }, index) => [...allTerms, /*#__PURE__*/React__default.createElement("dt", {
    key: "dt".concat(index),
    className: styles$L.Term
  }, term), /*#__PURE__*/React__default.createElement("dd", {
    key: "dd".concat(index),
    className: styles$L.Description
  }, description)], []);
  return /*#__PURE__*/React__default.createElement("dl", {
    className: styles$L.DescriptionList
  }, terms);
}

var styles$M = {
  "DisplayText": "Polaris-DisplayText",
  "sizeSmall": "Polaris-DisplayText--sizeSmall",
  "sizeMedium": "Polaris-DisplayText--sizeMedium",
  "sizeLarge": "Polaris-DisplayText--sizeLarge",
  "sizeExtraLarge": "Polaris-DisplayText--sizeExtraLarge"
};

function DisplayText({
  element: Element = 'p',
  children,
  size = 'medium'
}) {
  var className = classNames(styles$M.DisplayText, size && styles$M[variationName('size', size)]);
  return /*#__PURE__*/React__default.createElement(Element, {
    className: className
  }, children);
}

function capitalize(word = '') {
  var wordLower = word.toLowerCase();
  return wordLower.charAt(0).toUpperCase() + wordLower.slice(1);
}

/**
 * Similarly to the life-cycle method componentDidMount, useComponentDidMount
 * will be invoked after the component has mounted, and only the initial mount.
 * @param callback Defines a callback to invoke once the component has
 * initially mounted.
 * @example
 * function Playground({active}) {
 *  useComponentDidMount(() => {
 *    if (active) {
 *      console.warning(`Component has mounted.`);
 *    }
 *  });
 *
 *  return null;
 * }
 */

function useComponentDidMount(callback) {
  var isAfterInitialMount = useIsAfterInitialMount();
  var hasInvokedLifeCycle = React.useRef(false);

  if (isAfterInitialMount && !hasInvokedLifeCycle.current) {
    hasInvokedLifeCycle.current = true;
    return callback();
  }
}

const img = "data:image/svg+xml,%3csvg fill='none' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M20 10a10 10 0 11-20 0 10 10 0 0120 0zM5.3 8.3l4-4a1 1 0 011.4 0l4 4a1 1 0 01-1.4 1.4L11 7.4V15a1 1 0 11-2 0V7.4L6.7 9.7a1 1 0 01-1.4-1.4z' fill='%235C5F62'/%3e%3c/svg%3e";

var DropZoneContext = /*#__PURE__*/React.createContext({
  disabled: false,
  focused: false,
  size: 'extraLarge',
  type: 'file',
  measuring: false
});

var styles$N = {
  "FileUpload": "Polaris-DropZone-FileUpload",
  "FileUploadSmallView": "Polaris-DropZone-FileUpload__FileUploadSmallView",
  "Button": "Polaris-DropZone-FileUpload__Button",
  "newDesignLanguage": "Polaris-DropZone-FileUpload--newDesignLanguage",
  "pressed": "Polaris-DropZone-FileUpload--pressed",
  "disabled": "Polaris-DropZone-FileUpload--disabled",
  "focused": "Polaris-DropZone-FileUpload--focused",
  "sizeSlim": "Polaris-DropZone-FileUpload--sizeSlim",
  "ActionTitle": "Polaris-DropZone-FileUpload__ActionTitle",
  "ActionTitle-disabled": "Polaris-DropZone-FileUpload__ActionTitle--disabled",
  "ActionTitle-focused": "Polaris-DropZone-FileUpload__ActionTitle--focused"
};

var _ref$b = /*#__PURE__*/React__default.createElement("img", {
  width: "40",
  src: img,
  alt: ""
});

var _ref2$2 = /*#__PURE__*/React__default.createElement("img", {
  width: "40",
  src: img,
  alt: ""
});

var _ref3 = /*#__PURE__*/React__default.createElement("img", {
  width: "20",
  src: img,
  alt: ""
});

function FileUpload(props) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var {
    size,
    measuring,
    type,
    focused,
    disabled
  } = React.useContext(DropZoneContext);
  var suffix = capitalize(type);
  var {
    actionTitle = i18n.translate("Polaris.DropZone.FileUpload.actionTitle".concat(suffix)),
    actionHint = i18n.translate("Polaris.DropZone.FileUpload.actionHint".concat(suffix))
  } = props;
  var buttonStyles = size === 'extraLarge' || size === 'large' ? classNames(styles$N.Button, newDesignLanguage && styles$N.newDesignLanguage, size && size !== 'extraLarge' && styles$N.slim, focused && styles$N.focused, disabled && styles$N.disabled) : null;
  var buttonMarkup = (size === 'extraLarge' || size === 'large') && buttonStyles ? /*#__PURE__*/React__default.createElement("div", {
    className: buttonStyles
  }, actionTitle) : null;
  var actionTitleClassName = classNames(styles$N.ActionTitle, focused && !disabled && styles$N['ActionTitle-focused'], disabled && styles$N['ActionTitle-disabled']);
  var actionTitleMarkup = /*#__PURE__*/React__default.createElement("div", {
    className: actionTitleClassName
  }, actionTitle);
  var fileUploadClassName = classNames(styles$N.FileUpload, newDesignLanguage && styles$N.newDesignLanguage, measuring && styles$N.measuring, size === 'small' && styles$N.FileUploadSmallView);
  var viewMarkup;

  switch (size) {
    case 'extraLarge':
      viewMarkup = /*#__PURE__*/React__default.createElement(Stack, {
        vertical: true
      }, _ref$b, buttonMarkup, /*#__PURE__*/React__default.createElement(TextStyle, {
        variation: "subdued"
      }, actionHint));
      break;

    case 'large':
      viewMarkup = /*#__PURE__*/React__default.createElement(Stack, {
        vertical: true,
        spacing: "tight"
      }, _ref2$2, buttonMarkup, /*#__PURE__*/React__default.createElement(Caption, null, /*#__PURE__*/React__default.createElement(TextStyle, {
        variation: "subdued"
      }, actionHint)));
      break;

    case 'medium':
      viewMarkup = /*#__PURE__*/React__default.createElement(Stack, {
        vertical: true,
        spacing: "tight"
      }, actionTitleMarkup, /*#__PURE__*/React__default.createElement(Caption, null, /*#__PURE__*/React__default.createElement(TextStyle, {
        variation: "subdued"
      }, actionHint)));
      break;

    case 'small':
      viewMarkup = _ref3;
      break;
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: fileUploadClassName
  }, viewMarkup);
}

var dragEvents = ['dragover', 'dragenter', 'drop'];
function fileAccepted(file, accept) {
  return file.type === 'application/x-moz-file' || accepts(file, accept);
}
function getDataTransferFiles(event) {
  if (isDragEvent(event) && event.dataTransfer) {
    var dt = event.dataTransfer;

    if (dt.files && dt.files.length) {
      return Array.from(dt.files);
    } else if (dt.items && dt.items.length) {
      // Chrome is the only browser that allows to read the file list on drag
      // events and uses `items` instead of `files` in this case.
      return Array.from(dt.items);
    }
  } else if (isChangeEvent(event) && event.target.files) {
    // Return files from even when a file was selected from an upload dialog
    return Array.from(event.target.files);
  }

  return [];
}

function accepts(file, acceptedFiles) {
  if (file && acceptedFiles) {
    var fileName = file.name || '';
    var mimeType = file.type || '';
    var baseMimeType = mimeType.replace(/\/.*$/, '');
    var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
    return acceptedFilesArray.some(type => {
      var validType = type.trim();

      if (validType.startsWith('.')) {
        return fileName.toLowerCase().endsWith(validType.toLowerCase());
      } else if (validType.endsWith('/*')) {
        // This is something like a image/* mime type
        return baseMimeType === validType.replace(/\/.*$/, '');
      }

      return mimeType === validType;
    });
  }

  return true;
}

function isDragEvent(event) {
  return dragEvents.indexOf(event.type) > 0;
}

function isChangeEvent(event) {
  return Object.prototype.hasOwnProperty.call(event, 'target');
}

var styles$O = {
  "DropZone": "Polaris-DropZone",
  "hasOutline": "Polaris-DropZone--hasOutline",
  "isDisabled": "Polaris-DropZone--isDisabled",
  "newDesignLanguage": "Polaris-DropZone--newDesignLanguage",
  "focused": "Polaris-DropZone--focused",
  "isDragging": "Polaris-DropZone--isDragging",
  "sizeExtraLarge": "Polaris-DropZone--sizeExtraLarge",
  "sizeLarge": "Polaris-DropZone--sizeLarge",
  "sizeMedium": "Polaris-DropZone--sizeMedium",
  "sizeSmall": "Polaris-DropZone--sizeSmall",
  "measuring": "Polaris-DropZone--measuring",
  "Container": "Polaris-DropZone__Container",
  "Overlay": "Polaris-DropZone__Overlay",
  "hasError": "Polaris-DropZone--hasError"
};

// TypeScript can't generate types that correctly infer the typing of
// subcomponents so explicitly state the subcomponents in the type definition.
// Letting this be implicit works in this project but fails in projects that use
// generated *.d.ts files.
var DropZone = function DropZone({
  dropOnPage,
  label,
  labelAction,
  labelHidden,
  children,
  disabled = false,
  outline = true,
  accept,
  active,
  overlay = true,
  allowMultiple = true,
  overlayText,
  errorOverlayText,
  id: idProp,
  type = 'file',
  onClick,
  error,
  openFileDialog,
  onFileDialogClose,
  customValidator,
  onDrop,
  onDropAccepted,
  onDropRejected,
  onDragEnter,
  onDragOver,
  onDragLeave
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var node = React.useRef(null);
  var dragTargets = React.useRef([]); // eslint-disable-next-line react-hooks/exhaustive-deps

  var adjustSize = React.useCallback(debounce(() => {
    if (!node.current) {
      return;
    }

    var size = 'extraLarge';
    var width = node.current.getBoundingClientRect().width;

    if (width < 100) {
      size = 'small';
    } else if (width < 160) {
      size = 'medium';
    } else if (width < 300) {
      size = 'large';
    }

    setSize(size);
    measuring && setMeasuring(false);
  }, 50, {
    trailing: true
  }), []);
  var [dragging, setDragging] = React.useState(false);
  var [internalError, setInternalError] = React.useState(false);
  var {
    value: focused,
    setTrue: handleFocus,
    setFalse: handleBlur
  } = useToggle(false);
  var [size, setSize] = React.useState('extraLarge');
  var [measuring, setMeasuring] = React.useState(true);
  var i18n = useI18n();
  var getValidatedFiles = React.useCallback(files => {
    var acceptedFiles = [];
    var rejectedFiles = [];
    Array.from(files).forEach(file => {
      !fileAccepted(file, accept) || customValidator && !customValidator(file) ? rejectedFiles.push(file) : acceptedFiles.push(file);
    });

    if (!allowMultiple) {
      acceptedFiles.splice(1, acceptedFiles.length);
      rejectedFiles.push(...acceptedFiles.slice(1));
    }

    return {
      files,
      acceptedFiles,
      rejectedFiles
    };
  }, [accept, allowMultiple, customValidator]);
  var handleDrop = React.useCallback(event => {
    stopEvent(event);
    if (disabled) return;
    var fileList = getDataTransferFiles(event);
    var {
      files,
      acceptedFiles,
      rejectedFiles
    } = getValidatedFiles(fileList);
    dragTargets.current = [];
    setDragging(false);
    setInternalError(rejectedFiles.length > 0);
    onDrop && onDrop(files, acceptedFiles, rejectedFiles);
    onDropAccepted && acceptedFiles.length && onDropAccepted(acceptedFiles);
    onDropRejected && rejectedFiles.length && onDropRejected(rejectedFiles);
    event.target.value = '';
  }, [disabled, getValidatedFiles, onDrop, onDropAccepted, onDropRejected]);
  var handleDragEnter = React.useCallback(event => {
    stopEvent(event);
    if (disabled) return;
    var fileList = getDataTransferFiles(event);

    if (event.target && !dragTargets.current.includes(event.target)) {
      dragTargets.current.push(event.target);
    }

    if (dragging) return;
    var {
      rejectedFiles
    } = getValidatedFiles(fileList);
    setDragging(true);
    setInternalError(rejectedFiles.length > 0);
    onDragEnter && onDragEnter();
  }, [disabled, dragging, getValidatedFiles, onDragEnter]);
  var handleDragOver = React.useCallback(event => {
    stopEvent(event);
    if (disabled) return;
    onDragOver && onDragOver();
  }, [disabled, onDragOver]);
  var handleDragLeave = React.useCallback(event => {
    event.preventDefault();
    if (disabled) return;
    dragTargets.current = dragTargets.current.filter(el => {
      var compareNode = dropOnPage && !isServer ? document : node.current;
      return el !== event.target && compareNode && compareNode.contains(el);
    });
    if (dragTargets.current.length > 0) return;
    setDragging(false);
    setInternalError(false);
    onDragLeave && onDragLeave();
  }, [dropOnPage, disabled, onDragLeave]);
  React.useEffect(() => {
    var dropNode = dropOnPage ? document : node.current;
    if (!dropNode) return;
    dropNode.addEventListener('drop', handleDrop);
    dropNode.addEventListener('dragover', handleDragOver);
    dropNode.addEventListener('dragenter', handleDragEnter);
    dropNode.addEventListener('dragleave', handleDragLeave);
    window.addEventListener('resize', adjustSize);
    return () => {
      dropNode.removeEventListener('drop', handleDrop);
      dropNode.removeEventListener('dragover', handleDragOver);
      dropNode.removeEventListener('dragenter', handleDragEnter);
      dropNode.removeEventListener('dragleave', handleDragLeave);
      window.removeEventListener('resize', adjustSize);
    };
  }, [dropOnPage, handleDrop, handleDragOver, handleDragEnter, handleDragLeave, adjustSize]);
  useComponentDidMount(() => {
    adjustSize();
  });
  var id = useUniqueId('DropZone', idProp);
  var suffix = capitalize(type);
  var overlayTextWithDefault = overlayText === undefined ? i18n.translate("Polaris.DropZone.overlayText".concat(suffix)) : overlayText;
  var errorOverlayTextWithDefault = errorOverlayText === undefined ? i18n.translate("Polaris.DropZone.errorOverlayText".concat(suffix)) : errorOverlayText;
  var inputAttributes = {
    id,
    accept,
    disabled,
    type: 'file',
    multiple: allowMultiple,
    onChange: handleDrop,
    onFocus: handleFocus,
    onBlur: handleBlur
  };
  var classes = classNames(styles$O.DropZone, outline && styles$O.hasOutline, focused && styles$O.focused, (active || dragging) && styles$O.isDragging, disabled && styles$O.isDisabled, newDesignLanguage && styles$O.newDesignLanguage, (internalError || error) && styles$O.hasError, styles$O[variationName('size', size)], measuring && styles$O.measuring);
  var dragOverlay = (active || dragging) && (!internalError || !error) && overlay && overlayMarkup(polarisIcons.DragDropMajorMonotone, 'indigo', overlayTextWithDefault);
  var dragErrorOverlay = dragging && (internalError || error) && overlayMarkup(polarisIcons.CircleAlertMajorMonotone, 'red', errorOverlayTextWithDefault);
  var labelValue = label || i18n.translate('Polaris.DropZone.FileUpload.label');
  var labelHiddenValue = label ? labelHidden : true;
  var context = React.useMemo(() => ({
    disabled,
    focused,
    size,
    type: type || 'file',
    measuring
  }), [disabled, focused, measuring, size, type]);
  return /*#__PURE__*/React__default.createElement(DropZoneContext.Provider, {
    value: context
  }, /*#__PURE__*/React__default.createElement(Labelled, {
    id: id,
    label: labelValue,
    action: labelAction,
    labelHidden: labelHiddenValue
  }, /*#__PURE__*/React__default.createElement("div", {
    ref: node,
    className: classes,
    "aria-disabled": disabled,
    onClick: handleClick,
    onDragStart: stopEvent
  }, dragOverlay, dragErrorOverlay, /*#__PURE__*/React__default.createElement("div", {
    className: styles$O.Container
  }, children), /*#__PURE__*/React__default.createElement(VisuallyHidden, null, /*#__PURE__*/React__default.createElement(DropZoneInput, Object.assign({}, inputAttributes, {
    openFileDialog: openFileDialog,
    onFileDialogClose: onFileDialogClose
  }))))));

  function overlayMarkup(icon, color, text) {
    var overlayClass = classNames(styles$O.Overlay, newDesignLanguage && styles$O.newDesignLanguage);
    return /*#__PURE__*/React__default.createElement("div", {
      className: overlayClass
    }, /*#__PURE__*/React__default.createElement(Stack, {
      vertical: true,
      spacing: "tight"
    }, /*#__PURE__*/React__default.createElement(Icon, {
      source: icon,
      color: color
    }), size === 'extraLarge' && /*#__PURE__*/React__default.createElement(DisplayText, {
      size: "small",
      element: "p"
    }, text), (size === 'medium' || size === 'large') && /*#__PURE__*/React__default.createElement(Caption, null, text)));
  }

  function open() {
    var fileInputNode = node.current && node.current.querySelector("#".concat(id));
    fileInputNode && fileInputNode instanceof HTMLElement && fileInputNode.click();
  }

  function handleClick(event) {
    if (disabled) return;
    return onClick ? onClick(event) : open();
  }
};

function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}

DropZone.FileUpload = FileUpload;

// Due to security reasons, browsers do not allow file inputs to be opened artificially.
// For example `useEffect(() => { ref.click() })`. Oddly enough react class-based components bi-pass this.
class DropZoneInput extends React.Component {
  constructor(...args) {
    super(...args);
    this.fileInputNode = /*#__PURE__*/React.createRef();

    this.triggerFileDialog = () => {
      this.open();
      this.props.onFileDialogClose && this.props.onFileDialogClose();
    };

    this.open = () => {
      if (!this.fileInputNode.current) return;
      this.fileInputNode.current.click();
    };
  }

  componentDidMount() {
    this.props.openFileDialog && this.triggerFileDialog();
  }

  componentDidUpdate() {
    this.props.openFileDialog && this.triggerFileDialog();
  }

  render() {
    var _this$props = this.props,
        inputProps = _objectWithoutProperties(_this$props, ["openFileDialog", "onFileDialogClose"]);

    return /*#__PURE__*/React__default.createElement("input", Object.assign({}, inputProps, {
      ref: this.fileInputNode,
      autoComplete: "off"
    }));
  }

}

const img$1 = "data:image/svg+xml,%3csvg width='60' height='60' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M41.87 24a17.87 17.87 0 11-35.74 0 17.87 17.87 0 0135.74 0zm-3.15 18.96a24 24 0 114.24-4.24L59.04 54.8a3 3 0 11-4.24 4.24L38.72 42.96z' fill='%238C9196'/%3e%3c/svg%3e";

function EmptySearchResult({
  title,
  description,
  withIllustration
}) {
  var i18n = useI18n();
  var altText = i18n.translate('Polaris.EmptySearchResult.altText');
  var descriptionMarkup = description ? /*#__PURE__*/React__default.createElement("p", null, description) : null;
  var illustrationMarkup = withIllustration ? /*#__PURE__*/React__default.createElement(Image, {
    alt: altText,
    source: img$1,
    draggable: false
  }) : null;
  return /*#__PURE__*/React__default.createElement(Stack, {
    alignment: "center",
    vertical: true
  }, illustrationMarkup, /*#__PURE__*/React__default.createElement(DisplayText, {
    size: "small"
  }, title), /*#__PURE__*/React__default.createElement(TextStyle, {
    variation: "subdued"
  }, descriptionMarkup));
}

var styles$P = {
  "EmptyState": "Polaris-EmptyState",
  "Section": "Polaris-EmptyState__Section",
  "ImageContainer": "Polaris-EmptyState__ImageContainer",
  "DetailsContainer": "Polaris-EmptyState__DetailsContainer",
  "newDesignLanguage": "Polaris-EmptyState--newDesignLanguage",
  "withinContentContainer": "Polaris-EmptyState--withinContentContainer",
  "Details": "Polaris-EmptyState__Details",
  "Image": "Polaris-EmptyState__Image",
  "Content": "Polaris-EmptyState__Content",
  "withinPage": "Polaris-EmptyState--withinPage",
  "imageContained": "Polaris-EmptyState--imageContained",
  "fullWidth": "Polaris-EmptyState--fullWidth",
  "Actions": "Polaris-EmptyState__Actions",
  "FooterContent": "Polaris-EmptyState__FooterContent"
};

function EmptyState({
  children,
  heading,
  image,
  largeImage,
  imageContained,
  fullWidth = false,
  action,
  secondaryAction,
  footerContent
}) {
  var withinContentContainer = React.useContext(WithinContentContext);
  var {
    newDesignLanguage = false
  } = useFeatures();
  var className = classNames(styles$P.EmptyState, fullWidth && styles$P.fullWidth, newDesignLanguage && styles$P.newDesignLanguage, imageContained && styles$P.imageContained, withinContentContainer ? styles$P.withinContentContainer : styles$P.withinPage);
  var imageMarkup = largeImage ? /*#__PURE__*/React__default.createElement(Image, {
    alt: "",
    role: "presentation",
    className: styles$P.Image,
    source: largeImage,
    sourceSet: [{
      source: image,
      descriptor: '568w'
    }, {
      source: largeImage,
      descriptor: '1136w'
    }],
    sizes: "(max-width: 568px) 60vw"
  }) : /*#__PURE__*/React__default.createElement(Image, {
    role: "presentation",
    alt: "",
    className: styles$P.Image,
    source: image
  });
  var secondaryActionMarkup = secondaryAction ? buttonFrom(secondaryAction, newDesignLanguage ? {} : {
    plain: true
  }) : null;
  var footerContentMarkup = footerContent ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$P.FooterContent
  }, /*#__PURE__*/React__default.createElement(TextContainer, null, footerContent)) : null;
  var headingSize = withinContentContainer ? 'small' : 'medium';
  var primaryActionSize = withinContentContainer || newDesignLanguage ? 'medium' : 'large';
  var primaryActionMarkup = action ? buttonFrom(action, {
    primary: true,
    size: primaryActionSize
  }) : null;
  var headingMarkup = heading ? /*#__PURE__*/React__default.createElement(DisplayText, {
    size: headingSize
  }, heading) : null;
  var childrenMarkup = children ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$P.Content
  }, children) : null;
  var textContentMarkup = headingMarkup || children ? /*#__PURE__*/React__default.createElement(TextContainer, null, headingMarkup, childrenMarkup) : null;
  var actionsMarkup = primaryActionMarkup || secondaryActionMarkup ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$P.Actions
  }, /*#__PURE__*/React__default.createElement(Stack, {
    alignment: "center",
    distribution: newDesignLanguage ? 'center' : undefined,
    spacing: newDesignLanguage ? 'tight' : undefined
  }, primaryActionMarkup, secondaryActionMarkup)) : null;
  var detailsMarkup = textContentMarkup || actionsMarkup || footerContentMarkup ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$P.DetailsContainer
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$P.Details
  }, textContentMarkup, actionsMarkup, footerContentMarkup)) : /*#__PURE__*/React__default.createElement("div", {
    className: styles$P.DetailsContainer
  });
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$P.Section
  }, detailsMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$P.ImageContainer
  }, imageMarkup)));
}

var styles$Q = {
  "Truncate": "Polaris-Truncate"
};

function Truncate({
  children
}) {
  return /*#__PURE__*/React__default.createElement("span", {
    className: styles$Q.Truncate
  }, children);
}

var styles$R = {
  "ExceptionList": "Polaris-ExceptionList",
  "Item": "Polaris-ExceptionList__Item",
  "Icon": "Polaris-ExceptionList__Icon",
  "statusWarning": "Polaris-ExceptionList--statusWarning",
  "statusCritical": "Polaris-ExceptionList--statusCritical",
  "Bullet": "Polaris-ExceptionList__Bullet",
  "Title": "Polaris-ExceptionList__Title",
  "Description": "Polaris-ExceptionList__Description"
};

function ExceptionList({
  items: itemsList
}) {
  var items = itemsList.map((item, index) => {
    var {
      status,
      icon,
      title,
      description,
      truncate = false
    } = item;
    var itemClasses = classNames(styles$R.Item, status && styles$R[variationName('status', status)]);
    var iconMarkup = icon ? /*#__PURE__*/React__default.createElement(Icon, {
      source: icon
    }) : /*#__PURE__*/React__default.createElement("span", {
      className: styles$R.Bullet
    });
    var titleMarkup = title && /*#__PURE__*/React__default.createElement("span", {
      className: styles$R.Title
    }, title);
    var descriptionMarkup = description && /*#__PURE__*/React__default.createElement("span", {
      className: styles$R.Description
    }, description);
    var Element = truncate ? Truncate : React.Fragment;
    return /*#__PURE__*/React__default.createElement("li", {
      className: itemClasses,
      key: index
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$R.Icon
    }, iconMarkup), /*#__PURE__*/React__default.createElement(Element, null, titleMarkup, descriptionMarkup));
  });
  return /*#__PURE__*/React__default.createElement("ul", {
    className: styles$R.ExceptionList
  }, items);
}

var ResourceListContext = /*#__PURE__*/React.createContext({});

var SELECT_ALL_ITEMS = 'All';

var styles$S = {
  "Tag": "Polaris-Tag",
  "disabled": "Polaris-Tag--disabled",
  "removable": "Polaris-Tag--removable",
  "clickable": "Polaris-Tag--clickable",
  "newDesignLanguage": "Polaris-Tag--newDesignLanguage",
  "TagText": "Polaris-Tag__TagText",
  "Button": "Polaris-Tag__Button"
};

var _ref$c = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.CancelSmallMinor
});

function Tag({
  children,
  disabled = false,
  onClick,
  onRemove
}) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles$S.Tag, disabled && styles$S.disabled, onClick && styles$S.clickable, onRemove && styles$S.removable, newDesignLanguage && styles$S.newDesignLanguage);
  var ariaLabel = i18n.translate('Polaris.Tag.ariaLabel', {
    children: children || ''
  });
  var buttonClassName = classNames(styles$S.Button, newDesignLanguage && styles$S.newDesignLanguage);
  var removeButton = onRemove ? /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    "aria-label": ariaLabel,
    className: buttonClassName,
    onClick: onRemove,
    onMouseUp: handleMouseUpByBlurring,
    disabled: disabled
  }, _ref$c) : null;
  var tagMarkup = onClick ? /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    disabled: disabled,
    className: className,
    onClick: onClick
  }, children) : /*#__PURE__*/React__default.createElement("span", {
    className: className
  }, /*#__PURE__*/React__default.createElement("span", {
    title: children,
    className: styles$S.TagText
  }, children), removeButton);
  return tagMarkup;
}

var Focus = /*#__PURE__*/React.memo(function Focus({
  children,
  disabled,
  root
}) {
  React.useEffect(() => {
    if (disabled || !root) {
      return;
    }

    var node = isRef(root) ? root.current : root;

    if (!node || node.querySelector('[autofocus]')) {
      return;
    }

    focusFirstFocusableNode(node, false);
  }, [disabled, root]);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children);
});

function isRef(ref) {
  return ref.current !== undefined;
}

function TrapFocus({
  trapping = true,
  children
}) {
  var [shouldFocusSelf, setFocusSelf] = React.useState(undefined);
  var {
    canSafelyFocus
  } = useFocusManager();
  var focusTrapWrapper = React.useRef(null);
  React.useEffect(() => {
    setFocusSelf(!(canSafelyFocus && focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)));
  }, [canSafelyFocus]);

  var shouldDisableFirstElementFocus = () => {
    if (shouldFocusSelf === undefined || !canSafelyFocus) {
      return true;
    }

    return shouldFocusSelf ? !trapping : !shouldFocusSelf;
  };

  var handleFocusIn = event => {
    var containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);

    if (trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus) {
      return;
    }

    if (canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target)) {
      focusFirstFocusableNode(focusTrapWrapper.current);
    }
  };

  var handleTab = event => {
    if (trapping === false || !focusTrapWrapper.current) {
      return;
    }

    var firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current);
    var lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);

    if (event.target === lastFocusableNode && !event.shiftKey) {
      event.preventDefault();
      focusFirstKeyboardFocusableNode(focusTrapWrapper.current);
    }

    if (event.target === firstFocusableNode && event.shiftKey) {
      event.preventDefault();
      focusLastKeyboardFocusableNode(focusTrapWrapper.current);
    }
  };

  return /*#__PURE__*/React__default.createElement(Focus, {
    disabled: shouldDisableFirstElementFocus(),
    root: focusTrapWrapper.current
  }, /*#__PURE__*/React__default.createElement("div", {
    ref: focusTrapWrapper
  }, /*#__PURE__*/React__default.createElement(EventListener, {
    event: "focusin",
    handler: handleFocusIn
  }), /*#__PURE__*/React__default.createElement(KeypressListener, {
    keyCode: exports.Key.Tab,
    keyEvent: "keydown",
    handler: handleTab
  }), children));
}

var styles$T = {
  "Sheet": "Polaris-Sheet",
  "Container": "Polaris-Sheet__Container",
  "Bottom": "Polaris-Sheet__Bottom",
  "enterBottom": "Polaris-Sheet--enterBottom",
  "enterBottomActive": "Polaris-Sheet--enterBottomActive",
  "exitBottom": "Polaris-Sheet--exitBottom",
  "exitBottomActive": "Polaris-Sheet--exitBottomActive",
  "Right": "Polaris-Sheet__Right",
  "enterRight": "Polaris-Sheet--enterRight",
  "enterRightActive": "Polaris-Sheet--enterRightActive",
  "exitRight": "Polaris-Sheet--exitRight",
  "exitRightActive": "Polaris-Sheet--exitRightActive"
};

var BOTTOM_CLASS_NAMES = {
  enter: classNames(styles$T.Bottom, styles$T.enterBottom),
  enterActive: classNames(styles$T.Bottom, styles$T.enterBottomActive),
  exit: classNames(styles$T.Bottom, styles$T.exitBottom),
  exitActive: classNames(styles$T.Bottom, styles$T.exitBottomActive)
};
var RIGHT_CLASS_NAMES = {
  enter: classNames(styles$T.Right, styles$T.enterRight),
  enterActive: classNames(styles$T.Right, styles$T.enterRightActive),
  exit: classNames(styles$T.Right, styles$T.exitRight),
  exitActive: classNames(styles$T.Right, styles$T.exitRightActive)
};
function Sheet({
  children,
  open,
  onClose,
  onEntered,
  onExit
}) {
  var {
    isNavigationCollapsed
  } = useMediaQuery();
  var container = React.useRef(null);
  return /*#__PURE__*/React__default.createElement(Portal, {
    idPrefix: "sheet"
  }, /*#__PURE__*/React__default.createElement(reactTransitionGroup.CSSTransition, {
    nodeRef: container,
    classNames: isNavigationCollapsed ? BOTTOM_CLASS_NAMES : RIGHT_CLASS_NAMES,
    timeout: tokens.durationSlow,
    in: open,
    mountOnEnter: true,
    unmountOnExit: true,
    onEntered: onEntered,
    onExit: onExit
  }, /*#__PURE__*/React__default.createElement("div", Object.assign({
    className: styles$T.Container
  }, layer.props, overlay.props, {
    ref: container
  }), /*#__PURE__*/React__default.createElement(TrapFocus, {
    trapping: open
  }, /*#__PURE__*/React__default.createElement("div", {
    role: "dialog",
    tabIndex: -1,
    className: styles$T.Sheet
  }, children)))), /*#__PURE__*/React__default.createElement(KeypressListener, {
    keyCode: exports.Key.Escape,
    handler: onClose
  }), open && /*#__PURE__*/React__default.createElement(Backdrop, {
    transparent: true,
    onClick: onClose
  }));
}

var styles$U = {
  "Item": "Polaris-Filters-ConnectedFilterControl__Item",
  "Item-focused": "Polaris-Filters-ConnectedFilterControl__Item--focused",
  "ProxyButtonContainer": "Polaris-Filters-ConnectedFilterControl__ProxyButtonContainer",
  "ConnectedFilterControl": "Polaris-Filters-ConnectedFilterControl",
  "CenterContainer": "Polaris-Filters-ConnectedFilterControl__CenterContainer",
  "right": "Polaris-Filters-ConnectedFilterControl--right",
  "newDesignLanguage": "Polaris-Filters-ConnectedFilterControl--newDesignLanguage",
  "RightContainer": "Polaris-Filters-ConnectedFilterControl__RightContainer",
  "RightContainerWithoutMoreFilters": "Polaris-Filters-ConnectedFilterControl__RightContainerWithoutMoreFilters",
  "MoreFiltersButtonContainer": "Polaris-Filters-ConnectedFilterControl__MoreFiltersButtonContainer",
  "onlyButtonVisible": "Polaris-Filters-ConnectedFilterControl--onlyButtonVisible",
  "Wrapper": "Polaris-Filters-ConnectedFilterControl__Wrapper",
  "AuxiliaryContainer": "Polaris-Filters-ConnectedFilterControl__AuxiliaryContainer"
};

class Item$4 extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      focused: false
    };

    this.handleBlur = () => {
      this.setState({
        focused: false
      });
    };

    this.handleFocus = () => {
      this.setState({
        focused: true
      });
    };
  }

  render() {
    var {
      focused
    } = this.state;
    var {
      children
    } = this.props;
    var className = classNames(styles$U.Item, focused && styles$U['Item-focused']);
    return /*#__PURE__*/React__default.createElement("div", {
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      className: className
    }, children);
  }

}

var FILTER_FIELD_MIN_WIDTH = 150;
class ConnectedFilterControl extends React.Component {
  constructor(...args) {
    super(...args);
    this.context = void 0;
    this.state = {
      availableWidth: 0,
      proxyButtonsWidth: {}
    };
    this.container = /*#__PURE__*/React.createRef();
    this.proxyButtonContainer = /*#__PURE__*/React.createRef();
    this.moreFiltersButtonContainer = /*#__PURE__*/React.createRef();
    this.handleResize = debounce(() => {
      this.measureProxyButtons();
      this.measureAvailableWidth();
    }, 40, {
      leading: true,
      trailing: true,
      maxWait: 40
    });
  }

  componentDidMount() {
    this.handleResize();
  }

  render() {
    var {
      newDesignLanguage
    } = this.context || {};
    var {
      children,
      rightPopoverableActions,
      rightAction,
      auxiliary,
      forceShowMorefiltersButton = true
    } = this.props;
    var actionsToRender = rightPopoverableActions != null ? this.getActionsToRender(rightPopoverableActions) : [];
    var className = classNames(styles$U.ConnectedFilterControl, rightPopoverableActions && styles$U.right, newDesignLanguage && styles$U.newDesignLanguage);
    var shouldRenderMoreFiltersButton = forceShowMorefiltersButton || rightPopoverableActions && rightPopoverableActions.length !== actionsToRender.length;
    var RightContainerClassName = classNames(styles$U.RightContainer, !shouldRenderMoreFiltersButton && styles$U.RightContainerWithoutMoreFilters);
    var rightMarkup = actionsToRender.length > 0 ? /*#__PURE__*/React__default.createElement("div", {
      className: RightContainerClassName
    }, this.popoverFrom(actionsToRender)) : null;
    var moreFiltersButtonContainerClassname = classNames(styles$U.MoreFiltersButtonContainer, actionsToRender.length === 0 && newDesignLanguage && styles$U.onlyButtonVisible);
    var rightActionMarkup = rightAction ? /*#__PURE__*/React__default.createElement("div", {
      ref: this.moreFiltersButtonContainer,
      className: moreFiltersButtonContainerClassname
    }, shouldRenderMoreFiltersButton && /*#__PURE__*/React__default.createElement(Item$4, null, rightAction)) : null;
    var proxyButtonMarkup = rightPopoverableActions ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$U.ProxyButtonContainer,
      ref: this.proxyButtonContainer,
      "aria-hidden": true
    }, rightPopoverableActions.map(action => /*#__PURE__*/React__default.createElement("div", {
      key: action.key,
      "data-key": action.key
    }, this.activatorButtonFrom(action)))) : null;
    var auxMarkup = auxiliary ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$U.AuxiliaryContainer
    }, auxiliary) : null;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, proxyButtonMarkup, /*#__PURE__*/React__default.createElement("div", {
      className: styles$U.Wrapper
    }, /*#__PURE__*/React__default.createElement("div", {
      className: className,
      ref: this.container
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$U.CenterContainer
    }, /*#__PURE__*/React__default.createElement(Item$4, null, children)), rightMarkup, rightActionMarkup, /*#__PURE__*/React__default.createElement(EventListener, {
      event: "resize",
      handler: this.handleResize
    })), auxMarkup));
  }

  measureProxyButtons() {
    if (this.proxyButtonContainer.current) {
      var proxyButtonsWidth = {}; // this number is magical, but tweaking it solved the problem of items overlapping

      var tolerance = 78;

      if (this.proxyButtonContainer.current) {
        Array.from(this.proxyButtonContainer.current.children).forEach(element => {
          var buttonWidth = element.getBoundingClientRect().width + tolerance;
          var buttonKey = element instanceof HTMLElement && element.dataset.key;

          if (buttonKey) {
            proxyButtonsWidth[buttonKey] = buttonWidth;
          }
        });
      }

      this.setState({
        proxyButtonsWidth
      });
    }
  }

  measureAvailableWidth() {
    if (this.container.current && this.moreFiltersButtonContainer.current) {
      var containerWidth = this.container.current.getBoundingClientRect().width;
      var moreFiltersButtonWidth = this.moreFiltersButtonContainer.current.getBoundingClientRect().width;
      var filtersActionWidth = 0;
      var availableWidth = containerWidth - FILTER_FIELD_MIN_WIDTH - moreFiltersButtonWidth - filtersActionWidth;
      this.setState({
        availableWidth
      });
    }
  }

  getActionsToRender(actions) {
    var remainingWidth = this.state.availableWidth;
    var actionsToReturn = [];

    for (var i = 0; remainingWidth > 0 && i < actions.length; i++) {
      var action = actions[i];
      var actionWidth = this.state.proxyButtonsWidth[action.key];

      if (actionWidth <= remainingWidth) {
        actionsToReturn.push(action);
        remainingWidth -= actionWidth;
      } else {
        // When we can't fit an action, we break the loop.
        // The ones that didn't fit will be accessible through the "More filters" button
        break;
      }
    }

    return actionsToReturn;
  }

  activatorButtonFrom(action) {
    return /*#__PURE__*/React__default.createElement(Button, {
      onClick: action.onAction,
      disclosure: true,
      disabled: this.props.disabled || action.disabled,
      id: "Activator-".concat(action.key)
    }, action.content);
  }

  popoverFrom(actions) {
    return actions.map(action => {
      return /*#__PURE__*/React__default.createElement(Item$4, {
        key: action.key
      }, /*#__PURE__*/React__default.createElement(Popover, {
        active: action.popoverOpen,
        activator: this.activatorButtonFrom(action),
        onClose: action.onAction,
        preferredAlignment: "left",
        sectioned: true
      }, action.popoverContent));
    });
  }

}
ConnectedFilterControl.contextType = FeaturesContext;

var styles$V = {
  "Filters": "Polaris-Filters",
  "FiltersContainer": "Polaris-Filters__FiltersContainer",
  "FiltersContainerHeader": "Polaris-Filters__FiltersContainerHeader",
  "newDesignLanguage": "Polaris-Filters--newDesignLanguage",
  "FiltersDesktopContainerContent": "Polaris-Filters__FiltersDesktopContainerContent",
  "FiltersMobileContainerContent": "Polaris-Filters__FiltersMobileContainerContent",
  "FiltersContainerFooter": "Polaris-Filters__FiltersContainerFooter",
  "FiltersMobileContainerFooter": "Polaris-Filters__FiltersMobileContainerFooter",
  "EmptyFooterState": "Polaris-Filters__EmptyFooterState",
  "FilterTriggerContainer": "Polaris-Filters__FilterTriggerContainer",
  "FilterTrigger": "Polaris-Filters__FilterTrigger",
  "FilterTriggerTitle": "Polaris-Filters__FilterTriggerTitle",
  "AppliedFilterBadgeContainer": "Polaris-Filters__AppliedFilterBadgeContainer",
  "open": "Polaris-Filters--open",
  "FilterTriggerLabelContainer": "Polaris-Filters__FilterTriggerLabelContainer",
  "first": "Polaris-Filters--first",
  "last": "Polaris-Filters--last",
  "FilterNodeContainer": "Polaris-Filters__FilterNodeContainer",
  "SearchIcon": "Polaris-Filters__SearchIcon",
  "Backdrop": "Polaris-Filters__Backdrop",
  "HelpText": "Polaris-Filters__HelpText",
  "TagsContainer": "Polaris-Filters__TagsContainer"
};

var Suffix;

(function (Suffix) {
  Suffix["Filter"] = "Filter";
  Suffix["Shortcut"] = "Shortcut";
})(Suffix || (Suffix = {}));

var _ref$d = /*#__PURE__*/React__default.createElement(ScrollLock$1, null);

var _ref2$3 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.SearchMinor
});

class FiltersInner extends React.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      open: false,
      readyForFocus: false
    };
    this.moreFiltersButtonContainer = /*#__PURE__*/React.createRef();
    this.focusNode = /*#__PURE__*/React.createRef();

    this.closeFilters = () => {
      this.setState({
        open: false
      }, () => {
        if (this.moreFiltersButtonContainer.current) {
          focusFirstFocusableNode(this.moreFiltersButtonContainer.current, false);
        }
      });
    };

    this.toggleFilters = () => {
      if (this.state.open === true) {
        this.closeFilters();
      } else {
        this.openFilters();
      }
    };

    this.setReadyForFocus = newState => () => {
      this.setState({
        readyForFocus: newState
      });
    };
  }

  render() {
    var {
      filters,
      queryValue,
      onQueryBlur,
      onQueryChange,
      onQueryFocus,
      focused,
      onClearAll,
      appliedFilters,
      onQueryClear,
      queryPlaceholder,
      children,
      disabled = false,
      helpText,
      hideTags,
      features: {
        newDesignLanguage
      },
      i18n,
      mediaQuery: {
        isNavigationCollapsed
      }
    } = this.props;
    var {
      resourceName
    } = this.context;
    var {
      open,
      readyForFocus
    } = this.state;
    var backdropMarkup = open ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, _ref$d, /*#__PURE__*/React__default.createElement("div", {
      className: styles$V.Backdrop,
      onClick: this.closeFilters
    })) : null;
    var filtersContentMarkup = filters.map((filter, index) => {
      var filterIsOpen = this.state["".concat(filter.key).concat(Suffix.Filter)] === true;
      var icon = filterIsOpen ? polarisIcons.ChevronUpMinor : polarisIcons.ChevronDownMinor;
      var className = classNames(styles$V.FilterTriggerContainer, filterIsOpen && styles$V.open, index === 0 && styles$V.first, filters.length !== 1 && index === filters.length - 1 && styles$V.last);
      var appliedFilterContent = this.getAppliedFilterContent(filter.key);
      var appliedFilterBadgeMarkup = appliedFilterContent ? /*#__PURE__*/React__default.createElement("div", {
        className: styles$V.AppliedFilterBadgeContainer
      }, /*#__PURE__*/React__default.createElement(Badge, {
        size: "small",
        status: "new"
      }, appliedFilterContent)) : null;
      var collapsibleID = "".concat(filter.key, "Collapsible");
      var buttonClassName = classNames(styles$V.FilterTrigger, newDesignLanguage && styles$V.newDesignLanguage);
      return /*#__PURE__*/React__default.createElement("div", {
        key: filter.key,
        className: className
      }, /*#__PURE__*/React__default.createElement("button", {
        onClick: () => this.toggleFilter(filter.key),
        className: buttonClassName,
        id: "".concat(filter.key, "ToggleButton"),
        type: "button",
        "aria-controls": collapsibleID,
        "aria-expanded": filterIsOpen
      }, /*#__PURE__*/React__default.createElement("div", {
        className: styles$V.FilterTriggerLabelContainer
      }, /*#__PURE__*/React__default.createElement("h2", {
        className: styles$V.FilterTriggerTitle
      }, /*#__PURE__*/React__default.createElement(TextStyle, {
        variation: this.props.disabled || filter.disabled ? 'subdued' : undefined
      }, filter.label)), /*#__PURE__*/React__default.createElement("span", {
        className: styles$V.FilterTriggerIcon
      }, /*#__PURE__*/React__default.createElement(Icon, {
        source: icon,
        color: "inkLightest"
      }))), appliedFilterBadgeMarkup), /*#__PURE__*/React__default.createElement(Collapsible, {
        id: collapsibleID,
        open: filterIsOpen
      }, /*#__PURE__*/React__default.createElement("div", {
        className: styles$V.FilterNodeContainer
      }, /*#__PURE__*/React__default.createElement(Focus, {
        disabled: !filterIsOpen || !readyForFocus || !open,
        root: this.focusNode
      }, this.generateFilterMarkup(filter)))));
    });
    var appliedFiltersCount = appliedFilters ? appliedFilters.length : 0;
    var moreFiltersLabel = hideTags && appliedFiltersCount > 0 ? i18n.translate('Polaris.Filters.moreFiltersWithCount', {
      count: appliedFiltersCount
    }) : i18n.translate('Polaris.Filters.moreFilters');
    var rightActionMarkup = /*#__PURE__*/React__default.createElement("div", {
      ref: this.moreFiltersButtonContainer
    }, /*#__PURE__*/React__default.createElement(Button, {
      onClick: this.toggleFilters,
      disabled: disabled
    }, moreFiltersLabel));
    var filterResourceName = resourceName || {
      singular: i18n.translate('Polaris.ResourceList.defaultItemSingular'),
      plural: i18n.translate('Polaris.ResourceList.defaultItemPlural')
    };
    var transformedFilters = this.transformFilters(filters);
    var filtersControlMarkup = /*#__PURE__*/React__default.createElement(ConnectedFilterControl, {
      rightPopoverableActions: transformedFilters,
      rightAction: rightActionMarkup,
      auxiliary: children,
      disabled: disabled,
      forceShowMorefiltersButton: filters.length > transformedFilters.length
    }, /*#__PURE__*/React__default.createElement(TextField, {
      placeholder: queryPlaceholder || i18n.translate('Polaris.Filters.filter', {
        resourceName: filterResourceName.plural
      }),
      onChange: onQueryChange,
      onBlur: onQueryBlur,
      onFocus: onQueryFocus,
      value: queryValue,
      focused: focused,
      label: queryPlaceholder || i18n.translate('Polaris.Filters.filter', {
        resourceName: filterResourceName.plural
      }),
      labelHidden: true,
      prefix: /*#__PURE__*/React__default.createElement("span", {
        className: styles$V.SearchIcon
      }, _ref2$3),
      clearButton: true,
      onClearButtonClick: onQueryClear,
      disabled: disabled
    }));
    var filtersContainerHeaderClassname = classNames(styles$V.FiltersContainerHeader, newDesignLanguage && styles$V.newDesignLanguage);
    var filtersDesktopHeaderMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: filtersContainerHeaderClassname
    }, /*#__PURE__*/React__default.createElement(DisplayText, {
      size: "small"
    }, moreFiltersLabel), /*#__PURE__*/React__default.createElement(Button, {
      icon: polarisIcons.CancelSmallMinor,
      plain: true,
      accessibilityLabel: i18n.translate('Polaris.Filters.cancel'),
      onClick: this.closeFilters
    }));
    var filtersMobileHeaderMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: filtersContainerHeaderClassname
    }, /*#__PURE__*/React__default.createElement(Button, {
      icon: polarisIcons.CancelSmallMinor,
      plain: true,
      accessibilityLabel: i18n.translate('Polaris.Filters.cancel'),
      onClick: this.closeFilters
    }), /*#__PURE__*/React__default.createElement(DisplayText, {
      size: "small"
    }, moreFiltersLabel), /*#__PURE__*/React__default.createElement(Button, {
      onClick: this.closeFilters,
      primary: true
    }, i18n.translate('Polaris.Filters.done')));
    var filtersDesktopFooterClassname = classNames(styles$V.FiltersContainerFooter, newDesignLanguage && styles$V.newDesignLanguage);
    var filtersDesktopFooterMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: filtersDesktopFooterClassname
    }, /*#__PURE__*/React__default.createElement(Button, {
      onClick: onClearAll,
      disabled: !this.hasAppliedFilters()
    }, i18n.translate('Polaris.Filters.clearAllFilters')), /*#__PURE__*/React__default.createElement(Button, {
      onClick: this.closeFilters,
      primary: true
    }, i18n.translate('Polaris.Filters.done')));
    var filtersMobileFooterMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: styles$V.FiltersMobileContainerFooter
    }, this.hasAppliedFilters() ? /*#__PURE__*/React__default.createElement(Button, {
      onClick: onClearAll,
      fullWidth: true
    }, i18n.translate('Polaris.Filters.clearAllFilters')) : /*#__PURE__*/React__default.createElement("div", {
      className: styles$V.EmptyFooterState
    }, /*#__PURE__*/React__default.createElement(TextStyle, {
      variation: "subdued"
    }, /*#__PURE__*/React__default.createElement("p", null, i18n.translate('Polaris.Filters.noFiltersApplied')))));
    var tagsMarkup = !hideTags && appliedFilters && appliedFilters.length ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$V.TagsContainer
    }, appliedFilters.map(filter => {
      return /*#__PURE__*/React__default.createElement(Tag, {
        key: filter.key,
        onRemove: () => {
          filter.onRemove(filter.key);
        },
        disabled: disabled
      }, filter.label);
    })) : null;
    var filtersMobileContainerContentClassName = classNames(styles$V.FiltersMobileContainerContent, newDesignLanguage && styles$V.newDesignLanguage);
    var filtersDesktopContainerContentClassName = classNames(styles$V.FiltersDesktopContainerContent, newDesignLanguage && styles$V.newDesignLanguage);
    var filtersContainerMarkup = isNavigationCollapsed ? /*#__PURE__*/React__default.createElement(Sheet, {
      open: open,
      onClose: this.closeFilters,
      onEntered: this.setReadyForFocus(true),
      onExit: this.setReadyForFocus(false)
    }, filtersMobileHeaderMarkup, /*#__PURE__*/React__default.createElement(Scrollable, {
      className: filtersMobileContainerContentClassName,
      shadow: true
    }, filtersContentMarkup, filtersMobileFooterMarkup)) : /*#__PURE__*/React__default.createElement(Sheet, {
      open: open,
      onClose: this.closeFilters,
      onEntered: this.setReadyForFocus(true),
      onExit: this.setReadyForFocus(false)
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$V.FiltersContainer
    }, filtersDesktopHeaderMarkup, /*#__PURE__*/React__default.createElement(Scrollable, {
      className: filtersDesktopContainerContentClassName,
      shadow: true
    }, filtersContentMarkup), filtersDesktopFooterMarkup));
    var helpTextMarkup = helpText ? /*#__PURE__*/React__default.createElement("div", {
      id: "FiltersHelpText",
      className: styles$V.HelpText
    }, /*#__PURE__*/React__default.createElement(TextStyle, {
      variation: "subdued"
    }, helpText)) : null;
    return /*#__PURE__*/React__default.createElement("div", {
      className: styles$V.Filters
    }, filtersControlMarkup, filtersContainerMarkup, tagsMarkup, helpTextMarkup, backdropMarkup, /*#__PURE__*/React__default.createElement(KeypressListener, {
      keyCode: exports.Key.Escape,
      handler: this.closeFilters
    }));
  }

  hasAppliedFilters() {
    var {
      appliedFilters,
      queryValue
    } = this.props;
    var filtersApplied = Boolean(appliedFilters && appliedFilters.length > 0);
    var queryApplied = Boolean(queryValue && queryValue !== '');
    return filtersApplied || queryApplied;
  }

  getAppliedFilterContent(key) {
    var {
      appliedFilters
    } = this.props;

    if (!appliedFilters) {
      return undefined;
    }

    var filter = appliedFilters.find(filter => filter.key === key);
    return filter == null ? undefined : filter.label;
  }

  getAppliedFilterRemoveHandler(key) {
    var {
      appliedFilters
    } = this.props;

    if (!appliedFilters) {
      return undefined;
    }

    var filter = appliedFilters.find(filter => filter.key === key);
    return filter == null ? undefined : filter.onRemove;
  }

  openFilters() {
    this.setState({
      open: true
    });
  }

  openFilter(key) {
    this.setState({
      ["".concat(key).concat(Suffix.Filter)]: true
    });
  }

  closeFilter(key) {
    this.setState({
      ["".concat(key).concat(Suffix.Filter)]: false
    });
  }

  toggleFilter(key) {
    if (this.state["".concat(key).concat(Suffix.Filter)] === true) {
      this.closeFilter(key);
    } else {
      this.openFilter(key);
    }
  }

  openFilterShortcut(key) {
    this.setState({
      ["".concat(key).concat(Suffix.Shortcut)]: true
    });
  }

  closeFilterShortcut(key) {
    this.setState({
      ["".concat(key).concat(Suffix.Shortcut)]: false
    });
  }

  toggleFilterShortcut(key) {
    if (this.state["".concat(key).concat(Suffix.Shortcut)] === true) {
      this.closeFilterShortcut(key);
    } else {
      this.openFilterShortcut(key);
    }
  }

  transformFilters(filters) {
    var transformedActions = [];
    getShortcutFilters(filters).forEach(filter => {
      var {
        key,
        label,
        disabled
      } = filter;
      transformedActions.push({
        popoverContent: this.generateFilterMarkup(filter),
        popoverOpen: Boolean(this.state["".concat(key).concat(Suffix.Shortcut)]),
        key,
        content: label,
        disabled,
        onAction: () => this.toggleFilterShortcut(key)
      });
    });
    return transformedActions;
  }

  generateFilterMarkup(filter) {
    var i18n = this.props.i18n;
    var removeCallback = this.getAppliedFilterRemoveHandler(filter.key);
    var removeHandler = removeCallback == null ? undefined : () => {
      removeCallback(filter.key);
    };
    return /*#__PURE__*/React__default.createElement("div", {
      ref: this.focusNode
    }, /*#__PURE__*/React__default.createElement(Stack, {
      vertical: true,
      spacing: "tight"
    }, filter.filter, /*#__PURE__*/React__default.createElement(Button, {
      plain: true,
      disabled: removeHandler == null,
      onClick: removeHandler,
      accessibilityLabel: i18n.translate('Polaris.Filters.clearLabel', {
        filterName: filter.label
      })
    }, i18n.translate('Polaris.Filters.clear'))));
  }

}

FiltersInner.contextType = ResourceListContext;

function getShortcutFilters(filters) {
  return filters.filter(filter => filter.shortcut === true);
}

function Filters(props) {
  var i18n = useI18n();
  var mediaQuery = useMediaQuery();
  var features = useFeatures();
  return /*#__PURE__*/React__default.createElement(FiltersInner, Object.assign({}, props, {
    i18n: i18n,
    mediaQuery: mediaQuery,
    features: features
  }));
}

var styles$W = {
  "FooterHelp": "Polaris-FooterHelp",
  "Content": "Polaris-FooterHelp__Content",
  "newDesignLanguage": "Polaris-FooterHelp--newDesignLanguage",
  "Icon": "Polaris-FooterHelp__Icon",
  "Text": "Polaris-FooterHelp__Text"
};

function FooterHelp({
  children
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles$W.FooterHelp, newDesignLanguage && styles$W.newDesignLanguage);
  var iconProps = {
    source: newDesignLanguage ? polarisIcons.InfoMinor : polarisIcons.QuestionMarkMajorTwotone,
    color: newDesignLanguage ? 'highlight' : 'teal',
    backdrop: !newDesignLanguage
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$W.Content
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$W.Icon
  }, /*#__PURE__*/React__default.createElement(Icon, iconProps)), /*#__PURE__*/React__default.createElement("div", {
    className: styles$W.Text
  }, children)));
}

function Form({
  acceptCharset,
  action,
  autoComplete,
  children,
  encType,
  implicitSubmit = true,
  method = 'post',
  name,
  noValidate,
  preventDefault = true,
  target,
  onSubmit
}) {
  var i18n = useI18n();
  var handleSubmit = React.useCallback(event => {
    if (!preventDefault) {
      return;
    }

    event.preventDefault();
    onSubmit(event);
  }, [onSubmit, preventDefault]);
  var autoCompleteInputs = normalizeAutoComplete$1(autoComplete);
  var submitMarkup = implicitSubmit ? /*#__PURE__*/React__default.createElement(VisuallyHidden, null, /*#__PURE__*/React__default.createElement("button", {
    type: "submit",
    "aria-hidden": "true",
    tabIndex: -1
  }, i18n.translate('Polaris.Common.submit'))) : null;
  return /*#__PURE__*/React__default.createElement("form", {
    acceptCharset: acceptCharset,
    action: action,
    autoComplete: autoCompleteInputs,
    encType: encType,
    method: method,
    name: name,
    noValidate: noValidate,
    target: target,
    onSubmit: handleSubmit
  }, children, submitMarkup);
}

function normalizeAutoComplete$1(autoComplete) {
  if (autoComplete == null) {
    return autoComplete;
  }

  return autoComplete ? 'on' : 'off';
}

var styles$X = {
  "FormLayout": "Polaris-FormLayout",
  "Title": "Polaris-FormLayout__Title",
  "Items": "Polaris-FormLayout__Items",
  "HelpText": "Polaris-FormLayout__HelpText",
  "Item": "Polaris-FormLayout__Item",
  "grouped": "Polaris-FormLayout--grouped",
  "condensed": "Polaris-FormLayout--condensed"
};

function Item$5(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$X.Item
  }, props.children);
}

function Group({
  children,
  condensed,
  title,
  helpText
}) {
  var className = classNames(condensed ? styles$X.condensed : styles$X.grouped);
  var id = useUniqueId('FormLayoutGroup');
  var helpTextElement = null;
  var helpTextID;
  var titleElement = null;
  var titleID;

  if (helpText) {
    helpTextID = "".concat(id, "HelpText");
    helpTextElement = /*#__PURE__*/React__default.createElement("div", {
      id: helpTextID,
      className: styles$X.HelpText
    }, helpText);
  }

  if (title) {
    titleID = "".concat(id, "Title");
    titleElement = /*#__PURE__*/React__default.createElement("div", {
      id: titleID,
      className: styles$X.Title
    }, title);
  }

  var itemsMarkup = React.Children.map(children, child => wrapWithComponent(child, Item$5, {}));
  return /*#__PURE__*/React__default.createElement("div", {
    role: "group",
    className: className,
    "aria-labelledby": titleID,
    "aria-describedby": helpTextID
  }, titleElement, /*#__PURE__*/React__default.createElement("div", {
    className: styles$X.Items
  }, itemsMarkup), helpTextElement);
}

var FormLayout = /*#__PURE__*/React.memo(function FormLayout({
  children
}) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$X.FormLayout
  }, React.Children.map(children, wrapChildren));
});
FormLayout.Group = Group;

function wrapChildren(child, index) {
  if (isElementOfType(child, Group)) {
    return child;
  }

  var props = {
    key: index
  };
  return wrapWithComponent(child, Item$5, props);
}

function setRootProperty(name, value, node) {
  if (document == null) {
    return;
  }

  var styleNode = node && node instanceof HTMLElement ? node : document.documentElement;
  styleNode && styleNode.style.setProperty(name, value);
}

var styles$Y = {
  "Toast": "Polaris-Frame-Toast",
  "Action": "Polaris-Frame-Toast__Action",
  "error": "Polaris-Frame-Toast--error",
  "CloseButton": "Polaris-Frame-Toast__CloseButton"
};

var DEFAULT_TOAST_DURATION = 5000;
var DEFAULT_TOAST_DURATION_WITH_ACTION = 10000;

var _ref$e = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.MobileCancelMajorMonotone
});

function Toast({
  content,
  onDismiss,
  duration,
  error,
  action
}) {
  React.useEffect(() => {
    var timeoutDuration = duration || DEFAULT_TOAST_DURATION;

    if (action && !duration) {
      timeoutDuration = DEFAULT_TOAST_DURATION_WITH_ACTION;
    } else if (action && duration && duration < DEFAULT_TOAST_DURATION_WITH_ACTION) {
      // eslint-disable-next-line no-console
      console.log('Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.');
    }

    var timer = setTimeout(onDismiss, timeoutDuration);
    return () => {
      clearTimeout(timer);
    };
  }, [action, duration, onDismiss]);
  var dismissMarkup = /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: styles$Y.CloseButton,
    onClick: onDismiss
  }, _ref$e);
  var actionMarkup = action ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$Y.Action
  }, /*#__PURE__*/React__default.createElement(Button, {
    plain: true,
    monochrome: true,
    onClick: action.onAction
  }, action.content)) : null;
  var className = classNames(styles$Y.Toast, error && styles$Y.error);
  return /*#__PURE__*/React__default.createElement(ThemeProvider, {
    theme: {
      colorScheme: 'inverse'
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, /*#__PURE__*/React__default.createElement(KeypressListener, {
    keyCode: exports.Key.Escape,
    handler: onDismiss
  }), content, actionMarkup, dismissMarkup));
}

/**
 * A replacement for React's useCallback that'll allow for custom and deep compares.
 * @see {@link https://reactjs.org/docs/hooks-reference.html#usecallback}
 * @param callback Accepts a callback that's forwarded to React's useCallback
 * @param dependencies A dependency array similar to React's useCallback however it utilizes a deep compare
 * @param customCompare Opportunity to provide a custom compare function
 * @returns A memoized callback
 * @example
 * const Child = memo(function Child({onClick}) {
 *   console.log('Child has rendered.');
 *   return <button onClick={onClick}>Click me</button>;
 * });
 *
 * function ComponentExample() {
 *   const [timesClicked, setTimesClicked] = useState(0);
 *
 *   const handleClick = useDeepCallback(() => {
 *     setTimesClicked((timesClicked) => timesClicked + 1);
 *     // New reference every render
 *   }, [{}]);
 *
 *   return (
 *     <>
 *       <div>Times clicked: {timesClicked}</div>
 *       <Child onClick={handleClick} />
 *     </>
 *   );
 * }
 */

function useDeepCallback(callback, dependencies, customCompare) {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return React.useCallback(callback, useDeepCompareRef(dependencies, customCompare));
}

var styles$Z = {
  "ToastManager": "Polaris-Frame-ToastManager",
  "ToastWrapper": "Polaris-Frame-ToastManager__ToastWrapper",
  "ToastWrapper-enter": "Polaris-Frame-ToastManager__ToastWrapper--enter",
  "ToastWrapper-exit": "Polaris-Frame-ToastManager__ToastWrapper--exit",
  "ToastWrapper-enter-done": "Polaris-Frame-ToastManager--toastWrapperEnterDone"
};

var ToastManager = /*#__PURE__*/React.memo(function ToastManager({
  toastMessages
}) {
  var toastNodes = [];
  var updateToasts = useDeepCallback(() => {
    var targetInPos = 0;
    toastMessages.forEach((_, index) => {
      var currentToast = toastNodes[index];
      if (!currentToast.current) return;
      targetInPos += currentToast.current.clientHeight;
      currentToast.current.style.setProperty('--toast-translate-y-in', "-".concat(targetInPos, "px"));
      currentToast.current.style.setProperty('--toast-translate-y-out', "".concat(-targetInPos + 150, "px"));
    });
  }, [toastMessages, toastNodes]);
  useDeepEffect(() => {
    updateToasts(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [toastMessages]);
  var toastsMarkup = toastMessages.map((toast, index) => {
    var toastNode = /*#__PURE__*/React.createRef();
    toastNodes[index] = toastNode;
    return /*#__PURE__*/React__default.createElement(reactTransitionGroup.CSSTransition, {
      nodeRef: toastNodes[index],
      key: toast.id,
      timeout: {
        enter: 0,
        exit: 400
      },
      classNames: toastClasses
    }, /*#__PURE__*/React__default.createElement("div", {
      ref: toastNode
    }, /*#__PURE__*/React__default.createElement(Toast, toast)));
  });
  return /*#__PURE__*/React__default.createElement(Portal, {
    idPrefix: "toast-manager"
  }, /*#__PURE__*/React__default.createElement(EventListener, {
    event: "resize",
    handler: updateToasts
  }), /*#__PURE__*/React__default.createElement("div", {
    className: styles$Z.ToastManager,
    "aria-live": "polite"
  }, /*#__PURE__*/React__default.createElement(reactTransitionGroup.TransitionGroup, {
    component: null
  }, toastsMarkup)));
});
var toastClasses = {
  enter: classNames(styles$Z.ToastWrapper, styles$Z['ToastWrapper-enter']),
  enterDone: classNames(styles$Z.ToastWrapper, styles$Z['ToastWrapper-enter-done']),
  exit: classNames(styles$Z.ToastWrapper, styles$Z['ToastWrapper-exit'])
};

var styles$_ = {
  "Loading": "Polaris-Frame-Loading",
  "Level": "Polaris-Frame-Loading__Level"
};

var INITIAL_STEP = 10;
var STUCK_THRESHOLD = 99;
class Loading extends React.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      progress: 0,
      step: INITIAL_STEP,
      animation: null
    };
    this.ariaValuenow = debounce(() => {
      var {
        progress
      } = this.state;
      return Math.floor(progress / 10) * 10;
    }, 15);
  }

  componentDidMount() {
    this.increment();
  }

  componentWillUnmount() {
    var {
      animation
    } = this.state;

    if (animation != null) {
      cancelAnimationFrame(animation);
    }
  }

  render() {
    var {
      progress
    } = this.state;
    var customStyles = {
      transform: "scaleX(".concat(Math.floor(progress) / 100, ")")
    };
    var ariaValuenow = this.ariaValuenow();
    return /*#__PURE__*/React__default.createElement("div", {
      className: styles$_.Loading
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$_.Level,
      style: customStyles,
      "aria-valuenow": ariaValuenow,
      "aria-valuemin": 0,
      "aria-valuemax": 100,
      role: "progressbar"
    }));
  }

  increment() {
    var {
      progress,
      step
    } = this.state;

    if (progress >= STUCK_THRESHOLD) {
      return;
    }

    var animation = requestAnimationFrame(() => this.increment());
    this.setState({
      progress: Math.min(progress + step, 100),
      step: Math.pow(INITIAL_STEP, -(progress / 25)),
      animation
    });
  }

}

function isObject(value) {
  var type = typeof value;
  return value != null && (type === 'object' || type === 'function');
}

function pluckDeep(obj, key) {
  if (!obj) {
    return null;
  }

  var keys = Object.keys(obj);

  for (var currKey of keys) {
    if (currKey === key) {
      return obj[key];
    }

    if (isObject(obj[currKey])) {
      var plucked = pluckDeep(obj[currKey], key);

      if (plucked) {
        return plucked;
      }
    }
  }

  return null;
}

function getWidth(value = {}, defaultWidth = 0, key = 'width') {
  var width = typeof value === 'number' ? value : pluckDeep(value, key);
  return width ? "".concat(width, "px") : "".concat(defaultWidth, "px");
}

var styles$$ = {
  "Container": "Polaris-Modal-Dialog__Container",
  "Dialog": "Polaris-Modal-Dialog",
  "Modal": "Polaris-Modal-Dialog__Modal",
  "limitHeight": "Polaris-Modal-Dialog--limitHeight",
  "sizeLarge": "Polaris-Modal-Dialog--sizeLarge",
  "animateFadeUp": "Polaris-Modal-Dialog--animateFadeUp",
  "entering": "Polaris-Modal-Dialog--entering",
  "exiting": "Polaris-Modal-Dialog--exiting",
  "exited": "Polaris-Modal-Dialog--exited",
  "entered": "Polaris-Modal-Dialog--entered"
};

function Dialog(_ref) {
  var {
    instant,
    labelledBy,
    children,
    onClose,
    onExited,
    onEntered,
    large,
    limitHeight
  } = _ref,
      props = _objectWithoutProperties(_ref, ["instant", "labelledBy", "children", "onClose", "onExited", "onEntered", "large", "limitHeight"]);

  var containerNode = React.useRef(null);
  var classes = classNames(styles$$.Modal, large && styles$$.sizeLarge, limitHeight && styles$$.limitHeight);
  var TransitionChild = instant ? reactTransitionGroup.Transition : FadeUp;
  React.useEffect(() => {
    containerNode.current && !containerNode.current.contains(document.activeElement) && focusFirstFocusableNode(containerNode.current);
  }, []);
  return /*#__PURE__*/React__default.createElement(TransitionChild, Object.assign({}, props, {
    nodeRef: containerNode,
    mountOnEnter: true,
    unmountOnExit: true,
    timeout: tokens.durationBase,
    onEntered: onEntered,
    onExited: onExited
  }), /*#__PURE__*/React__default.createElement("div", {
    className: styles$$.Container,
    "data-polaris-layer": true,
    "data-polaris-overlay": true,
    ref: containerNode
  }, /*#__PURE__*/React__default.createElement(TrapFocus, null, /*#__PURE__*/React__default.createElement("div", {
    role: "dialog",
    "aria-labelledby": labelledBy,
    tabIndex: -1,
    className: styles$$.Dialog
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes
  }, /*#__PURE__*/React__default.createElement(KeypressListener, {
    keyCode: exports.Key.Escape,
    handler: onClose
  }), children)))));
}
var fadeUpClasses = {
  appear: classNames(styles$$.animateFadeUp, styles$$.entering),
  appearActive: classNames(styles$$.animateFadeUp, styles$$.entered),
  enter: classNames(styles$$.animateFadeUp, styles$$.entering),
  enterActive: classNames(styles$$.animateFadeUp, styles$$.entered),
  exit: classNames(styles$$.animateFadeUp, styles$$.exiting),
  exitActive: classNames(styles$$.animateFadeUp, styles$$.exited)
};

function FadeUp(_ref2) {
  var {
    children
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["children"]);

  return /*#__PURE__*/React__default.createElement(reactTransitionGroup.CSSTransition, Object.assign({}, props, {
    classNames: fadeUpClasses
  }), children);
}

var styles$10 = {
  "Footer": "Polaris-Modal-Footer",
  "FooterContent": "Polaris-Modal-Footer__FooterContent"
};

function Footer({
  primaryAction,
  secondaryActions,
  children
}) {
  var primaryActionButton = primaryAction && buttonsFrom(primaryAction, {
    primary: true
  }) || null;
  var secondaryActionButtons = secondaryActions && buttonsFrom(secondaryActions) || null;
  var actions = primaryActionButton || secondaryActionButtons ? /*#__PURE__*/React__default.createElement(ButtonGroup, null, secondaryActionButtons, primaryActionButton) : null;
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$10.Footer
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$10.FooterContent
  }, /*#__PURE__*/React__default.createElement(Stack, {
    alignment: "center"
  }, /*#__PURE__*/React__default.createElement(Stack.Item, {
    fill: true
  }, children), actions)));
}

var styles$11 = {
  "CloseButton": "Polaris-Modal-CloseButton",
  "withoutTitle": "Polaris-Modal-CloseButton--withoutTitle"
};

var _ref$f = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.MobileCancelMajorMonotone,
  color: "inkLighter"
});

function CloseButton({
  title = true,
  onClick
}) {
  var i18n = useI18n();
  var className = classNames(styles$11.CloseButton, !title && styles$11.withoutTitle);
  return /*#__PURE__*/React__default.createElement("button", {
    onClick: onClick,
    className: className,
    "aria-label": i18n.translate('Polaris.Common.close')
  }, _ref$f);
}

var styles$12 = {
  "Header": "Polaris-Modal-Header",
  "Title": "Polaris-Modal-Header__Title"
};

function Header$1({
  id,
  children,
  onClose
}) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$12.Header
  }, /*#__PURE__*/React__default.createElement("div", {
    id: id,
    className: styles$12.Title
  }, /*#__PURE__*/React__default.createElement(DisplayText, {
    element: "h2",
    size: "small"
  }, children)), /*#__PURE__*/React__default.createElement(CloseButton, {
    onClick: onClose
  }));
}

var styles$13 = {
  "Section": "Polaris-Modal-Section",
  "subdued": "Polaris-Modal-Section--subdued",
  "flush": "Polaris-Modal-Section--flush"
};

function Section$3({
  children,
  flush = false,
  subdued = false
}) {
  var className = classNames(styles$13.Section, flush && styles$13.flush, subdued && styles$13.subdued);
  return /*#__PURE__*/React__default.createElement("section", {
    className: className
  }, children);
}

var styles$14 = {
  "BodyWrapper": "Polaris-Modal__BodyWrapper",
  "Body": "Polaris-Modal__Body",
  "IFrame": "Polaris-Modal__IFrame",
  "Spinner": "Polaris-Modal__Spinner"
};

var IFRAME_LOADING_HEIGHT = 200;
var DEFAULT_IFRAME_CONTENT_HEIGHT = 400;

var _ref$g = /*#__PURE__*/React__default.createElement(Spinner, null);

var _ref2$4 = /*#__PURE__*/React__default.createElement(Backdrop, null);

var Modal = function Modal({
  children,
  title,
  src,
  iFrameName,
  open,
  instant,
  sectioned,
  loading,
  large,
  limitHeight,
  footer,
  primaryAction,
  secondaryActions,
  onScrolledToBottom,
  activator,
  onClose,
  onIFrameLoad,
  onTransitionEnd
}) {
  var [iframeHeight, setIframeHeight] = React.useState(IFRAME_LOADING_HEIGHT);
  var headerId = useUniqueId('modal-header');
  var activatorRef = React.useRef(null);
  var i18n = useI18n();
  var iframeTitle = i18n.translate('Polaris.Modal.iFrameTitle');
  var dialog;
  var backdrop;
  var handleEntered = React.useCallback(() => {
    if (onTransitionEnd) {
      onTransitionEnd();
    }
  }, [onTransitionEnd]);
  var handleExited = React.useCallback(() => {
    setIframeHeight(IFRAME_LOADING_HEIGHT);
    var activatorElement = activatorRef.current;

    if (activatorElement) {
      requestAnimationFrame(() => focusFirstFocusableNode(activatorElement));
    }
  }, []);
  var handleIFrameLoad = React.useCallback(evt => {
    var iframe = evt.target;

    if (iframe && iframe.contentWindow) {
      try {
        setIframeHeight(iframe.contentWindow.document.body.scrollHeight);
      } catch (_unused) {
        setIframeHeight(DEFAULT_IFRAME_CONTENT_HEIGHT);
      }
    }

    if (onIFrameLoad != null) {
      onIFrameLoad(evt);
    }
  }, [onIFrameLoad]);

  if (open) {
    var footerMarkup = !footer && !primaryAction && !secondaryActions ? null : /*#__PURE__*/React__default.createElement(Footer, {
      primaryAction: primaryAction,
      secondaryActions: secondaryActions
    }, footer);
    var content = sectioned ? wrapWithComponent(children, Section$3, {}) : children;
    var body = loading ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$14.Spinner
    }, _ref$g) : content;
    var bodyMarkup = src ? /*#__PURE__*/React__default.createElement("iframe", {
      name: iFrameName,
      title: iframeTitle,
      src: src,
      className: styles$14.IFrame,
      onLoad: handleIFrameLoad,
      style: {
        height: "".concat(iframeHeight, "px")
      }
    }) : /*#__PURE__*/React__default.createElement(Scrollable, {
      shadow: true,
      className: styles$14.Body,
      onScrolledToBottom: onScrolledToBottom
    }, body);
    var headerMarkup = title ? /*#__PURE__*/React__default.createElement(Header$1, {
      id: headerId,
      onClose: onClose
    }, title) : /*#__PURE__*/React__default.createElement(CloseButton, {
      onClick: onClose,
      title: false
    });
    var labelledBy = title ? headerId : undefined;
    dialog = /*#__PURE__*/React__default.createElement(Dialog, {
      instant: instant,
      labelledBy: labelledBy,
      onClose: onClose,
      onEntered: handleEntered,
      onExited: handleExited,
      large: large,
      limitHeight: limitHeight
    }, headerMarkup, /*#__PURE__*/React__default.createElement("div", {
      className: styles$14.BodyWrapper
    }, bodyMarkup), footerMarkup);
    backdrop = _ref2$4;
  }

  var animated = !instant;
  return /*#__PURE__*/React__default.createElement(WithinContentContext.Provider, {
    value: true
  }, activator && /*#__PURE__*/React__default.createElement("div", {
    ref: activatorRef
  }, activator), /*#__PURE__*/React__default.createElement(Portal, {
    idPrefix: "modal"
  }, /*#__PURE__*/React__default.createElement(reactTransitionGroup.TransitionGroup, {
    appear: animated,
    enter: animated,
    exit: animated
  }, dialog), backdrop));
};
Modal.Section = Section$3;

function DiscardConfirmationModal({
  open,
  onDiscard,
  onCancel
}) {
  var i18n = useI18n();
  return /*#__PURE__*/React__default.createElement(Modal, {
    title: i18n.translate('Polaris.DiscardConfirmationModal.title'),
    open: open,
    onClose: onCancel,
    primaryAction: {
      content: i18n.translate('Polaris.DiscardConfirmationModal.primaryAction'),
      destructive: true,
      onAction: onDiscard
    },
    secondaryActions: [{
      content: i18n.translate('Polaris.DiscardConfirmationModal.secondaryAction'),
      onAction: onCancel
    }],
    sectioned: true
  }, i18n.translate('Polaris.DiscardConfirmationModal.message'));
}

var styles$15 = {
  "ContextualSaveBar": "Polaris-Frame-ContextualSaveBar",
  "LogoContainer": "Polaris-Frame-ContextualSaveBar__LogoContainer",
  "Contents": "Polaris-Frame-ContextualSaveBar__Contents",
  "fullWidth": "Polaris-Frame-ContextualSaveBar--fullWidth",
  "Message": "Polaris-Frame-ContextualSaveBar__Message",
  "ActionContainer": "Polaris-Frame-ContextualSaveBar__ActionContainer",
  "Action": "Polaris-Frame-ContextualSaveBar__Action",
  "newDesignLanguage": "Polaris-Frame-ContextualSaveBar--newDesignLanguage"
};

function ContextualSaveBar$1({
  alignContentFlush,
  message,
  saveAction,
  discardAction,
  fullWidth
}) {
  var i18n = useI18n();
  var {
    logo
  } = useTheme();
  var {
    newDesignLanguage = false
  } = useFeatures();
  var {
    value: discardConfirmationModalVisible,
    toggle: toggleDiscardConfirmationModal,
    setFalse: closeDiscardConfirmationModal
  } = useToggle(false);
  var handleDiscardAction = React.useCallback(() => {
    if (discardAction && discardAction.onAction) {
      discardAction.onAction();
    }

    closeDiscardConfirmationModal();
  }, [closeDiscardConfirmationModal, discardAction]);
  var discardActionContent = discardAction && discardAction.content ? discardAction.content : i18n.translate('Polaris.ContextualSaveBar.discard');
  var discardActionHandler;

  if (discardAction && discardAction.discardConfirmationModal) {
    discardActionHandler = toggleDiscardConfirmationModal;
  } else if (discardAction) {
    discardActionHandler = discardAction.onAction;
  }

  var discardConfirmationModalMarkup = discardAction && discardAction.onAction && discardAction.discardConfirmationModal && /*#__PURE__*/React__default.createElement(DiscardConfirmationModal, {
    open: discardConfirmationModalVisible,
    onCancel: toggleDiscardConfirmationModal,
    onDiscard: handleDiscardAction
  });
  var discardActionMarkup = discardAction && /*#__PURE__*/React__default.createElement(Button, {
    url: discardAction.url,
    onClick: discardActionHandler,
    loading: discardAction.loading,
    disabled: discardAction.disabled,
    accessibilityLabel: discardAction.content
  }, discardActionContent);
  var saveActionContent = saveAction && saveAction.content ? saveAction.content : i18n.translate('Polaris.ContextualSaveBar.save');
  var saveActionMarkup = saveAction && /*#__PURE__*/React__default.createElement(Button, {
    primary: true,
    url: saveAction.url,
    onClick: saveAction.onAction,
    loading: saveAction.loading,
    disabled: saveAction.disabled,
    accessibilityLabel: saveAction.content
  }, saveActionContent);
  var width = getWidth(logo, 104);
  var imageMarkup = logo && /*#__PURE__*/React__default.createElement(Image, {
    style: {
      width
    },
    source: logo.contextualSaveBarSource || '',
    alt: ""
  });
  var logoMarkup = alignContentFlush ? null : /*#__PURE__*/React__default.createElement("div", {
    className: styles$15.LogoContainer,
    style: {
      width
    }
  }, imageMarkup);
  var contexualSaveBarClassName = classNames(styles$15.ContextualSaveBar, newDesignLanguage && styles$15.newDesignLanguage);
  var contentsClassName = classNames(styles$15.Contents, fullWidth && styles$15.fullWidth);
  return /*#__PURE__*/React__default.createElement(ThemeProvider, {
    theme: {
      colorScheme: 'inverse'
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: contexualSaveBarClassName
  }, logoMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: contentsClassName
  }, /*#__PURE__*/React__default.createElement("h2", {
    className: styles$15.Message
  }, message), /*#__PURE__*/React__default.createElement("div", {
    className: styles$15.ActionContainer
  }, /*#__PURE__*/React__default.createElement(Stack, {
    spacing: "tight",
    wrap: false
  }, discardActionMarkup, saveActionMarkup)))), discardConfirmationModalMarkup);
}

var styles$16 = {
  "startFade": "Polaris-Frame-CSSAnimation--startFade",
  "endFade": "Polaris-Frame-CSSAnimation--endFade",
  "startFadeUp": "Polaris-Frame-CSSAnimation--startFadeUp",
  "endFadeUp": "Polaris-Frame-CSSAnimation--endFadeUp"
};

var TransitionStatus$1;

(function (TransitionStatus) {
  TransitionStatus["Entering"] = "entering";
  TransitionStatus["Entered"] = "entered";
  TransitionStatus["Exiting"] = "exiting";
  TransitionStatus["Exited"] = "exited";
})(TransitionStatus$1 || (TransitionStatus$1 = {}));

function CSSAnimation({
  in: inProp,
  className,
  type,
  children
}) {
  var [transitionStatus, setTransitionStatus] = React.useState(inProp ? TransitionStatus$1.Entering : TransitionStatus$1.Exited);
  var isMounted = React.useRef(false);
  var node = React.useRef(null);
  React.useEffect(() => {
    if (!isMounted.current) return;
    transitionStatus === TransitionStatus$1.Entering && changeTransitionStatus(TransitionStatus$1.Entered);
  }, [transitionStatus]);
  React.useEffect(() => {
    if (!isMounted.current) return;
    inProp && changeTransitionStatus(TransitionStatus$1.Entering);
    !inProp && changeTransitionStatus(TransitionStatus$1.Exiting);
  }, [inProp]);
  React.useEffect(() => {
    isMounted.current = true;
  }, []);
  var wrapperClassName = classNames(className, styles$16[variationName('start', type)], inProp && styles$16[variationName('end', type)]);
  var content = transitionStatus === TransitionStatus$1.Exited && !inProp ? null : children;
  return /*#__PURE__*/React__default.createElement("div", {
    className: wrapperClassName,
    ref: node,
    onTransitionEnd: handleTransitionEnd
  }, content);

  function handleTransitionEnd() {
    transitionStatus === TransitionStatus$1.Exiting && changeTransitionStatus(TransitionStatus$1.Exited);
  }

  function changeTransitionStatus(transitionStatus) {
    setTransitionStatus(transitionStatus); // Forcing a reflow to enable the animation

    if (transitionStatus === TransitionStatus$1.Entering) node.current && node.current.getBoundingClientRect();
  }
}

var styles$17 = {
  "Frame": "Polaris-Frame",
  "Navigation": "Polaris-Frame__Navigation",
  "hasTopBar": "Polaris-Frame--hasTopBar",
  "Navigation-enter": "Polaris-Frame__Navigation--enter",
  "Navigation-enterActive": "Polaris-Frame__Navigation--enterActive",
  "Navigation-exit": "Polaris-Frame__Navigation--exit",
  "Navigation-exitActive": "Polaris-Frame__Navigation--exitActive",
  "NavigationDismiss": "Polaris-Frame__NavigationDismiss",
  "Navigation-visible": "Polaris-Frame__Navigation--visible",
  "Navigation-newDesignLanguage": "Polaris-Frame__Navigation--newDesignLanguage",
  "TopBar": "Polaris-Frame__TopBar",
  "ContextualSaveBar": "Polaris-Frame__ContextualSaveBar",
  "Main": "Polaris-Frame__Main",
  "hasNav": "Polaris-Frame--hasNav",
  "Main-newDesignLanguage": "Polaris-Frame__Main--newDesignLanguage",
  "Content": "Polaris-Frame__Content",
  "GlobalRibbonContainer": "Polaris-Frame__GlobalRibbonContainer",
  "LoadingBar": "Polaris-Frame__LoadingBar",
  "Skip": "Polaris-Frame__Skip",
  "focused": "Polaris-Frame--focused",
  "SkipAnchor": "Polaris-Frame__SkipAnchor",
  "newDesignLanguage": "Polaris-Frame--newDesignLanguage",
  "pressed": "Polaris-Frame--pressed"
};

var GLOBAL_RIBBON_CUSTOM_PROPERTY = '--global-ribbon-height';
var APP_FRAME_MAIN = 'AppFrameMain';
var APP_FRAME_MAIN_ANCHOR_TARGET = 'AppFrameMainContent';
var APP_FRAME_NAV = 'AppFrameNav';
var APP_FRAME_TOP_BAR = 'AppFrameTopBar';
var APP_FRAME_LOADING_BAR = 'AppFrameLoadingBar';

var _ref$h = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.MobileCancelMajorMonotone
});

var _ref2$5 = /*#__PURE__*/React__default.createElement(Loading, null);

class FrameInner extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      skipFocused: false,
      globalRibbonHeight: 0,
      loadingStack: 0,
      toastMessages: [],
      showContextualSaveBar: false
    };
    this.contextualSaveBar = null;
    this.globalRibbonContainer = null;
    this.navigationNode = /*#__PURE__*/React.createRef();
    this.skipToMainContentTargetNode = this.props.skipToContentTarget || /*#__PURE__*/React.createRef();

    this.setGlobalRibbonHeight = () => {
      var {
        globalRibbonContainer
      } = this;

      if (globalRibbonContainer) {
        this.setState({
          globalRibbonHeight: globalRibbonContainer.offsetHeight
        }, this.setGlobalRibbonRootProperty);
      }
    };

    this.setGlobalRibbonRootProperty = () => {
      var {
        globalRibbonHeight
      } = this.state;
      setRootProperty(GLOBAL_RIBBON_CUSTOM_PROPERTY, "".concat(globalRibbonHeight, "px"), null);
    };

    this.showToast = toast => {
      this.setState(({
        toastMessages
      }) => {
        var hasToastById = toastMessages.find(({
          id
        }) => id === toast.id) != null;
        return {
          toastMessages: hasToastById ? toastMessages : [...toastMessages, toast]
        };
      });
    };

    this.hideToast = ({
      id
    }) => {
      this.setState(({
        toastMessages
      }) => {
        return {
          toastMessages: toastMessages.filter(({
            id: toastId
          }) => id !== toastId)
        };
      });
    };

    this.setContextualSaveBar = props => {
      var {
        showContextualSaveBar
      } = this.state;
      this.contextualSaveBar = _objectSpread2({}, props);

      if (showContextualSaveBar === true) {
        this.forceUpdate();
      } else {
        this.setState({
          showContextualSaveBar: true
        });
      }
    };

    this.removeContextualSaveBar = () => {
      this.contextualSaveBar = null;
      this.setState({
        showContextualSaveBar: false
      });
    };

    this.startLoading = () => {
      this.setState(({
        loadingStack
      }) => ({
        loadingStack: loadingStack + 1
      }));
    };

    this.stopLoading = () => {
      this.setState(({
        loadingStack
      }) => ({
        loadingStack: Math.max(0, loadingStack - 1)
      }));
    };

    this.handleResize = () => {
      if (this.props.globalRibbon) {
        this.setGlobalRibbonHeight();
      }
    };

    this.handleFocus = () => {
      this.setState({
        skipFocused: true
      });
    };

    this.handleBlur = () => {
      this.setState({
        skipFocused: false
      });
    };

    this.handleClick = () => {
      this.skipToMainContentTargetNode.current && this.skipToMainContentTargetNode.current.focus();
    };

    this.handleNavigationDismiss = () => {
      var {
        onNavigationDismiss
      } = this.props;

      if (onNavigationDismiss != null) {
        onNavigationDismiss();
      }
    };

    this.setGlobalRibbonContainer = node => {
      this.globalRibbonContainer = node;
    };

    this.handleNavKeydown = event => {
      var {
        key
      } = event;
      var {
        mediaQuery: {
          isNavigationCollapsed
        },
        showMobileNavigation
      } = this.props;
      var mobileNavShowing = isNavigationCollapsed && showMobileNavigation;

      if (mobileNavShowing && key === 'Escape') {
        this.handleNavigationDismiss();
      }
    };
  }

  componentDidMount() {
    this.handleResize();

    if (this.props.globalRibbon) {
      return;
    }

    this.setGlobalRibbonRootProperty();
  }

  componentDidUpdate(prevProps) {
    if (this.props.globalRibbon !== prevProps.globalRibbon) {
      this.setGlobalRibbonHeight();
    }
  }

  render() {
    var {
      skipFocused,
      loadingStack,
      toastMessages,
      showContextualSaveBar
    } = this.state;
    var {
      children,
      navigation,
      topBar,
      globalRibbon,
      showMobileNavigation = false,
      skipToContentTarget,
      i18n,
      mediaQuery: {
        isNavigationCollapsed
      },
      features: {
        newDesignLanguage
      }
    } = this.props;
    var navClassName = classNames(styles$17.Navigation, showMobileNavigation && styles$17['Navigation-visible'], newDesignLanguage && styles$17['Navigation-newDesignLanguage']);
    var mobileNavHidden = isNavigationCollapsed && !showMobileNavigation;
    var mobileNavShowing = isNavigationCollapsed && showMobileNavigation;
    var tabIndex = mobileNavShowing ? 0 : -1;
    var navigationMarkup = navigation ? /*#__PURE__*/React__default.createElement(TrapFocus, {
      trapping: mobileNavShowing
    }, /*#__PURE__*/React__default.createElement(reactTransitionGroup.CSSTransition, {
      nodeRef: this.navigationNode,
      appear: isNavigationCollapsed,
      exit: isNavigationCollapsed,
      in: showMobileNavigation,
      timeout: tokens.durationSlow,
      classNames: navTransitionClasses
    }, /*#__PURE__*/React__default.createElement("div", {
      ref: this.navigationNode,
      className: navClassName,
      onKeyDown: this.handleNavKeydown,
      id: APP_FRAME_NAV,
      key: "NavContent",
      hidden: mobileNavHidden
    }, navigation, /*#__PURE__*/React__default.createElement("button", {
      type: "button",
      className: styles$17.NavigationDismiss,
      onClick: this.handleNavigationDismiss,
      "aria-hidden": mobileNavHidden || !isNavigationCollapsed && !showMobileNavigation,
      "aria-label": i18n.translate('Polaris.Frame.Navigation.closeMobileNavigationLabel'),
      tabIndex: tabIndex
    }, _ref$h)))) : null;
    var loadingMarkup = loadingStack > 0 ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$17.LoadingBar,
      id: APP_FRAME_LOADING_BAR
    }, _ref2$5) : null;
    var contextualSaveBarClassName = classNames(styles$17.ContextualSaveBar, newDesignLanguage && styles$17['ContextualSaveBar-newDesignLanguage']);
    var contextualSaveBarMarkup = /*#__PURE__*/React__default.createElement(CSSAnimation, {
      in: showContextualSaveBar,
      className: contextualSaveBarClassName,
      type: newDesignLanguage ? 'fadeUp' : 'fade'
    }, /*#__PURE__*/React__default.createElement(ContextualSaveBar$1, this.contextualSaveBar));
    var topBarClassName = classNames(styles$17.TopBar, newDesignLanguage && styles$17['TopBar-newDesignLanguage']);
    var topBarMarkup = topBar ? /*#__PURE__*/React__default.createElement("div", Object.assign({
      className: topBarClassName
    }, layer.props, dataPolarisTopBar.props, {
      id: APP_FRAME_TOP_BAR
    }), topBar) : null;
    var globalRibbonClassName = classNames(styles$17.GlobalRibbonContainer, newDesignLanguage && styles$17['GlobalRibbonContainer-newDesignLanguage']);
    var globalRibbonMarkup = globalRibbon ? /*#__PURE__*/React__default.createElement("div", {
      className: globalRibbonClassName,
      ref: this.setGlobalRibbonContainer
    }, globalRibbon) : null;
    var skipClassName = classNames(styles$17.Skip, skipFocused && styles$17.focused);
    var skipTarget = skipToContentTarget ? skipToContentTarget.current && skipToContentTarget.current.id || '' : APP_FRAME_MAIN_ANCHOR_TARGET;
    var skipMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: skipClassName
    }, /*#__PURE__*/React__default.createElement("a", {
      href: "#".concat(skipTarget),
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onClick: this.handleClick,
      className: styles$17.SkipAnchor
    }, i18n.translate('Polaris.Frame.skipToContent')));
    var navigationAttributes = navigation ? {
      'data-has-navigation': true
    } : {};
    var frameClassName = classNames(styles$17.Frame, navigation && styles$17.hasNav, topBar && styles$17.hasTopBar);
    var mainClassName = classNames(styles$17.Main, newDesignLanguage && styles$17['Main-newDesignLanguage']);
    var navigationOverlayMarkup = showMobileNavigation && isNavigationCollapsed ? /*#__PURE__*/React__default.createElement(Backdrop, {
      belowNavigation: true,
      onClick: this.handleNavigationDismiss,
      onTouchStart: this.handleNavigationDismiss
    }) : null;
    var skipToMainContentTarget = skipToContentTarget ? null :
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/anchor-is-valid
    React__default.createElement("a", {
      id: APP_FRAME_MAIN_ANCHOR_TARGET,
      ref: this.skipToMainContentTargetNode,
      tabIndex: -1
    });
    var context = {
      showToast: this.showToast,
      hideToast: this.hideToast,
      startLoading: this.startLoading,
      stopLoading: this.stopLoading,
      setContextualSaveBar: this.setContextualSaveBar,
      removeContextualSaveBar: this.removeContextualSaveBar
    };
    return /*#__PURE__*/React__default.createElement(FrameContext.Provider, {
      value: context
    }, /*#__PURE__*/React__default.createElement("div", Object.assign({
      className: frameClassName
    }, layer.props, navigationAttributes), skipMarkup, topBarMarkup, navigationMarkup, contextualSaveBarMarkup, loadingMarkup, navigationOverlayMarkup, /*#__PURE__*/React__default.createElement("main", {
      className: mainClassName,
      id: APP_FRAME_MAIN,
      "data-has-global-ribbon": Boolean(globalRibbon)
    }, skipToMainContentTarget, /*#__PURE__*/React__default.createElement("div", {
      className: styles$17.Content
    }, children)), /*#__PURE__*/React__default.createElement(ToastManager, {
      toastMessages: toastMessages
    }), globalRibbonMarkup, /*#__PURE__*/React__default.createElement(EventListener, {
      event: "resize",
      handler: this.handleResize
    })));
  }

}

var navTransitionClasses = {
  enter: classNames(styles$17['Navigation-enter']),
  enterActive: classNames(styles$17['Navigation-enterActive']),
  enterDone: classNames(styles$17['Navigation-enterActive']),
  exit: classNames(styles$17['Navigation-exit']),
  exitActive: classNames(styles$17['Navigation-exitActive'])
};
function Frame(props) {
  var i18n = useI18n();
  var mediaQuery = useMediaQuery();
  var features = useFeatures();
  return /*#__PURE__*/React__default.createElement(FrameInner, Object.assign({}, props, {
    i18n: i18n,
    mediaQuery: mediaQuery,
    features: features
  }));
}

var styles$18 = {
  "Indicator": "Polaris-Indicator",
  "pulseIndicator": "Polaris-Indicator--pulseIndicator",
  "bounce": "Polaris-Indicator--bounce",
  "pulse": "Polaris-Indicator--pulse"
};

function Indicator({
  pulse = true
}) {
  var className = classNames(styles$18.Indicator, pulse && styles$18.pulseIndicator);
  return /*#__PURE__*/React__default.createElement("span", {
    className: className
  });
}

var styles$19 = {
  "KeyboardKey": "Polaris-KeyboardKey"
};

function KeyboardKey({
  children
}) {
  var key = children || '';
  key = key.length > 1 ? key.toLowerCase() : key.toUpperCase();
  return /*#__PURE__*/React__default.createElement("kbd", {
    className: styles$19.KeyboardKey
  }, key);
}

var KONAMI_CODE = [exports.Key.UpArrow, exports.Key.UpArrow, exports.Key.DownArrow, exports.Key.DownArrow, exports.Key.LeftArrow, exports.Key.RightArrow, exports.Key.LeftArrow, exports.Key.RightArrow, exports.Key.KeyB, exports.Key.KeyA];
function KonamiCode({
  handler
}) {
  var keyEvent = 'keydown';
  var [position, setPosition] = React.useState(0);

  var handleKeyEvent = event => {
    var key = event.keyCode;
    var requiredKey = KONAMI_CODE[position];

    if (key === requiredKey) {
      if (position === KONAMI_CODE.length - 1) {
        handler(event);
        setPosition(0);
      } else {
        setPosition(position + 1);
      }
    } else {
      setPosition(0);
    }
  };

  React.useEffect(() => {
    document.addEventListener(keyEvent, handleKeyEvent);
    return () => {
      document.removeEventListener(keyEvent, handleKeyEvent);
    };
  });
  return null;
}

var styles$1a = {
  "Layout": "Polaris-Layout",
  "newDesignLanguage": "Polaris-Layout--newDesignLanguage",
  "Section": "Polaris-Layout__Section",
  "Section-secondary": "Polaris-Layout__Section--secondary",
  "Section-fullWidth": "Polaris-Layout__Section--fullWidth",
  "Section-oneHalf": "Polaris-Layout__Section--oneHalf",
  "Section-oneThird": "Polaris-Layout__Section--oneThird",
  "AnnotatedSection": "Polaris-Layout__AnnotatedSection",
  "AnnotationWrapper": "Polaris-Layout__AnnotationWrapper",
  "AnnotationContent": "Polaris-Layout__AnnotationContent",
  "Annotation": "Polaris-Layout__Annotation",
  "AnnotationDescription": "Polaris-Layout__AnnotationDescription"
};

function AnnotatedSection(props) {
  var {
    children,
    title,
    description
  } = props;
  var descriptionMarkup = typeof description === 'string' ? /*#__PURE__*/React__default.createElement("p", null, description) : description;
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1a.AnnotatedSection
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1a.AnnotationWrapper
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1a.Annotation
  }, /*#__PURE__*/React__default.createElement(TextContainer, null, /*#__PURE__*/React__default.createElement(Heading, null, title), descriptionMarkup && /*#__PURE__*/React__default.createElement("div", {
    className: styles$1a.AnnotationDescription
  }, descriptionMarkup))), /*#__PURE__*/React__default.createElement("div", {
    className: styles$1a.AnnotationContent
  }, children)));
}

function Section$4({
  children,
  secondary,
  fullWidth,
  oneHalf,
  oneThird
}) {
  var className = classNames(styles$1a.Section, secondary && styles$1a['Section-secondary'], fullWidth && styles$1a['Section-fullWidth'], oneHalf && styles$1a['Section-oneHalf'], oneThird && styles$1a['Section-oneThird']);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, children);
}

var Layout = function Layout({
  sectioned,
  children
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var content = sectioned ? /*#__PURE__*/React__default.createElement(Section$4, null, children) : children;
  var className = classNames(styles$1a.Layout, newDesignLanguage && styles$1a.newDesignLanguage);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, content);
};
Layout.AnnotatedSection = AnnotatedSection;
Layout.Section = Section$4;

var styles$1b = {
  "Link": "Polaris-Link",
  "newDesignLanguage": "Polaris-Link--newDesignLanguage",
  "IconLockup": "Polaris-Link__IconLockup",
  "IconLayout": "Polaris-Link__IconLayout",
  "monochrome": "Polaris-Link--monochrome"
};

function Link({
  url,
  children,
  onClick,
  external,
  id,
  monochrome
}) {
  var i18n = useI18n();
  var childrenMarkup = children;
  var {
    newDesignLanguage
  } = useFeatures();

  if (external && typeof children === 'string') {
    var iconLabel = i18n.translate('Polaris.Common.newWindowAccessibilityHint');
    childrenMarkup = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children, /*#__PURE__*/React__default.createElement("span", {
      className: styles$1b.IconLockup
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$1b.IconLayout
    }, /*#__PURE__*/React__default.createElement(Icon, {
      accessibilityLabel: iconLabel,
      source: polarisIcons.ExternalSmallMinor
    }))));
  }

  return /*#__PURE__*/React__default.createElement(BannerContext.Consumer, null, BannerContext => {
    var shouldBeMonochrome = monochrome || BannerContext;
    var className = classNames(styles$1b.Link, shouldBeMonochrome && styles$1b.monochrome, newDesignLanguage && styles$1b.newDesignLanguage);
    return url ? /*#__PURE__*/React__default.createElement(UnstyledLink, {
      onClick: onClick,
      className: className,
      url: url,
      external: external,
      id: id
    }, childrenMarkup) : /*#__PURE__*/React__default.createElement("button", {
      type: "button",
      onClick: onClick,
      className: className,
      id: id
    }, childrenMarkup);
  });
}

var styles$1c = {
  "List": "Polaris-List",
  "typeNumber": "Polaris-List--typeNumber",
  "Item": "Polaris-List__Item"
};

function Item$6({
  children
}) {
  return /*#__PURE__*/React__default.createElement("li", {
    className: styles$1c.Item
  }, children);
}

class List extends React.PureComponent {
  render() {
    var {
      children,
      type = 'bullet'
    } = this.props;
    var className = classNames(styles$1c.List, type && styles$1c[variationName('type', type)]);
    var ListElement = type === 'bullet' ? 'ul' : 'ol';
    return /*#__PURE__*/React__default.createElement(ListElement, {
      className: className
    }, children);
  }

}
List.Item = Item$6;

var Loading$1 = /*#__PURE__*/React.memo(function Loading() {
  var {
    startLoading,
    stopLoading
  } = useFrame();
  React.useEffect(() => {
    startLoading();
    return () => {
      stopLoading();
    };
  }, [startLoading, stopLoading]);
  return null;
});

var styles$1d = {
  "MediaCard": "Polaris-MediaCard",
  "portrait": "Polaris-MediaCard--portrait",
  "MediaContainer": "Polaris-MediaCard__MediaContainer",
  "sizeSmall": "Polaris-MediaCard--sizeSmall",
  "InfoContainer": "Polaris-MediaCard__InfoContainer",
  "Popover": "Polaris-MediaCard__Popover",
  "Heading": "Polaris-MediaCard__Heading",
  "PrimaryAction": "Polaris-MediaCard__PrimaryAction",
  "SecondaryAction": "Polaris-MediaCard__SecondaryAction",
  "ActionContainer": "Polaris-MediaCard__ActionContainer"
};

function MediaCard({
  title,
  children,
  primaryAction,
  secondaryAction,
  description,
  popoverActions = [],
  portrait = false,
  size = 'medium'
}) {
  var i18n = useI18n();
  var {
    value: popoverActive,
    toggle: togglePopoverActive
  } = useToggle(false);
  var popoverActivator = /*#__PURE__*/React__default.createElement(Button, {
    icon: polarisIcons.HorizontalDotsMinor,
    onClick: togglePopoverActive,
    size: "slim",
    plain: true,
    accessibilityLabel: i18n.translate('Polaris.MediaCard.popoverButton')
  });
  var popoverActionsMarkup = popoverActions.length > 0 ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1d.Popover
  }, /*#__PURE__*/React__default.createElement(Popover, {
    active: popoverActive,
    activator: popoverActivator,
    onClose: togglePopoverActive,
    preferredAlignment: "left",
    preferredPosition: "below"
  }, /*#__PURE__*/React__default.createElement(ActionList, {
    items: popoverActions,
    onActionAnyItem: togglePopoverActive
  }))) : null;
  var primaryActionMarkup = /*#__PURE__*/React__default.createElement("div", {
    className: styles$1d.PrimaryAction
  }, buttonFrom(primaryAction));
  var secondaryActionMarkup = secondaryAction ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1d.SecondaryAction
  }, buttonFrom(secondaryAction, {
    plain: true
  })) : null;
  var actionClassName = classNames(styles$1d.ActionContainer, portrait && styles$1d.portrait);
  var actionMarkup = /*#__PURE__*/React__default.createElement("div", {
    className: actionClassName
  }, /*#__PURE__*/React__default.createElement(ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup));
  var mediaCardClassName = classNames(styles$1d.MediaCard, portrait && styles$1d.portrait);
  var mediaContainerClassName = classNames(styles$1d.MediaContainer, portrait && styles$1d.portrait, size === 'small' && styles$1d.sizeSmall);
  var infoContainerClassName = classNames(styles$1d.InfoContainer, portrait && styles$1d.portrait, size === 'small' && styles$1d.sizeSmall);
  return /*#__PURE__*/React__default.createElement(Card, null, /*#__PURE__*/React__default.createElement("div", {
    className: mediaCardClassName
  }, /*#__PURE__*/React__default.createElement("div", {
    className: mediaContainerClassName
  }, children), /*#__PURE__*/React__default.createElement("div", {
    className: infoContainerClassName
  }, /*#__PURE__*/React__default.createElement(Card.Section, null, popoverActionsMarkup, /*#__PURE__*/React__default.createElement(Stack, {
    vertical: true,
    spacing: "tight"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1d.Heading
  }, /*#__PURE__*/React__default.createElement(Heading, null, title)), /*#__PURE__*/React__default.createElement("p", {
    className: styles$1d.Description
  }, description), actionMarkup)))));
}

var NavigationContext = /*#__PURE__*/React.createContext({
  location: ''
});

var styles$1e = {
  "Navigation": "Polaris-Navigation",
  "Navigation-newDesignLanguage": "Polaris-Navigation__Navigation--newDesignLanguage",
  "UserMenu": "Polaris-Navigation__UserMenu",
  "ContextControl": "Polaris-Navigation__ContextControl",
  "PrimaryNavigation": "Polaris-Navigation__PrimaryNavigation",
  "LogoContainer": "Polaris-Navigation__LogoContainer",
  "Logo": "Polaris-Navigation__Logo",
  "LogoLink": "Polaris-Navigation__LogoLink",
  "Item": "Polaris-Navigation__Item",
  "Icon": "Polaris-Navigation__Icon",
  "keyFocused": "Polaris-Navigation--keyFocused",
  "Item-selected": "Polaris-Navigation__Item--selected",
  "Item-disabled": "Polaris-Navigation__Item--disabled",
  "Badge": "Polaris-Navigation__Badge",
  "subNavigationActive": "Polaris-Navigation--subNavigationActive",
  "ListItem": "Polaris-Navigation__ListItem",
  "RollupSection": "Polaris-Navigation__RollupSection",
  "SecondaryNavigation": "Polaris-Navigation__SecondaryNavigation",
  "fade-in": "Polaris-Navigation__fade--in",
  "ListItem-hasAction": "Polaris-Navigation__ListItem--hasAction",
  "ItemWrapper": "Polaris-Navigation__ItemWrapper",
  "Text": "Polaris-Navigation__Text",
  "SecondaryAction": "Polaris-Navigation__SecondaryAction",
  "List": "Polaris-Navigation__List",
  "SecondaryNavigation-noIcon": "Polaris-Navigation__SecondaryNavigation--noIcon",
  "Section": "Polaris-Navigation__Section",
  "Section-fill": "Polaris-Navigation__Section--fill",
  "Section-withSeparator": "Polaris-Navigation__Section--withSeparator",
  "SectionHeading": "Polaris-Navigation__SectionHeading",
  "Action": "Polaris-Navigation__Action",
  "RollupToggle": "Polaris-Navigation__RollupToggle",
  "Indicator": "Polaris-Navigation__Indicator"
};

function Secondary({
  children,
  expanded
}) {
  var id = useUniqueId('SecondaryNavigation');
  return /*#__PURE__*/React__default.createElement(Collapsible, {
    id: id,
    open: expanded
  }, /*#__PURE__*/React__default.createElement("ul", {
    className: styles$1e.List
  }, children));
}

var MatchState;

(function (MatchState) {
  MatchState[MatchState["MatchForced"] = 0] = "MatchForced";
  MatchState[MatchState["MatchUrl"] = 1] = "MatchUrl";
  MatchState[MatchState["MatchPaths"] = 2] = "MatchPaths";
  MatchState[MatchState["Excluded"] = 3] = "Excluded";
  MatchState[MatchState["NoMatch"] = 4] = "NoMatch";
})(MatchState || (MatchState = {}));

var _ref$i = /*#__PURE__*/React__default.createElement(Indicator, {
  pulse: true
});

function Item$7({
  url,
  icon,
  label,
  subNavigationItems = [],
  secondaryAction,
  disabled,
  onClick,
  accessibilityLabel,
  selected: selectedOverride,
  badge,
  new: isNew,
  matches,
  exactMatch,
  matchPaths,
  excludePaths
}) {
  var i18n = useI18n();
  var {
    isNavigationCollapsed
  } = useMediaQuery();
  var {
    location,
    onNavigationDismiss
  } = React.useContext(NavigationContext);
  var [expanded, setExpanded] = React.useState(false);
  var [keyFocused, setKeyFocused] = React.useState(false);
  React.useEffect(() => {
    if (!isNavigationCollapsed && expanded) {
      setExpanded(false);
    }
  }, [expanded, isNavigationCollapsed]);
  var handleKeyUp = React.useCallback(event => {
    if (event.keyCode === exports.Key.Tab) {
      !keyFocused && setKeyFocused(true);
    }
  }, [keyFocused]);
  var handleBlur = React.useCallback(() => {
    keyFocused && setKeyFocused(false);
  }, [keyFocused]);
  var tabIndex = disabled ? -1 : 0;
  var hasNewChild = subNavigationItems.filter(subNavigationItem => subNavigationItem.new).length > 0;
  var indicatorMarkup = hasNewChild ? /*#__PURE__*/React__default.createElement("span", {
    className: styles$1e.Indicator
  }, _ref$i) : null;
  var iconMarkup = icon ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1e.Icon
  }, /*#__PURE__*/React__default.createElement(Icon, {
    source: icon
  })) : null;
  var badgeMarkup = null;

  if (isNew) {
    badgeMarkup = /*#__PURE__*/React__default.createElement(Badge, {
      status: "new",
      size: "small"
    }, i18n.translate('Polaris.Badge.STATUS_LABELS.new'));
  } else if (typeof badge === 'string') {
    badgeMarkup = /*#__PURE__*/React__default.createElement(Badge, {
      status: "new",
      size: "small"
    }, badge);
  } else {
    badgeMarkup = badge;
  }

  var wrappedBadgeMarkup = badgeMarkup == null ? null : /*#__PURE__*/React__default.createElement("div", {
    className: styles$1e.Badge
  }, badgeMarkup);
  var itemContentMarkup = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, iconMarkup, /*#__PURE__*/React__default.createElement("span", {
    className: styles$1e.Text
  }, label, indicatorMarkup), wrappedBadgeMarkup);

  if (url == null) {
    var _className = classNames(styles$1e.Item, disabled && styles$1e['Item-disabled'], keyFocused && styles$1e.keyFocused);

    return /*#__PURE__*/React__default.createElement("li", {
      className: styles$1e.ListItem
    }, /*#__PURE__*/React__default.createElement("button", {
      type: "button",
      className: _className,
      disabled: disabled,
      "aria-disabled": disabled,
      "aria-label": accessibilityLabel,
      onClick: getClickHandler(onClick),
      onKeyUp: handleKeyUp,
      onBlur: handleBlur
    }, itemContentMarkup));
  }

  var secondaryActionMarkup = secondaryAction && /*#__PURE__*/React__default.createElement(UnstyledLink, {
    external: true,
    url: secondaryAction.url,
    className: styles$1e.SecondaryAction,
    tabIndex: tabIndex,
    "aria-disabled": disabled,
    "aria-label": secondaryAction.accessibilityLabel
  }, /*#__PURE__*/React__default.createElement(Icon, {
    source: secondaryAction.icon
  }));
  var matchState = matchStateForItem({
    url,
    matches,
    exactMatch,
    matchPaths,
    excludePaths
  }, location);
  var matchingSubNavigationItems = subNavigationItems.filter(item => {
    var subMatchState = matchStateForItem(item, location);
    return subMatchState === MatchState.MatchForced || subMatchState === MatchState.MatchUrl || subMatchState === MatchState.MatchPaths;
  });
  var childIsActive = matchingSubNavigationItems.length > 0;
  var selected = selectedOverride == null ? matchState === MatchState.MatchForced || matchState === MatchState.MatchUrl || matchState === MatchState.MatchPaths : selectedOverride;
  var showExpanded = selected || expanded || childIsActive;
  var itemClassName = classNames(styles$1e.Item, disabled && styles$1e['Item-disabled'], selected && subNavigationItems.length === 0 && styles$1e['Item-selected'], showExpanded && styles$1e.subNavigationActive, keyFocused && styles$1e.keyFocused);
  var secondaryNavigationMarkup = null;

  if (subNavigationItems.length > 0 && showExpanded) {
    var longestMatch = matchingSubNavigationItems.sort(({
      url: firstUrl
    }, {
      url: secondUrl
    }) => secondUrl.length - firstUrl.length)[0];
    var SecondaryNavigationClassName = classNames(styles$1e.SecondaryNavigation, !icon && styles$1e['SecondaryNavigation-noIcon']);
    secondaryNavigationMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: SecondaryNavigationClassName
    }, /*#__PURE__*/React__default.createElement(Secondary, {
      expanded: showExpanded
    }, subNavigationItems.map(item => {
      var {
        label
      } = item,
          rest = _objectWithoutProperties(item, ["label"]);

      return /*#__PURE__*/React__default.createElement(Item$7, Object.assign({}, rest, {
        key: label,
        label: label,
        matches: item === longestMatch,
        onClick: onNavigationDismiss
      }));
    })));
  }

  var className = classNames(styles$1e.ListItem, secondaryAction && styles$1e['ListItem-hasAction']);
  return /*#__PURE__*/React__default.createElement("li", {
    className: className
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1e.ItemWrapper
  }, /*#__PURE__*/React__default.createElement(UnstyledLink, {
    url: url,
    className: itemClassName,
    tabIndex: tabIndex,
    "aria-disabled": disabled,
    "aria-label": accessibilityLabel,
    onClick: getClickHandler(onClick),
    onKeyUp: handleKeyUp,
    onBlur: handleBlur
  }, itemContentMarkup), secondaryActionMarkup), secondaryNavigationMarkup);

  function getClickHandler(onClick) {
    return event => {
      var {
        currentTarget
      } = event;

      if (currentTarget.getAttribute('href') === location) {
        event.preventDefault();
      }

      if (subNavigationItems && subNavigationItems.length > 0 && isNavigationCollapsed) {
        event.preventDefault();
        setExpanded(!expanded);
      } else if (onNavigationDismiss) {
        onNavigationDismiss();

        if (onClick && onClick !== onNavigationDismiss) {
          onClick();
        }

        return;
      }

      if (onClick) {
        onClick();
      }
    };
  }
}
function isNavigationItemActive(navigationItem, currentPath) {
  var matchState = matchStateForItem(navigationItem, currentPath);
  var matchingSubNavigationItems = navigationItem.subNavigationItems && navigationItem.subNavigationItems.filter(item => {
    var subMatchState = matchStateForItem(item, currentPath);
    return subMatchState === MatchState.MatchForced || subMatchState === MatchState.MatchUrl || subMatchState === MatchState.MatchPaths;
  });
  var childIsActive = matchingSubNavigationItems && matchingSubNavigationItems.length > 0;
  var selected = matchState === MatchState.MatchForced || matchState === MatchState.MatchUrl || matchState === MatchState.MatchPaths;
  return selected || childIsActive;
}

function normalizePathname(pathname) {
  var barePathname = pathname.split('?')[0].split('#')[0];
  return barePathname.endsWith('/') ? barePathname : "".concat(barePathname, "/");
}

function safeEqual(location, path) {
  return normalizePathname(location) === normalizePathname(path);
}

function safeStartsWith(location, path) {
  return normalizePathname(location).startsWith(normalizePathname(path));
}

function matchStateForItem({
  url,
  matches,
  exactMatch,
  matchPaths,
  excludePaths
}, location) {
  if (url == null) {
    return MatchState.NoMatch;
  }

  if (matches) {
    return MatchState.MatchForced;
  }

  if (matches === false || excludePaths && excludePaths.some(path => safeStartsWith(location, path))) {
    return MatchState.Excluded;
  }

  if (matchPaths && matchPaths.some(path => safeStartsWith(location, path))) {
    return MatchState.MatchPaths;
  }

  var matchesUrl = exactMatch ? safeEqual(location, url) : safeStartsWith(location, url);
  return matchesUrl ? MatchState.MatchUrl : MatchState.NoMatch;
}

var _ref$j = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.HorizontalDotsMinor
});

function Section$5({
  title,
  fill,
  action,
  items,
  rollup,
  separator
}) {
  var {
    value: expanded,
    toggle: toggleExpanded,
    setFalse: setExpandedFalse
  } = useToggle(false);
  var animationFrame = React.useRef(null);

  var handleClick = (onClick, hasSubNavItems) => {
    return () => {
      if (onClick) {
        onClick();
      }

      if (animationFrame.current) {
        cancelAnimationFrame(animationFrame.current);
      }

      if (!hasSubNavItems || !navigationBarCollapsed().matches) {
        animationFrame.current = requestAnimationFrame(setExpandedFalse);
      }
    };
  };

  React.useEffect(() => {
    return () => {
      animationFrame.current && cancelAnimationFrame(animationFrame.current);
    };
  });
  var className = classNames(styles$1e.Section, separator && styles$1e['Section-withSeparator'], fill && styles$1e['Section-fill']);
  var actionMarkup = action && /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: styles$1e.Action,
    "aria-label": action.accessibilityLabel,
    onClick: action.onClick
  }, /*#__PURE__*/React__default.createElement(Icon, {
    source: action.icon
  }));
  var sectionHeadingMarkup = title && /*#__PURE__*/React__default.createElement("li", {
    className: styles$1e.SectionHeading
  }, /*#__PURE__*/React__default.createElement("span", {
    className: styles$1e.Text
  }, title), actionMarkup);
  var itemsMarkup = items.map(item => {
    var {
      onClick,
      label,
      subNavigationItems
    } = item,
        rest = _objectWithoutProperties(item, ["onClick", "label", "subNavigationItems"]);

    var hasSubNavItems = subNavigationItems != null && subNavigationItems.length > 0;
    return /*#__PURE__*/React__default.createElement(Item$7, Object.assign({}, rest, {
      key: label,
      label: label,
      subNavigationItems: subNavigationItems,
      onClick: handleClick(onClick, hasSubNavItems)
    }));
  });
  var toggleClassName = classNames(styles$1e.Item, styles$1e.RollupToggle);
  var ariaLabel = rollup && (expanded ? rollup.hide : rollup.view);
  var toggleRollup = rollup && items.length > rollup.after && /*#__PURE__*/React__default.createElement("div", {
    className: styles$1e.ListItem,
    key: "List Item"
  }, /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: toggleClassName,
    onClick: toggleExpanded,
    "aria-label": ariaLabel
  }, /*#__PURE__*/React__default.createElement("span", {
    className: styles$1e.Icon
  }, _ref$j)));
  var activeItemIndex = items.findIndex(item => {
    if (!rollup) {
      return false;
    }

    return rollup.activePath === item.url || item.url && rollup.activePath.startsWith(item.url) || (item.subNavigationItems ? item.subNavigationItems.some(({
      url: itemUrl
    }) => rollup.activePath.startsWith(itemUrl)) : false);
  });
  var sectionItems = rollup ? itemsMarkup.slice(0, rollup.after) : itemsMarkup;
  var additionalItems = rollup ? itemsMarkup.slice(rollup.after) : [];

  if (rollup && activeItemIndex !== -1 && activeItemIndex > rollup.after - 1) {
    sectionItems.push(...additionalItems.splice(activeItemIndex - rollup.after, 1));
  }

  var additionalItemsId = useUniqueId('AdditionalItems');
  var activeItemsMarkup = rollup && additionalItems.length > 0 && /*#__PURE__*/React__default.createElement("li", {
    className: styles$1e.RollupSection
  }, /*#__PURE__*/React__default.createElement(Collapsible, {
    id: additionalItemsId,
    open: expanded
  }, /*#__PURE__*/React__default.createElement("ul", {
    className: styles$1e.List
  }, additionalItems)), toggleRollup);
  return /*#__PURE__*/React__default.createElement("ul", {
    className: className
  }, sectionHeadingMarkup, sectionItems, activeItemsMarkup);
}

var Navigation$1 = function Navigation({
  children,
  contextControl,
  location,
  onDismiss
}) {
  var {
    logo
  } = useTheme();
  var {
    newDesignLanguage
  } = useFeatures();
  var width = getWidth(logo, 104);
  var logoMarkup = logo ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1e.LogoContainer
  }, /*#__PURE__*/React__default.createElement(UnstyledLink, {
    url: logo.url || '',
    className: styles$1e.LogoLink,
    style: {
      width
    }
  }, /*#__PURE__*/React__default.createElement(Image, {
    source: logo.topBarSource || '',
    alt: logo.accessibilityLabel || '',
    className: styles$1e.Logo,
    style: {
      width
    }
  }))) : null;
  var mediaMarkup = contextControl ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1e.ContextControl
  }, contextControl) : logoMarkup;
  var className = classNames(styles$1e.Navigation, newDesignLanguage && styles$1e['Navigation-newDesignLanguage']);
  var context = {
    location,
    onNavigationDismiss: onDismiss
  };
  return /*#__PURE__*/React__default.createElement(NavigationContext.Provider, {
    value: context
  }, /*#__PURE__*/React__default.createElement(WithinContentContext.Provider, {
    value: true
  }, /*#__PURE__*/React__default.createElement("nav", {
    className: className
  }, mediaMarkup, /*#__PURE__*/React__default.createElement(Scrollable, {
    className: styles$1e.PrimaryNavigation
  }, children))));
};
Navigation$1.Item = Item$7;
Navigation$1.Section = Section$5;

var EditableTarget;

(function (EditableTarget) {
  EditableTarget["Input"] = "INPUT";
  EditableTarget["Textarea"] = "TEXTAREA";
  EditableTarget["Select"] = "SELECT";
  EditableTarget["ContentEditable"] = "contenteditable";
})(EditableTarget || (EditableTarget = {}));

function isInputFocused() {
  if (document == null || document.activeElement == null) {
    return false;
  }

  var {
    tagName
  } = document.activeElement;
  return tagName === EditableTarget.Input || tagName === EditableTarget.Textarea || tagName === EditableTarget.Select || document.activeElement.hasAttribute(EditableTarget.ContentEditable);
}

var styles$1f = {
  "Tooltip": "Polaris-Tooltip",
  "measuring": "Polaris-Tooltip--measuring",
  "positionedAbove": "Polaris-Tooltip--positionedAbove",
  "light": "Polaris-Tooltip--light",
  "Wrapper": "Polaris-Tooltip__Wrapper",
  "Content": "Polaris-Tooltip__Content",
  "Label": "Polaris-Tooltip__Label"
};

class TooltipOverlay extends React.PureComponent {
  constructor(...args) {
    super(...args);

    this.renderOverlay = () => {
      var {
        active,
        activator,
        preferredPosition = 'below',
        preventInteraction
      } = this.props;
      return /*#__PURE__*/React__default.createElement(PositionedOverlay, {
        active: active,
        activator: activator,
        preferredPosition: preferredPosition,
        preventInteraction: preventInteraction,
        render: this.renderTooltip
      });
    };

    this.renderTooltip = overlayDetails => {
      var {
        measuring,
        desiredHeight,
        positioning
      } = overlayDetails;
      var {
        id,
        children,
        light
      } = this.props;
      var containerClassName = classNames(styles$1f.Tooltip, light && styles$1f.light, measuring && styles$1f.measuring, positioning === 'above' && styles$1f.positionedAbove);
      var contentStyles = measuring ? undefined : {
        minHeight: desiredHeight
      };
      return /*#__PURE__*/React__default.createElement("div", Object.assign({
        className: containerClassName
      }, layer.props), /*#__PURE__*/React__default.createElement("div", {
        className: styles$1f.Wrapper
      }, /*#__PURE__*/React__default.createElement("div", {
        id: id,
        role: "tooltip",
        className: styles$1f.Content,
        style: contentStyles
      }, children)));
    };
  }

  render() {
    var markup = this.props.active ? this.renderOverlay() : null;
    return markup;
  } // eslint-disable-next-line @shopify/react-no-multiple-render-methods


}

function Tooltip({
  children,
  content,
  light,
  dismissOnMouseOut,
  active: originalActive,
  preferredPosition = 'below',
  activatorWrapper = 'span'
}) {
  var WrapperComponent = activatorWrapper;
  var {
    value: active,
    setTrue: handleFocus,
    setFalse: handleBlur
  } = useToggle(Boolean(originalActive));
  var [activatorNode, setActivatorNode] = React.useState(null);
  var id = useUniqueId('TooltipContent');
  var activatorContainer = React.useRef(null);
  var mouseEntered = React.useRef(false);
  React.useEffect(() => {
    var firstFocusable = activatorContainer.current ? findFirstFocusableNode(activatorContainer.current) : null;
    var accessibilityNode = firstFocusable || activatorContainer.current;
    if (!accessibilityNode) return;
    accessibilityNode.tabIndex = 0;
    accessibilityNode.setAttribute('aria-describedby', id);
  }, [id, children]);
  var portal = activatorNode ? /*#__PURE__*/React__default.createElement(Portal, {
    idPrefix: "tooltip"
  }, /*#__PURE__*/React__default.createElement(TooltipOverlay, {
    id: id,
    preferredPosition: preferredPosition,
    activator: activatorNode,
    active: active,
    onClose: noop$7,
    light: light,
    preventInteraction: dismissOnMouseOut
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1f.Label
  }, content))) : null;
  return /*#__PURE__*/React__default.createElement(WrapperComponent, {
    onFocus: handleFocus,
    onBlur: handleBlur,
    onMouseLeave: handleMouseLeave,
    onMouseOver: handleMouseEnterFix,
    ref: setActivator
  }, children, portal);

  function setActivator(node) {
    var activatorContainerRef = activatorContainer;

    if (node == null) {
      activatorContainerRef.current = null;
      setActivatorNode(null);
      return;
    }

    node.firstElementChild instanceof HTMLElement && setActivatorNode(node.firstElementChild);
    activatorContainerRef.current = node;
  }

  function handleMouseEnter() {
    mouseEntered.current = true;
    handleFocus();
  }

  function handleMouseLeave() {
    mouseEntered.current = false;
    handleBlur();
  } // https://github.com/facebook/react/issues/10109
  // Mouseenter event not triggered when cursor moves from disabled button


  function handleMouseEnterFix() {
    !mouseEntered.current && handleMouseEnter();
  }
}

function noop$7() {}

var styles$1g = {
  "Pagination": "Polaris-Pagination",
  "plain": "Polaris-Pagination--plain",
  "Button": "Polaris-Pagination__Button",
  "newDesignLanguage": "Polaris-Pagination--newDesignLanguage",
  "PreviousButton": "Polaris-Pagination__PreviousButton",
  "NextButton": "Polaris-Pagination__NextButton",
  "Label": "Polaris-Pagination__Label"
};

var _ref$k = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.ArrowLeftMinor
});

var _ref2$6 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.ArrowLeftMinor
});

var _ref3$1 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.ArrowRightMinor
});

var _ref4 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.ArrowRightMinor
});

function Pagination({
  hasNext,
  hasPrevious,
  nextURL,
  previousURL,
  onNext,
  onPrevious,
  nextTooltip,
  previousTooltip,
  nextKeys,
  previousKeys,
  plain,
  accessibilityLabel,
  label
}) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var node = /*#__PURE__*/React.createRef();
  var navLabel = accessibilityLabel || i18n.translate('Polaris.Pagination.pagination');
  var className = classNames(styles$1g.Pagination, plain && styles$1g.plain);
  var previousClassName = classNames(styles$1g.Button, !label && styles$1g.PreviousButton);
  var nextClassName = classNames(styles$1g.Button, !label && styles$1g.NextButton);
  var previousButton = previousURL ? /*#__PURE__*/React__default.createElement(UnstyledLink, {
    className: previousClassName,
    url: previousURL,
    onMouseUp: handleMouseUpByBlurring,
    "aria-label": i18n.translate('Polaris.Pagination.previous'),
    id: "previousURL"
  }, _ref$k) : /*#__PURE__*/React__default.createElement("button", {
    onClick: onPrevious,
    type: "button",
    onMouseUp: handleMouseUpByBlurring,
    className: previousClassName,
    "aria-label": i18n.translate('Polaris.Pagination.previous'),
    disabled: !hasPrevious
  }, _ref2$6);
  var nextButton = nextURL ? /*#__PURE__*/React__default.createElement(UnstyledLink, {
    className: nextClassName,
    url: nextURL,
    onMouseUp: handleMouseUpByBlurring,
    "aria-label": i18n.translate('Polaris.Pagination.next'),
    id: "nextURL"
  }, _ref3$1) : /*#__PURE__*/React__default.createElement("button", {
    onClick: onNext,
    type: "button",
    onMouseUp: handleMouseUpByBlurring,
    className: nextClassName,
    "aria-label": i18n.translate('Polaris.Pagination.next'),
    disabled: !hasNext
  }, _ref4);
  var prev = newDesignLanguage ? /*#__PURE__*/React__default.createElement(Button, {
    icon: polarisIcons.ChevronLeftMinor,
    accessibilityLabel: i18n.translate('Polaris.Pagination.previous'),
    url: previousURL,
    onClick: onPrevious,
    disabled: !hasPrevious
  }) : previousButton;
  var constructedPrevious = previousTooltip && hasPrevious ? /*#__PURE__*/React__default.createElement(Tooltip, {
    activatorWrapper: "span",
    content: previousTooltip
  }, prev) : prev;
  var next = newDesignLanguage ? /*#__PURE__*/React__default.createElement(Button, {
    icon: polarisIcons.ChevronRightMinor,
    accessibilityLabel: i18n.translate('Polaris.Pagination.next'),
    url: nextURL,
    onClick: onNext,
    disabled: !hasNext
  }) : nextButton;
  var constructedNext = nextTooltip && hasNext ? /*#__PURE__*/React__default.createElement(Tooltip, {
    activatorWrapper: "span",
    content: nextTooltip
  }, next) : next;
  var previousHandler = onPrevious || noop$8;
  var previousButtonEvents = previousKeys && (previousURL || onPrevious) && hasPrevious && previousKeys.map(key => /*#__PURE__*/React__default.createElement(KeypressListener, {
    key: key,
    keyCode: key,
    handler: previousURL ? handleCallback(clickPaginationLink('previousURL', node)) : handleCallback(previousHandler)
  }));
  var nextHandler = onNext || noop$8;
  var nextButtonEvents = nextKeys && (nextURL || onNext) && hasNext && nextKeys.map(key => /*#__PURE__*/React__default.createElement(KeypressListener, {
    key: key,
    keyCode: key,
    handler: nextURL ? handleCallback(clickPaginationLink('nextURL', node)) : handleCallback(nextHandler)
  }));
  var labelTextMarkup = hasNext && hasPrevious ? /*#__PURE__*/React__default.createElement(TextStyle, null, label) : /*#__PURE__*/React__default.createElement(TextStyle, {
    variation: "subdued"
  }, label);
  var labelMarkup = label ? /*#__PURE__*/React__default.createElement("div", {
    className: newDesignLanguage ? undefined : styles$1g.Label,
    "aria-live": "polite"
  }, labelTextMarkup) : null;
  return /*#__PURE__*/React__default.createElement("nav", {
    className: newDesignLanguage ? undefined : className,
    "aria-label": navLabel,
    ref: node
  }, previousButtonEvents, nextButtonEvents, /*#__PURE__*/React__default.createElement(ConditionalWrapper, {
    condition: Boolean(newDesignLanguage),
    wrapper: children => /*#__PURE__*/React__default.createElement(ButtonGroup, {
      segmented: !label
    }, children)
  }, constructedPrevious, labelMarkup, constructedNext));
}

function clickPaginationLink(id, node) {
  return () => {
    if (node.current == null) {
      return;
    }

    var link = node.current.querySelector("#".concat(id));

    if (link) {
      link.click();
    }
  };
}

function handleCallback(fn) {
  return () => {
    if (isInputFocused()) {
      return;
    }

    fn();
  };
}

function noop$8() {}

var styles$1h = {
  "Title": "Polaris-Header-Title",
  "SubTitle": "Polaris-Header-Title__SubTitle",
  "hasThumbnail": "Polaris-Header-Title--hasThumbnail",
  "TitleAndSubtitleWrapper": "Polaris-Header-Title__TitleAndSubtitleWrapper",
  "TitleWithMetadataWrapper": "Polaris-Header-Title__TitleWithMetadataWrapper",
  "TitleMetadata": "Polaris-Header-Title__TitleMetadata",
  "newDesignLanguage": "Polaris-Header-Title--newDesignLanguage"
};

function Title({
  title,
  subtitle,
  titleMetadata,
  thumbnail
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var titleMarkup = title ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1h.Title
  }, /*#__PURE__*/React__default.createElement(DisplayText, {
    size: "large",
    element: "h1"
  }, title)) : null;
  var titleMetadataMarkup = titleMetadata ? /*#__PURE__*/React__default.createElement("div", {
    className: classNames(styles$1h.TitleMetadata, newDesignLanguage && styles$1h.newDesignLanguage)
  }, titleMetadata) : null;
  var wrappedTitleMarkup = titleMetadata ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1h.TitleWithMetadataWrapper
  }, titleMarkup, titleMetadataMarkup) : titleMarkup;
  var subtitleMarkup = subtitle ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1h.SubTitle
  }, /*#__PURE__*/React__default.createElement("p", null, subtitle)) : null;
  var thumbnailMarkup = thumbnail ? /*#__PURE__*/React__default.createElement("div", null, thumbnail) : null;
  var pageTitleClassName = thumbnail ? classNames(styles$1h.hasThumbnail) : undefined;
  return /*#__PURE__*/React__default.createElement("div", {
    className: pageTitleClassName
  }, thumbnailMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1h.TitleAndSubtitleWrapper
  }, wrappedTitleMarkup, subtitleMarkup));
}

var styles$1i = {
  "Header": "Polaris-Page-Header",
  "newDesignLanguage": "Polaris-Page-Header--newDesignLanguage",
  "separator": "Polaris-Page-Header--separator",
  "titleHidden": "Polaris-Page-Header--titleHidden",
  "Navigation": "Polaris-Page-Header__Navigation",
  "hasActionMenu": "Polaris-Page-Header--hasActionMenu",
  "mobileView": "Polaris-Page-Header--mobileView",
  "BreadcrumbWrapper": "Polaris-Page-Header__BreadcrumbWrapper",
  "PaginationWrapper": "Polaris-Page-Header__PaginationWrapper",
  "AdditionalNavigationWrapper": "Polaris-Page-Header__AdditionalNavigationWrapper",
  "MainContent": "Polaris-Page-Header__MainContent",
  "TitleActionMenuWrapper": "Polaris-Page-Header__TitleActionMenuWrapper",
  "hasNavigation": "Polaris-Page-Header--hasNavigation",
  "PrimaryActionWrapper": "Polaris-Page-Header__PrimaryActionWrapper",
  "ActionMenuWrapper": "Polaris-Page-Header__ActionMenuWrapper",
  "Row": "Polaris-Page-Header__Row",
  "LeftAlign": "Polaris-Page-Header__LeftAlign",
  "RightAlign": "Polaris-Page-Header__RightAlign"
};

function isPrimaryAction(x) {
  return ! /*#__PURE__*/React.isValidElement(x) && x !== undefined;
}
function Header$2({
  title,
  subtitle,
  titleMetadata,
  thumbnail,
  titleHidden = false,
  separator,
  primaryAction,
  pagination,
  additionalNavigation,
  breadcrumbs = [],
  secondaryActions = [],
  actionGroups = []
}) {
  var {
    isNavigationCollapsed
  } = useMediaQuery();
  var {
    newDesignLanguage
  } = useFeatures();
  var breadcrumbMarkup = breadcrumbs.length > 0 ? /*#__PURE__*/React__default.createElement("div", {
    className: classNames(styles$1i.BreadcrumbWrapper, newDesignLanguage && styles$1i.newDesignLanguage)
  }, /*#__PURE__*/React__default.createElement(Breadcrumbs, {
    breadcrumbs: breadcrumbs
  })) : null;
  var paginationMarkup = pagination && !isNavigationCollapsed ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1i.PaginationWrapper
  }, /*#__PURE__*/React__default.createElement(Pagination, Object.assign({}, pagination, {
    plain: true
  }))) : null;
  var additionalNavigationMarkup = additionalNavigation ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1i.AdditionalNavigationWrapper
  }, additionalNavigation) : null;
  var navigationMarkup = breadcrumbMarkup || paginationMarkup || additionalNavigationMarkup ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1i.Navigation
  }, breadcrumbMarkup, additionalNavigationMarkup, paginationMarkup) : null;
  var pageTitleMarkup = /*#__PURE__*/React__default.createElement(Title, {
    title: title,
    subtitle: subtitle,
    titleMetadata: titleMetadata,
    thumbnail: thumbnail
  });
  var primaryActionMarkup = primaryAction ? /*#__PURE__*/React__default.createElement(PrimaryActionMarkup, {
    primaryAction: primaryAction
  }) : null;
  var actionMenuMarkup = secondaryActions.length > 0 || hasGroupsWithActions(actionGroups) ? /*#__PURE__*/React__default.createElement(ConditionalWrapper, {
    condition: newDesignLanguage === false,
    wrapper: children => /*#__PURE__*/React__default.createElement("div", {
      className: styles$1i.ActionMenuWrapper
    }, children)
  }, /*#__PURE__*/React__default.createElement(ActionMenu, {
    actions: secondaryActions,
    groups: actionGroups,
    rollup: isNavigationCollapsed
  })) : null;
  var headerClassNames = classNames(styles$1i.Header, titleHidden && styles$1i.titleHidden, separator && styles$1i.separator, navigationMarkup && styles$1i.hasNavigation, actionMenuMarkup && styles$1i.hasActionMenu, isNavigationCollapsed && styles$1i.mobileView, newDesignLanguage && styles$1i.newDesignLanguage);

  if (newDesignLanguage) {
    var {
      slot1,
      slot2,
      slot3,
      slot4,
      slot5,
      slot6
    } = determineLayout({
      breadcrumbMarkup,
      pageTitleMarkup,
      paginationMarkup,
      actionMenuMarkup,
      primaryActionMarkup,
      title,
      isNavigationCollapsed
    });
    return /*#__PURE__*/React__default.createElement("div", {
      className: headerClassNames
    }, /*#__PURE__*/React__default.createElement(ConditionalRender, {
      condition: [slot1, slot2, slot3, slot4].some(notNull)
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1i.Row
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1i.LeftAlign
    }, slot1, slot2), /*#__PURE__*/React__default.createElement(ConditionalRender, {
      condition: [slot3, slot4].some(notNull)
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1i.RightAlign
    }, /*#__PURE__*/React__default.createElement(ConditionalWrapper, {
      condition: [slot3, slot4].every(notNull),
      wrapper: children => /*#__PURE__*/React__default.createElement(ButtonGroup, null, children)
    }, slot3, slot4))))), /*#__PURE__*/React__default.createElement(ConditionalRender, {
      condition: [slot5, slot6].some(notNull)
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1i.Row
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1i.LeftAlign
    }, slot5), /*#__PURE__*/React__default.createElement(ConditionalRender, {
      condition: slot6 != null
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1i.RightAlign
    }, slot6)))));
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: headerClassNames
  }, navigationMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1i.MainContent
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1i.TitleActionMenuWrapper
  }, pageTitleMarkup, actionMenuMarkup), primaryActionMarkup));
}

function PrimaryActionMarkup({
  primaryAction
}) {
  var {
    isNavigationCollapsed
  } = useMediaQuery();
  var {
    newDesignLanguage
  } = useFeatures();
  var content = primaryAction;

  if (isPrimaryAction(primaryAction)) {
    var primary = primaryAction.primary === undefined ? true : primaryAction.primary;
    content = buttonsFrom(shouldShowIconOnly(newDesignLanguage, isNavigationCollapsed, primaryAction), {
      primary
    });
  }

  return /*#__PURE__*/React__default.createElement(ConditionalWrapper, {
    condition: newDesignLanguage === false,
    wrapper: children => /*#__PURE__*/React__default.createElement("div", {
      className: styles$1i.PrimaryActionWrapper
    }, children)
  }, content);
}

function shouldShowIconOnly(newDesignLanguage, isMobile, action) {
  var {
    content,
    accessibilityLabel,
    icon
  } = action;
  if (!newDesignLanguage || icon == null) return _objectSpread2(_objectSpread2({}, action), {}, {
    icon: undefined
  });

  if (isMobile) {
    accessibilityLabel = accessibilityLabel || content;
    content = undefined;
  } else {
    icon = undefined;
  }

  return _objectSpread2(_objectSpread2({}, action), {}, {
    content,
    accessibilityLabel,
    icon
  });
}

function notNull(value) {
  return value != null;
}

function determineLayout({
  breadcrumbMarkup,
  pageTitleMarkup,
  title,
  paginationMarkup,
  actionMenuMarkup,
  primaryActionMarkup,
  isNavigationCollapsed
}) {
  var shortTitle = 20;
  var reallyShortTitle = 8; //    Header Layout
  // |----------------------------------------------------|
  // | slot1 | slot2 |                    | slot3 | slot4 |
  // |----------------------------------------------------|
  // | slot5 |                                    | slot6 |
  // |----------------------------------------------------|
  //

  var layouts = {
    mobileCompact: {
      slots: {
        slot1: null,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: null,
        slot6: null
      },
      condition: isNavigationCollapsed && breadcrumbMarkup == null && title != null && title.length <= reallyShortTitle
    },
    mobileDefault: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: null,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: pageTitleMarkup,
        slot6: null
      },
      condition: isNavigationCollapsed
    },
    desktopCompact: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: null,
        slot4: primaryActionMarkup,
        slot5: null,
        slot6: null
      },
      condition: !isNavigationCollapsed && paginationMarkup == null && actionMenuMarkup == null && title != null && title.length <= shortTitle
    },
    desktopDefault: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: null,
        slot4: paginationMarkup,
        slot5: actionMenuMarkup,
        slot6: primaryActionMarkup
      },
      condition: !isNavigationCollapsed
    }
  };
  var layout = Object.values(layouts).find(layout => layout.condition) || layouts.desktopDefault;
  return layout.slots;
}

var styles$1j = {
  "Page": "Polaris-Page",
  "fullWidth": "Polaris-Page--fullWidth",
  "narrowWidth": "Polaris-Page--narrowWidth",
  "Content": "Polaris-Page__Content",
  "newDesignLanguage": "Polaris-Page--newDesignLanguage"
};

function Page(_ref) {
  var {
    children,
    fullWidth,
    narrowWidth
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["children", "fullWidth", "narrowWidth"]);

  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles$1j.Page, fullWidth && styles$1j.fullWidth, narrowWidth && styles$1j.narrowWidth, newDesignLanguage && styles$1j.newDesignLanguage);
  var hasHeaderContent = rest.title != null && rest.title !== '' || rest.primaryAction != null || rest.secondaryActions != null && rest.secondaryActions.length > 0 || rest.actionGroups != null && rest.actionGroups.length > 0 || rest.breadcrumbs != null && rest.breadcrumbs.length > 0;
  var headerMarkup = hasHeaderContent ? /*#__PURE__*/React__default.createElement(Header$2, rest) : null;
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, headerMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1j.Content
  }, children));
}

var styles$1k = {
  "PageActions": "Polaris-PageActions"
};

function PageActions({
  primaryAction,
  secondaryActions
}) {
  var primaryActionMarkup = primaryAction ? buttonsFrom(primaryAction, {
    primary: true
  }) : null;
  var secondaryActionsMarkup = secondaryActions ? /*#__PURE__*/React__default.createElement(ButtonGroup, null, buttonsFrom(secondaryActions)) : null;
  var distribution = secondaryActionsMarkup ? 'equalSpacing' : 'trailing';
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1k.PageActions
  }, /*#__PURE__*/React__default.createElement(Stack, {
    distribution: distribution,
    spacing: "tight"
  }, secondaryActionsMarkup, primaryActionMarkup));
}

var defaultMediaQuery = {
  isNavigationCollapsed: false
};
function PolarisTestProvider({
  strict,
  children,
  i18n,
  link,
  theme = {},
  mediaQuery,
  features: featuresProp = {},
  frame
}) {
  var Wrapper = strict ? React.StrictMode : React.Fragment;
  var intl = new I18n(i18n || {});
  var scrollLockManager = new ScrollLockManager();
  var stickyManager = new StickyManager();
  var uniqueIdFactory = new UniqueIdFactory(globalIdGeneratorFactory);

  var features = _objectSpread2({
    newDesignLanguage: false
  }, featuresProp);

  var customProperties = features.newDesignLanguage ? buildCustomProperties(_objectSpread2(_objectSpread2({}, theme), {}, {
    colorScheme: 'light'
  }), features.newDesignLanguage) : undefined;
  var mergedTheme = buildThemeContext(theme, customProperties);
  var mergedFrame = createFrameContext(frame);
  var mergedMediaQuery = merge(defaultMediaQuery, mediaQuery);
  return /*#__PURE__*/React__default.createElement(Wrapper, null, /*#__PURE__*/React__default.createElement(FeaturesContext.Provider, {
    value: features
  }, /*#__PURE__*/React__default.createElement(I18nContext.Provider, {
    value: intl
  }, /*#__PURE__*/React__default.createElement(ScrollLockManagerContext.Provider, {
    value: scrollLockManager
  }, /*#__PURE__*/React__default.createElement(StickyManagerContext.Provider, {
    value: stickyManager
  }, /*#__PURE__*/React__default.createElement(UniqueIdFactoryContext.Provider, {
    value: uniqueIdFactory
  }, /*#__PURE__*/React__default.createElement(LinkContext.Provider, {
    value: link
  }, /*#__PURE__*/React__default.createElement(ThemeContext.Provider, {
    value: mergedTheme
  }, /*#__PURE__*/React__default.createElement(MediaQueryContext.Provider, {
    value: mergedMediaQuery
  }, /*#__PURE__*/React__default.createElement(FocusManager, null, /*#__PURE__*/React__default.createElement(FrameContext.Provider, {
    value: mergedFrame
  }, children)))))))))));
}

function noop$9() {}

function createFrameContext({
  showToast = noop$9,
  hideToast = noop$9,
  setContextualSaveBar = noop$9,
  removeContextualSaveBar = noop$9,
  startLoading = noop$9,
  stopLoading = noop$9
} = {}) {
  return {
    showToast,
    hideToast,
    setContextualSaveBar,
    removeContextualSaveBar,
    startLoading,
    stopLoading
  };
}

var styles$1l = {
  "ProgressBar": "Polaris-ProgressBar",
  "sizeSmall": "Polaris-ProgressBar--sizeSmall",
  "sizeMedium": "Polaris-ProgressBar--sizeMedium",
  "sizeLarge": "Polaris-ProgressBar--sizeLarge",
  "Indicator": "Polaris-ProgressBar__Indicator",
  "fillup": "Polaris-ProgressBar--fillup",
  "Progress": "Polaris-ProgressBar__Progress",
  "Label": "Polaris-ProgressBar__Label"
};

function ProgressBar({
  progress = 0,
  size = 'medium'
}) {
  var i18n = useI18n();
  var className = classNames(styles$1l.ProgressBar, size && styles$1l[variationName('size', size)]);
  var warningMessage = i18n.translate(progress < 0 ? 'Polaris.ProgressBar.negativeWarningMessage' : 'Polaris.ProgressBar.exceedWarningMessage', {
    progress
  });
  var parsedProgress = parseProgress(progress, warningMessage);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, /*#__PURE__*/React__default.createElement("progress", {
    className: styles$1l.Progress,
    value: parsedProgress,
    max: "100"
  }), /*#__PURE__*/React__default.createElement("div", {
    className: styles$1l.Indicator,
    style: {
      width: "".concat(parsedProgress, "%")
    }
  }, /*#__PURE__*/React__default.createElement("span", {
    className: styles$1l.Label
  }, parsedProgress, "%")));
}

function parseProgress(progress, warningMessage) {
  var progressWidth;

  if (progress < 0) {
    if (process.env.NODE_ENV === 'development') {
      // eslint-disable-next-line no-console
      console.warn(warningMessage);
    }

    progressWidth = 0;
  } else if (progress > 100) {
    if (process.env.NODE_ENV === 'development') {
      // eslint-disable-next-line no-console
      console.warn(warningMessage);
    }

    progressWidth = 100;
  } else {
    progressWidth = progress;
  }

  return progressWidth;
}

function invertNumber(number) {
  if (Math.sign(number) === 1) {
    return -Math.abs(number);
  } else if (Math.sign(number) === -1) {
    return Math.abs(number);
  } else {
    return 0;
  }
}

var CSS_VAR_PREFIX = '--Polaris-RangeSlider-';

var styles$1m = {
  "Wrapper": "Polaris-RangeSlider-DualThumb__Wrapper",
  "TrackWrapper": "Polaris-RangeSlider-DualThumb__TrackWrapper",
  "disabled": "Polaris-RangeSlider-DualThumb--disabled",
  "Track": "Polaris-RangeSlider-DualThumb__Track",
  "error": "Polaris-RangeSlider-DualThumb--error",
  "Track--dashed": "Polaris-RangeSlider-DualThumb--trackDashed",
  "Thumbs": "Polaris-RangeSlider-DualThumb__Thumbs",
  "Prefix": "Polaris-RangeSlider-DualThumb__Prefix",
  "Suffix": "Polaris-RangeSlider-DualThumb__Suffix",
  "Output": "Polaris-RangeSlider-DualThumb__Output",
  "OutputBubble": "Polaris-RangeSlider-DualThumb__OutputBubble",
  "OutputText": "Polaris-RangeSlider-DualThumb__OutputText"
};

var Control;

(function (Control) {
  Control[Control["Lower"] = 0] = "Lower";
  Control[Control["Upper"] = 1] = "Upper";
})(Control || (Control = {}));

class DualThumb extends React.Component {
  constructor(...args) {
    super(...args);
    this.context = void 0;
    this.state = {
      value: sanitizeValue(this.props.value, this.props.min, this.props.max, this.props.step),
      trackWidth: 0,
      trackLeft: 0
    };
    this.track = /*#__PURE__*/React.createRef();
    this.trackWrapper = /*#__PURE__*/React.createRef();
    this.thumbLower = /*#__PURE__*/React.createRef();
    this.thumbUpper = /*#__PURE__*/React.createRef();
    this.setTrackPosition = debounce(() => {
      if (this.track.current) {
        var newDesignLanguage = this.context && this.context.newDesignLanguage;
        var thumbSize = newDesignLanguage ? 16 : 24;
        var {
          width,
          left
        } = this.track.current.getBoundingClientRect();
        var adjustedTrackWidth = width - thumbSize;
        var adjustedTrackLeft = left + thumbSize / 2;
        this.setState({
          trackWidth: adjustedTrackWidth,
          trackLeft: adjustedTrackLeft
        });
      }
    }, 40, {
      leading: true,
      trailing: true,
      maxWait: 40
    });

    this.handleMouseDownThumbLower = event => {
      if (event.button !== 0 || this.props.disabled) return;
      registerMouseMoveHandler(this.handleMouseMoveThumbLower);
      event.stopPropagation();
    };

    this.handleMouseMoveThumbLower = event => {
      var valueUpper = this.state.value[1];
      this.setValue([this.actualXPosition(event.clientX), valueUpper], Control.Upper);
    };

    this.handleTouchStartThumbLower = event => {
      if (this.props.disabled) return;
      registerTouchMoveHandler(this.handleTouchMoveThumbLower);
      event.stopPropagation();
    };

    this.handleTouchMoveThumbLower = event => {
      event.preventDefault();
      var valueUpper = this.state.value[1];
      this.setValue([this.actualXPosition(event.touches[0].clientX), valueUpper], Control.Upper);
    };

    this.handleMouseDownThumbUpper = event => {
      if (event.button !== 0 || this.props.disabled) return;
      registerMouseMoveHandler(this.handleMouseMoveThumbUpper);
      event.stopPropagation();
    };

    this.handleMouseMoveThumbUpper = event => {
      var valueLower = this.state.value[0];
      this.setValue([valueLower, this.actualXPosition(event.clientX)], Control.Lower);
    };

    this.handleTouchStartThumbUpper = event => {
      if (this.props.disabled) return;
      registerTouchMoveHandler(this.handleTouchMoveThumbUpper);
      event.stopPropagation();
    };

    this.handleTouchMoveThumbUpper = event => {
      event.preventDefault();
      var valueLower = this.state.value[0];
      this.setValue([valueLower, this.actualXPosition(event.touches[0].clientX)], Control.Lower);
    };

    this.handleKeypressLower = event => {
      if (this.props.disabled) return;
      var {
        incrementValueLower,
        decrementValueLower
      } = this;
      var handlerMap = {
        [exports.Key.UpArrow]: incrementValueLower,
        [exports.Key.RightArrow]: incrementValueLower,
        [exports.Key.DownArrow]: decrementValueLower,
        [exports.Key.LeftArrow]: decrementValueLower
      };
      var handler = handlerMap[event.keyCode];

      if (handler != null) {
        event.preventDefault();
        event.stopPropagation();
        handler();
      }
    };

    this.handleKeypressUpper = event => {
      if (this.props.disabled) return;
      var {
        incrementValueUpper,
        decrementValueUpper
      } = this;
      var handlerMap = {
        [exports.Key.UpArrow]: incrementValueUpper,
        [exports.Key.RightArrow]: incrementValueUpper,
        [exports.Key.DownArrow]: decrementValueUpper,
        [exports.Key.LeftArrow]: decrementValueUpper
      };
      var handler = handlerMap[event.keyCode];

      if (handler != null) {
        event.preventDefault();
        event.stopPropagation();
        handler();
      }
    };

    this.incrementValueLower = () => {
      this.setValue([this.state.value[0] + this.props.step, this.state.value[1]], Control.Upper);
    };

    this.decrementValueLower = () => {
      this.setValue([this.state.value[0] - this.props.step, this.state.value[1]], Control.Upper);
    };

    this.incrementValueUpper = () => {
      this.setValue([this.state.value[0], this.state.value[1] + this.props.step], Control.Lower);
    };

    this.decrementValueUpper = () => {
      this.setValue([this.state.value[0], this.state.value[1] - this.props.step], Control.Lower);
    };

    this.dispatchValue = () => {
      var {
        onChange,
        id
      } = this.props;
      var {
        value
      } = this.state;
      onChange(value, id);
    };

    this.setValue = (dirtyValue, control) => {
      var {
        props: {
          min,
          max,
          step
        },
        state: {
          value
        }
      } = this;
      var sanitizedValue = sanitizeValue(dirtyValue, min, max, step, control);

      if (isEqual(sanitizedValue, value) === false) {
        this.setState({
          value: sanitizedValue
        }, this.dispatchValue);
      }
    };

    this.handleMouseDownTrack = event => {
      if (event.button !== 0 || this.props.disabled) return;
      event.preventDefault();
      var clickXPosition = this.actualXPosition(event.clientX);
      var {
        value
      } = this.state;
      var distanceFromLowerThumb = Math.abs(value[0] - clickXPosition);
      var distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);

      if (distanceFromLowerThumb <= distanceFromUpperThumb) {
        this.setValue([clickXPosition, value[1]], Control.Upper);
        registerMouseMoveHandler(this.handleMouseMoveThumbLower);

        if (this.thumbLower.current != null) {
          this.thumbLower.current.focus();
        }
      } else {
        this.setValue([value[0], clickXPosition], Control.Lower);
        registerMouseMoveHandler(this.handleMouseMoveThumbUpper);

        if (this.thumbUpper.current != null) {
          this.thumbUpper.current.focus();
        }
      }
    };

    this.handleTouchStartTrack = event => {
      if (this.props.disabled) return;
      event.preventDefault();
      var clickXPosition = this.actualXPosition(event.touches[0].clientX);
      var {
        value
      } = this.state;
      var distanceFromLowerThumb = Math.abs(value[0] - clickXPosition);
      var distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);

      if (distanceFromLowerThumb <= distanceFromUpperThumb) {
        this.setValue([clickXPosition, value[1]], Control.Upper);
        registerTouchMoveHandler(this.handleTouchMoveThumbLower);

        if (this.thumbLower.current != null) {
          this.thumbLower.current.focus();
        }
      } else {
        this.setValue([value[0], clickXPosition], Control.Lower);
        registerTouchMoveHandler(this.handleTouchMoveThumbUpper);

        if (this.thumbUpper.current != null) {
          this.thumbUpper.current.focus();
        }
      }
    };

    this.actualXPosition = dirtyXPosition => {
      if (this.track.current) {
        var {
          min,
          max
        } = this.props;
        var {
          trackLeft,
          trackWidth
        } = this.state;
        var relativeX = dirtyXPosition - trackLeft;
        var percentageOfTrack = relativeX / trackWidth;
        return percentageOfTrack * (max - min);
      } else {
        return 0;
      }
    };
  }

  static getDerivedStateFromProps(props, state) {
    var {
      min,
      step,
      max,
      value,
      onChange,
      id
    } = props;
    var {
      prevValue
    } = state;

    if (isEqual(prevValue, value)) {
      return null;
    }

    var sanitizedValue = sanitizeValue(value, min, max, step);

    if (!isEqual(value, sanitizedValue)) {
      onChange(sanitizedValue, id);
    }

    return {
      prevValue: value,
      value: sanitizedValue
    };
  }

  componentDidMount() {
    this.setTrackPosition();

    if (this.trackWrapper.current != null) {
      this.trackWrapper.current.addEventListener('touchstart', this.handleTouchStartTrack, {
        passive: false
      });
    }
  }

  componentWillUnmount() {
    if (this.trackWrapper.current != null) {
      this.trackWrapper.current.removeEventListener('touchstart', this.handleTouchStartTrack);
    }
  }

  render() {
    var {
      id,
      min,
      max,
      prefix,
      suffix,
      disabled,
      output,
      error,
      onFocus,
      onBlur,
      label,
      labelAction,
      labelHidden,
      helpText
    } = this.props;
    var {
      value
    } = this.state;
    var idLower = id;
    var idUpper = "".concat(id, "Upper");
    var describedBy = [];

    if (error) {
      describedBy.push("".concat(id, "Error"));
    }

    var ariaDescribedBy = describedBy.length ? describedBy.join(' ') : undefined;
    var trackWrapperClassName = classNames(styles$1m.TrackWrapper, error && styles$1m.error, disabled && styles$1m.disabled);
    var thumbLowerClassName = classNames(styles$1m.Thumbs, styles$1m.ThumbLower, disabled && styles$1m.disabled);
    var thumbUpperClassName = classNames(styles$1m.Thumbs, styles$1m.ThumbUpper, disabled && styles$1m.disabled);
    var trackWidth = this.state.trackWidth;
    var range = max - min;
    var leftPositionThumbLower = value[0] / range * trackWidth;
    var leftPositionThumbUpper = value[1] / range * trackWidth;
    var outputLowerClassName = classNames(styles$1m.Output, styles$1m.OutputLower);
    var outputMarkupLower = !disabled && output ? /*#__PURE__*/React__default.createElement("output", {
      htmlFor: idLower,
      className: outputLowerClassName,
      style: {
        left: "".concat(leftPositionThumbLower, "px")
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1m.OutputBubble
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$1m.OutputText
    }, value[0]))) : null;
    var outputUpperClassName = classNames(styles$1m.Output, styles$1m.OutputUpper);
    var outputMarkupUpper = !disabled && output ? /*#__PURE__*/React__default.createElement("output", {
      htmlFor: idUpper,
      className: outputUpperClassName,
      style: {
        left: "".concat(leftPositionThumbUpper, "px")
      }
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1m.OutputBubble
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$1m.OutputText
    }, value[1]))) : null;
    var cssVars = {
      ["".concat(CSS_VAR_PREFIX, "progress-lower")]: "".concat(leftPositionThumbLower, "px"),
      ["".concat(CSS_VAR_PREFIX, "progress-upper")]: "".concat(leftPositionThumbUpper, "px")
    };
    var prefixMarkup = prefix && /*#__PURE__*/React__default.createElement("div", {
      className: styles$1m.Prefix
    }, prefix);
    var suffixMarkup = suffix && /*#__PURE__*/React__default.createElement("div", {
      className: styles$1m.Suffix
    }, suffix);
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Labelled, {
      id: id,
      label: label,
      error: error,
      action: labelAction,
      labelHidden: labelHidden,
      helpText: helpText
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1m.Wrapper
    }, prefixMarkup, /*#__PURE__*/React__default.createElement("div", {
      className: trackWrapperClassName,
      onMouseDown: this.handleMouseDownTrack,
      ref: this.trackWrapper
    }, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1m.Track,
      style: cssVars,
      ref: this.track
    }), /*#__PURE__*/React__default.createElement("div", {
      className: styles$1m['Track--dashed']
    }), /*#__PURE__*/React__default.createElement("button", {
      id: idLower,
      className: thumbLowerClassName,
      style: {
        left: "".concat(leftPositionThumbLower, "px")
      },
      role: "slider",
      "aria-disabled": disabled,
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": value[0],
      "aria-invalid": Boolean(error),
      "aria-describedby": ariaDescribedBy,
      "aria-labelledby": labelID(id),
      onFocus: onFocus,
      onBlur: onBlur,
      onKeyDown: this.handleKeypressLower,
      onMouseDown: this.handleMouseDownThumbLower,
      onTouchStart: this.handleTouchStartThumbLower,
      ref: this.thumbLower,
      disabled: disabled
    }), outputMarkupLower, /*#__PURE__*/React__default.createElement("button", {
      id: idUpper,
      className: thumbUpperClassName,
      style: {
        left: "".concat(leftPositionThumbUpper, "px")
      },
      role: "slider",
      "aria-disabled": disabled,
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": value[1],
      "aria-invalid": Boolean(error),
      "aria-describedby": ariaDescribedBy,
      "aria-labelledby": labelID(id),
      onFocus: onFocus,
      onBlur: onBlur,
      onKeyDown: this.handleKeypressUpper,
      onMouseDown: this.handleMouseDownThumbUpper,
      onTouchStart: this.handleTouchStartThumbUpper,
      ref: this.thumbUpper,
      disabled: disabled
    }), outputMarkupUpper), suffixMarkup)), /*#__PURE__*/React__default.createElement(EventListener, {
      event: "resize",
      handler: this.setTrackPosition
    }));
  }

}
DualThumb.contextType = FeaturesContext;

function registerMouseMoveHandler(handler) {
  document.addEventListener('mousemove', handler);
  document.addEventListener('mouseup', () => {
    document.removeEventListener('mousemove', handler);
  }, {
    once: true
  });
}

function registerTouchMoveHandler(handler) {
  var removeHandler = () => {
    document.removeEventListener('touchmove', handler);
    document.removeEventListener('touchend', removeHandler);
    document.removeEventListener('touchcancel', removeHandler);
  };

  document.addEventListener('touchmove', handler, {
    passive: false
  });
  document.addEventListener('touchend', removeHandler, {
    once: true
  });
  document.addEventListener('touchcancel', removeHandler, {
    once: true
  });
}

function sanitizeValue(value, min, max, step, control = Control.Upper) {
  var upperValue = inBoundsUpper(roundedToStep(value[1]));
  var lowerValue = inBoundsLower(roundedToStep(value[0]));
  var maxLowerValue = upperValue - step;
  var minUpperValue = lowerValue + step;

  if (control === Control.Upper && lowerValue > maxLowerValue) {
    lowerValue = maxLowerValue;
  } else if (control === Control.Lower && upperValue < minUpperValue) {
    upperValue = minUpperValue;
  }

  return [lowerValue, upperValue];

  function inBoundsUpper(value) {
    var lowerMin = min + step;

    if (value < lowerMin) {
      return lowerMin;
    } else if (value > max) {
      return max;
    } else {
      return value;
    }
  }

  function inBoundsLower(value) {
    var upperMax = max - step;

    if (value < min) {
      return min;
    } else if (value > upperMax) {
      return upperMax;
    } else {
      return value;
    }
  }

  function roundedToStep(value) {
    return Math.round(value / step) * step;
  }
}

var styles$1n = {
  "SingleThumb": "Polaris-RangeSlider-SingleThumb",
  "disabled": "Polaris-RangeSlider-SingleThumb--disabled",
  "InputWrapper": "Polaris-RangeSlider-SingleThumb__InputWrapper",
  "Prefix": "Polaris-RangeSlider-SingleThumb__Prefix",
  "Suffix": "Polaris-RangeSlider-SingleThumb__Suffix",
  "Input": "Polaris-RangeSlider-SingleThumb__Input",
  "error": "Polaris-RangeSlider-SingleThumb--error",
  "Output": "Polaris-RangeSlider-SingleThumb__Output",
  "OutputBubble": "Polaris-RangeSlider-SingleThumb__OutputBubble",
  "OutputText": "Polaris-RangeSlider-SingleThumb__OutputText"
};

function SingleThumb(props) {
  var {
    id,
    error,
    helpText,
    value,
    min,
    max,
    disabled,
    output,
    prefix,
    suffix,
    label,
    labelAction,
    labelHidden,
    step,
    onBlur,
    onFocus
  } = props;
  var clampedValue = clamp(value, min, max);
  var describedBy = [];

  if (error) {
    describedBy.push("".concat(id, "Error"));
  }

  if (helpText) {
    describedBy.push(helpTextID(id));
  }

  var ariaDescribedBy = describedBy.length ? describedBy.join(' ') : undefined;
  var sliderProgress = (clampedValue - min) * 100 / (max - min);
  var outputFactor = invertNumber((sliderProgress - 50) / 100);
  var cssVars = {
    ["".concat(CSS_VAR_PREFIX, "min")]: min,
    ["".concat(CSS_VAR_PREFIX, "max")]: max,
    ["".concat(CSS_VAR_PREFIX, "current")]: clampedValue,
    ["".concat(CSS_VAR_PREFIX, "progress")]: "".concat(sliderProgress, "%"),
    ["".concat(CSS_VAR_PREFIX, "output-factor")]: "".concat(outputFactor)
  };
  var outputMarkup = !disabled && output && /*#__PURE__*/React__default.createElement("output", {
    htmlFor: id,
    className: styles$1n.Output
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1n.OutputBubble
  }, /*#__PURE__*/React__default.createElement("span", {
    className: styles$1n.OutputText
  }, clampedValue)));
  var prefixMarkup = prefix && /*#__PURE__*/React__default.createElement("div", {
    className: styles$1n.Prefix
  }, prefix);
  var suffixMarkup = suffix && /*#__PURE__*/React__default.createElement("div", {
    className: styles$1n.Suffix
  }, suffix);
  var className = classNames(styles$1n.SingleThumb, error && styles$1n.error, disabled && styles$1n.disabled);
  return /*#__PURE__*/React__default.createElement(Labelled, {
    id: id,
    label: label,
    error: error,
    action: labelAction,
    labelHidden: labelHidden,
    helpText: helpText
  }, /*#__PURE__*/React__default.createElement("div", {
    className: className,
    style: cssVars
  }, prefixMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1n.InputWrapper
  }, /*#__PURE__*/React__default.createElement("input", {
    type: "range",
    className: styles$1n.Input,
    id: id,
    name: id,
    min: min,
    max: max,
    step: step,
    value: clampedValue,
    disabled: disabled,
    onChange: handleChange,
    onFocus: onFocus,
    onBlur: onBlur,
    "aria-valuemin": min,
    "aria-valuemax": max,
    "aria-valuenow": clampedValue,
    "aria-invalid": Boolean(error),
    "aria-describedby": ariaDescribedBy
  }), outputMarkup), suffixMarkup));

  function handleChange(event) {
    var {
      onChange
    } = props;
    onChange && onChange(parseFloat(event.currentTarget.value), id);
  }
}

function RangeSlider(_ref) {
  var {
    min = 0,
    max = 100,
    step = 1,
    value
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["min", "max", "step", "value"]);

  var id = useUniqueId('RangeSlider');

  var sharedProps = _objectSpread2({
    id,
    min,
    max,
    step
  }, rest);

  return isDualThumb(value) ? /*#__PURE__*/React__default.createElement(DualThumb, Object.assign({
    value: value
  }, sharedProps)) : /*#__PURE__*/React__default.createElement(SingleThumb, Object.assign({
    value: value
  }, sharedProps));
}

function isDualThumb(value) {
  return Array.isArray(value);
}

var styles$1o = {
  "CheckboxWrapper": "Polaris-ResourceItem__CheckboxWrapper",
  "ResourceItem": "Polaris-ResourceItem",
  "persistActions": "Polaris-ResourceItem--persistActions",
  "Actions": "Polaris-ResourceItem__Actions",
  "newDesignLanguage": "Polaris-ResourceItem--newDesignLanguage",
  "selected": "Polaris-ResourceItem--selected",
  "focused": "Polaris-ResourceItem--focused",
  "focusedInner": "Polaris-ResourceItem--focusedInner",
  "Link": "Polaris-ResourceItem__Link",
  "Button": "Polaris-ResourceItem__Button",
  "Container": "Polaris-ResourceItem__Container",
  "alignmentLeading": "Polaris-ResourceItem--alignmentLeading",
  "alignmentTrailing": "Polaris-ResourceItem--alignmentTrailing",
  "alignmentCenter": "Polaris-ResourceItem--alignmentCenter",
  "alignmentFill": "Polaris-ResourceItem--alignmentFill",
  "alignmentBaseline": "Polaris-ResourceItem--alignmentBaseline",
  "Owned": "Polaris-ResourceItem__Owned",
  "OwnedNoMedia": "Polaris-ResourceItem__OwnedNoMedia",
  "Handle": "Polaris-ResourceItem__Handle",
  "selectMode": "Polaris-ResourceItem--selectMode",
  "selectable": "Polaris-ResourceItem--selectable",
  "Media": "Polaris-ResourceItem__Media",
  "Content": "Polaris-ResourceItem__Content",
  "Disclosure": "Polaris-ResourceItem__Disclosure"
};

var getUniqueCheckboxID = globalIdGeneratorFactory('ResourceListItemCheckbox');
var getUniqueOverlayID = globalIdGeneratorFactory('ResourceListItemOverlay');

class BaseResourceItem extends React.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      actionsMenuVisible: false,
      focused: false,
      focusedInner: false,
      selected: isSelected(this.props.id, this.props.context.selectedItems)
    };
    this.node = null;
    this.checkboxId = getUniqueCheckboxID();
    this.overlayId = getUniqueOverlayID();
    this.buttonOverlay = /*#__PURE__*/React.createRef();

    this.setNode = node => {
      this.node = node;
    };

    this.handleFocus = event => {
      if (event.target === this.buttonOverlay.current || this.node && event.target === this.node.querySelector("#".concat(this.overlayId))) {
        this.setState({
          focused: true,
          focusedInner: false
        });
      } else if (this.node && this.node.contains(event.target)) {
        this.setState({
          focused: true,
          focusedInner: true
        });
      }
    };

    this.handleBlur = ({
      relatedTarget
    }) => {
      if (this.node && relatedTarget instanceof Element && this.node.contains(relatedTarget)) {
        return;
      }

      this.setState({
        focused: false,
        focusedInner: false
      });
    };

    this.handleMouseOut = () => {
      this.state.focused && this.setState({
        focused: false,
        focusedInner: false
      });
    };

    this.handleLargerSelectionArea = event => {
      stopPropagation$1(event);
      this.handleSelection(!this.state.selected, event.nativeEvent.shiftKey);
    };

    this.handleSelection = (value, shiftKey) => {
      var {
        id,
        sortOrder,
        context: {
          onSelectionChange
        }
      } = this.props;

      if (id == null || onSelectionChange == null) {
        return;
      }

      this.setState({
        focused: value,
        focusedInner: value
      });
      onSelectionChange(value, id, sortOrder, shiftKey);
    };

    this.handleClick = event => {
      stopPropagation$1(event);
      var {
        id,
        onClick,
        url,
        context: {
          selectMode
        }
      } = this.props;
      var {
        ctrlKey,
        metaKey
      } = event.nativeEvent;
      var anchor = this.node && this.node.querySelector('a');

      if (selectMode) {
        this.handleLargerSelectionArea(event);
        return;
      }

      if (anchor === event.target) {
        return;
      }

      if (onClick) {
        onClick(id);
      }

      if (url && (ctrlKey || metaKey)) {
        window.open(url, '_blank');
        return;
      }

      if (url && anchor) {
        anchor.click();
      }
    };

    this.handleKeyUp = event => {
      var {
        onClick = noop$a,
        context: {
          selectMode
        }
      } = this.props;
      var {
        key
      } = event;

      if (key === 'Enter' && this.props.url && !selectMode) {
        onClick();
      }
    };

    this.handleActionsClick = () => {
      this.setState(({
        actionsMenuVisible
      }) => ({
        actionsMenuVisible: !actionsMenuVisible
      }));
    };

    this.handleCloseRequest = () => {
      this.setState({
        actionsMenuVisible: false
      });
    };
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    var selected = isSelected(nextProps.id, nextProps.context.selectedItems);

    if (prevState.selected === selected) {
      return null;
    }

    return {
      selected
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    var restNextContext = _objectWithoutProperties(nextProps.context, ["selectedItems"]),
        restNextProps = _objectWithoutProperties(nextProps, ["children", "context"]);

    var _this$props = this.props,
        restContext = _objectWithoutProperties(_this$props.context, ["selectedItems"]),
        restProps = _objectWithoutProperties(_this$props, ["children", "context"]);

    var nextSelectMode = nextProps.context.selectMode;
    return !isEqual(this.state, nextState) || this.props.context.selectMode !== nextSelectMode || !nextProps.context.selectMode && (!isEqual(restProps, restNextProps) || !isEqual(restContext, restNextContext));
  }

  render() {
    var {
      children,
      url,
      external,
      media,
      shortcutActions,
      ariaControls,
      ariaExpanded,
      persistActions = false,
      accessibilityLabel,
      name,
      context: {
        selectable,
        selectMode,
        loading,
        resourceName
      },
      i18n,
      features: {
        newDesignLanguage
      },
      verticalAlignment
    } = this.props;
    var {
      actionsMenuVisible,
      focused,
      focusedInner,
      selected
    } = this.state;
    var ownedMarkup = null;
    var handleMarkup = null;
    var mediaMarkup = media ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$1o.Media
    }, media) : null;

    if (selectable) {
      var checkboxAccessibilityLabel = name || accessibilityLabel || i18n.translate('Polaris.Common.checkbox');
      handleMarkup = /*#__PURE__*/React__default.createElement("div", {
        className: styles$1o.Handle,
        onClick: this.handleLargerSelectionArea
      }, /*#__PURE__*/React__default.createElement("div", {
        onClick: stopPropagation$1,
        className: styles$1o.CheckboxWrapper
      }, /*#__PURE__*/React__default.createElement("div", {
        onChange: this.handleLargerSelectionArea
      }, /*#__PURE__*/React__default.createElement(Checkbox$1, {
        id: this.checkboxId,
        label: checkboxAccessibilityLabel,
        labelHidden: true,
        checked: selected,
        disabled: loading
      }))));
    }

    if (media || selectable) {
      ownedMarkup = /*#__PURE__*/React__default.createElement("div", {
        className: classNames(styles$1o.Owned, !mediaMarkup && styles$1o.OwnedNoMedia)
      }, handleMarkup, mediaMarkup);
    }

    var className = classNames(styles$1o.ResourceItem, newDesignLanguage && styles$1o.newDesignLanguage, focused && styles$1o.focused, selectable && styles$1o.selectable, selected && styles$1o.selected, selectMode && styles$1o.selectMode, persistActions && styles$1o.persistActions, focusedInner && styles$1o.focusedInner);
    var actionsMarkup = null;
    var disclosureMarkup = null;

    if (shortcutActions && !loading) {
      if (persistActions) {
        actionsMarkup = /*#__PURE__*/React__default.createElement("div", {
          className: styles$1o.Actions,
          onClick: stopPropagation$1
        }, /*#__PURE__*/React__default.createElement(ButtonGroup, null, buttonsFrom(shortcutActions, {
          plain: true
        })));
        var disclosureAccessibilityLabel = name ? i18n.translate('Polaris.ResourceList.Item.actionsDropdownLabel', {
          accessibilityLabel: name
        }) : i18n.translate('Polaris.ResourceList.Item.actionsDropdown');
        disclosureMarkup = /*#__PURE__*/React__default.createElement("div", {
          className: styles$1o.Disclosure,
          onClick: stopPropagation$1
        }, /*#__PURE__*/React__default.createElement(Popover, {
          activator: /*#__PURE__*/React__default.createElement(Button, {
            accessibilityLabel: disclosureAccessibilityLabel,
            onClick: this.handleActionsClick,
            plain: true,
            icon: polarisIcons.HorizontalDotsMinor
          }),
          onClose: this.handleCloseRequest,
          active: actionsMenuVisible
        }, /*#__PURE__*/React__default.createElement(ActionList, {
          items: shortcutActions
        })));
      } else {
        actionsMarkup = /*#__PURE__*/React__default.createElement("div", {
          className: styles$1o.Actions,
          onClick: stopPropagation$1
        }, /*#__PURE__*/React__default.createElement(ButtonGroup, {
          segmented: true
        }, buttonsFrom(shortcutActions, {
          size: 'slim'
        })));
      }
    }

    var content = children ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$1o.Content
    }, children) : null;
    var containerClassName = classNames(styles$1o.Container, verticalAlignment && styles$1o[variationName('alignment', verticalAlignment)]);
    var containerMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: containerClassName,
      id: this.props.id
    }, ownedMarkup, content, actionsMarkup, disclosureMarkup);
    var tabIndex = loading ? -1 : 0;
    var ariaLabel = accessibilityLabel || i18n.translate('Polaris.ResourceList.Item.viewItem', {
      itemName: name || resourceName && resourceName.singular || ''
    });
    var accessibleMarkup = url ? /*#__PURE__*/React__default.createElement(UnstyledLink, {
      "aria-describedby": this.props.id,
      "aria-label": ariaLabel,
      className: styles$1o.Link,
      url: url,
      external: external,
      tabIndex: tabIndex,
      id: this.overlayId
    }) : /*#__PURE__*/React__default.createElement("button", {
      className: styles$1o.Button,
      "aria-label": ariaLabel,
      "aria-controls": ariaControls,
      "aria-expanded": ariaExpanded,
      onClick: this.handleClick,
      tabIndex: tabIndex,
      ref: this.buttonOverlay
    });
    return /*#__PURE__*/React__default.createElement("div", {
      ref: this.setNode,
      className: className,
      onClick: this.handleClick,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onKeyUp: this.handleKeyUp,
      onMouseOut: this.handleMouseOut,
      "data-href": url
    }, accessibleMarkup, containerMarkup);
  }

}

function noop$a() {}

function stopPropagation$1(event) {
  event.stopPropagation();
}

function isSelected(id, selectedItems) {
  return Boolean(selectedItems && (Array.isArray(selectedItems) && selectedItems.includes(id) || selectedItems === SELECT_ALL_ITEMS));
}

function ResourceItem(props) {
  return /*#__PURE__*/React__default.createElement(BaseResourceItem, Object.assign({}, props, {
    context: React.useContext(ResourceListContext),
    features: useFeatures(),
    i18n: useI18n()
  }));
}

class StickyInner extends React.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      isSticky: false,
      style: {}
    };
    this.placeHolderNode = null;
    this.stickyNode = null;

    this.setPlaceHolderNode = node => {
      this.placeHolderNode = node;
    };

    this.setStickyNode = node => {
      this.stickyNode = node;
    };

    this.handlePositioning = (stick, top = 0, left = 0, width = 0) => {
      var {
        isSticky
      } = this.state;

      if (stick && !isSticky || !stick && isSticky) {
        this.adjustPlaceHolderNode(stick);
        this.setState({
          isSticky: !isSticky
        });
      }

      var style = stick ? {
        position: 'fixed',
        top,
        left,
        width
      } : {};
      this.setState({
        style
      });
    };

    this.adjustPlaceHolderNode = add => {
      if (this.placeHolderNode && this.stickyNode) {
        this.placeHolderNode.style.paddingBottom = add ? "".concat(getRectForNode(this.stickyNode).height, "px") : '0px';
      }
    };
  }

  componentDidMount() {
    var {
      boundingElement,
      offset = false,
      disableWhenStacked = false,
      stickyManager
    } = this.props;
    if (!this.stickyNode || !this.placeHolderNode) return;
    stickyManager.registerStickyItem({
      stickyNode: this.stickyNode,
      placeHolderNode: this.placeHolderNode,
      handlePositioning: this.handlePositioning,
      offset,
      boundingElement,
      disableWhenStacked
    });
  }

  componentWillUnmount() {
    var {
      stickyManager
    } = this.props;
    if (!this.stickyNode) return;
    stickyManager.unregisterStickyItem(this.stickyNode);
  }

  render() {
    var {
      style,
      isSticky
    } = this.state;
    var {
      children
    } = this.props;
    var childrenContent = isFunction(children) ? children(isSticky) : children;
    return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", {
      ref: this.setPlaceHolderNode
    }), /*#__PURE__*/React__default.createElement("div", {
      ref: this.setStickyNode,
      style: style
    }, childrenContent));
  }

}

function isFunction(arg) {
  return typeof arg === 'function';
}

function Sticky(props) {
  var stickyManager = useStickyManager();
  return /*#__PURE__*/React__default.createElement(StickyInner, Object.assign({}, props, {
    stickyManager: stickyManager
  }));
}

var styles$1p = {
  "Select": "Polaris-Select",
  "disabled": "Polaris-Select--disabled",
  "Content": "Polaris-Select__Content",
  "InlineLabel": "Polaris-Select__InlineLabel",
  "Icon": "Polaris-Select__Icon",
  "newDesignLanguage": "Polaris-Select--newDesignLanguage",
  "Backdrop": "Polaris-Select__Backdrop",
  "placeholder": "Polaris-Select--placeholder",
  "error": "Polaris-Select--error",
  "Input": "Polaris-Select__Input",
  "SelectedOption": "Polaris-Select__SelectedOption",
  "hover": "Polaris-Select--hover"
};

var PLACEHOLDER_VALUE = '';

var _ref$l = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.ArrowUpDownMinor
});

function Select({
  options: optionsProp,
  label,
  labelAction,
  labelHidden: labelHiddenProp,
  labelInline,
  disabled,
  helpText,
  placeholder,
  id: idProp,
  name,
  value = PLACEHOLDER_VALUE,
  error,
  onChange,
  onFocus,
  onBlur
}) {
  var id = useUniqueId('Select', idProp);
  var labelHidden = labelInline ? true : labelHiddenProp;
  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles$1p.Select, error && styles$1p.error, disabled && styles$1p.disabled, newDesignLanguage && styles$1p.newDesignLanguage);
  var handleChange = onChange ? event => onChange(event.currentTarget.value, id) : undefined;
  var describedBy = [];

  if (helpText) {
    describedBy.push(helpTextID(id));
  }

  if (error) {
    describedBy.push("".concat(id, "Error"));
  }

  var options = optionsProp || [];
  var normalizedOptions = options.map(normalizeOption);

  if (placeholder) {
    normalizedOptions = [{
      label: placeholder,
      value: PLACEHOLDER_VALUE,
      disabled: true
    }, ...normalizedOptions];
  }

  var inlineLabelMarkup = labelInline && /*#__PURE__*/React__default.createElement("span", {
    className: styles$1p.InlineLabel
  }, label);
  var selectedOption = getSelectedOption(normalizedOptions, value);
  var contentMarkup = /*#__PURE__*/React__default.createElement("div", {
    className: styles$1p.Content,
    "aria-hidden": true,
    "aria-disabled": disabled
  }, inlineLabelMarkup, /*#__PURE__*/React__default.createElement("span", {
    className: styles$1p.SelectedOption
  }, selectedOption), /*#__PURE__*/React__default.createElement("span", {
    className: styles$1p.Icon
  }, _ref$l));
  var optionsMarkup = normalizedOptions.map(renderOption);
  return /*#__PURE__*/React__default.createElement(Labelled, {
    id: id,
    label: label,
    error: error,
    action: labelAction,
    labelHidden: labelHidden,
    helpText: helpText
  }, /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, /*#__PURE__*/React__default.createElement("select", {
    id: id,
    name: name,
    value: value,
    className: styles$1p.Input,
    disabled: disabled,
    onFocus: onFocus,
    onBlur: onBlur,
    onChange: handleChange,
    "aria-invalid": Boolean(error),
    "aria-describedby": describedBy.length ? describedBy.join(' ') : undefined
  }, optionsMarkup), contentMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1p.Backdrop
  })));
}

function isString(option) {
  return typeof option === 'string';
}

function isGroup(option) {
  return typeof option === 'object' && 'options' in option && option.options != null;
}

function normalizeStringOption(option) {
  return {
    label: option,
    value: option
  };
}
/**
 * Converts a string option (and each string option in a Group) into
 * an Option object.
 */


function normalizeOption(option) {
  if (isString(option)) {
    return normalizeStringOption(option);
  } else if (isGroup(option)) {
    var {
      title,
      options
    } = option;
    return {
      title,
      options: options.map(option => {
        return isString(option) ? normalizeStringOption(option) : option;
      })
    };
  }

  return option;
}
/**
 * Gets the text to display in the UI, for the currently selected option
 */


function getSelectedOption(options, value) {
  var flatOptions = flattenOptions(options);
  var selectedOption = flatOptions.find(option => value === option.value);

  if (selectedOption === undefined) {
    // Get the first visible option (not the hidden placeholder)
    selectedOption = flatOptions.find(option => !option.hidden);
  }

  return selectedOption ? selectedOption.label : '';
}
/**
 * Ungroups an options array
 */


function flattenOptions(options) {
  var flatOptions = [];
  options.forEach(optionOrGroup => {
    if (isGroup(optionOrGroup)) {
      flatOptions = flatOptions.concat(optionOrGroup.options);
    } else {
      flatOptions.push(optionOrGroup);
    }
  });
  return flatOptions;
}

function renderSingleOption(option) {
  var {
    value,
    label
  } = option,
      rest = _objectWithoutProperties(option, ["value", "label"]);

  return /*#__PURE__*/React__default.createElement("option", Object.assign({
    key: value,
    value: value
  }, rest), label);
}

function renderOption(optionOrGroup) {
  if (isGroup(optionOrGroup)) {
    var {
      title,
      options
    } = optionOrGroup;
    return /*#__PURE__*/React__default.createElement("optgroup", {
      label: title,
      key: title
    }, options.map(renderSingleOption));
  }

  return renderSingleOption(optionOrGroup);
}

var UNIQUE_IDENTIFIER = Symbol('unique_identifier');
/**
 * useLazyRef provides a lazy initial value, similar to lazy
 * initial state the initialValue is the value used during
 * initialization and disregarded after that. Use this hook
 * for expensive initialization.
 * @param initialValue - A function that will return the initial
 * value and be disregarded after that
 * @returns MutableRefObject<T> - Returns a ref object with the
 * results from invoking initial value
 * @example
 * function ComponentExample() {
 *  const title = useLazyRef(() => someExpensiveComputation());
 *  return <h1>{title.current}</h1>;
 * }
 */

function useLazyRef(initialValue) {
  var lazyRef = React.useRef(UNIQUE_IDENTIFIER);

  if (lazyRef.current === UNIQUE_IDENTIFIER) {
    lazyRef.current = initialValue();
  }

  return lazyRef;
}

var styles$1q = {
  "CheckableButton": "Polaris-ResourceList-CheckableButton",
  "newDesignLanguage": "Polaris-ResourceList-CheckableButton--newDesignLanguage",
  "CheckableButton-selectMode": "Polaris-ResourceList-CheckableButton__CheckableButton--selectMode",
  "CheckableButton-measuring": "Polaris-ResourceList-CheckableButton__CheckableButton--measuring",
  "CheckableButton-plain": "Polaris-ResourceList-CheckableButton__CheckableButton--plain",
  "CheckableButton-selected": "Polaris-ResourceList-CheckableButton__CheckableButton--selected",
  "Checkbox": "Polaris-ResourceList-CheckableButton__Checkbox",
  "Label": "Polaris-ResourceList-CheckableButton__Label"
};

function CheckableButton({
  accessibilityLabel,
  label = '',
  onToggleAll,
  selected,
  selectMode,
  plain,
  measuring,
  disabled,
  smallScreen
}) {
  var checkBoxRef = React.useRef(null);
  var {
    newDesignLanguage
  } = useFeatures();
  var {
    registerCheckableButtons
  } = React.useContext(ResourceListContext);
  var currentKey = 'bulkLg';

  if (plain) {
    currentKey = 'plain';
  } else if (smallScreen) {
    currentKey = 'bulkSm';
  }

  React.useEffect(() => {
    if (checkBoxRef.current && registerCheckableButtons) {
      registerCheckableButtons(currentKey, checkBoxRef.current);
    }
  }, [currentKey, registerCheckableButtons]);
  var className = plain ? classNames(styles$1q.CheckableButton, styles$1q['CheckableButton-plain'], newDesignLanguage && styles$1q.newDesignLanguage) : classNames(styles$1q.CheckableButton, newDesignLanguage && styles$1q.newDesignLanguage, selectMode && styles$1q['CheckableButton-selectMode'], selected && styles$1q['CheckableButton-selected'], measuring && styles$1q['CheckableButton-measuring']);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    onClick: onToggleAll
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1q.Checkbox
  }, /*#__PURE__*/React__default.createElement(Checkbox$1, {
    label: accessibilityLabel,
    labelHidden: true,
    checked: selected,
    disabled: disabled,
    onChange: onToggleAll,
    ref: checkBoxRef
  })), /*#__PURE__*/React__default.createElement("span", {
    className: styles$1q.Label
  }, label));
}

var styles$1r = {
  "Group": "Polaris-ResourceList-BulkActions__Group",
  "Group-measuring": "Polaris-ResourceList-BulkActions__Group--measuring",
  "Group-entering": "Polaris-ResourceList-BulkActions__Group--entering",
  "Group-exiting": "Polaris-ResourceList-BulkActions__Group--exiting",
  "Group-entered": "Polaris-ResourceList-BulkActions__Group--entered",
  "Group-exited": "Polaris-ResourceList-BulkActions__Group--exited",
  "Group-smallScreen": "Polaris-ResourceList-BulkActions__Group--smallScreen",
  "Group-largeScreen": "Polaris-ResourceList-BulkActions__Group--largeScreen",
  "ButtonGroupWrapper": "Polaris-ResourceList-BulkActions__ButtonGroupWrapper",
  "BulkActionButton": "Polaris-ResourceList-BulkActions__BulkActionButton",
  "CheckableContainer": "Polaris-ResourceList-BulkActions__CheckableContainer",
  "disabled": "Polaris-ResourceList-BulkActions--disabled",
  "newDesignLanguage": "Polaris-ResourceList-BulkActions--newDesignLanguage",
  "PaginatedSelectAll": "Polaris-ResourceList-BulkActions__PaginatedSelectAll",
  "Slide": "Polaris-ResourceList-BulkActions__Slide",
  "Slide-appear": "Polaris-ResourceList-BulkActions__Slide--appear",
  "Slide-enter": "Polaris-ResourceList-BulkActions__Slide--enter",
  "Slide-exit": "Polaris-ResourceList-BulkActions__Slide--exit",
  "Slide-appearing": "Polaris-ResourceList-BulkActions__Slide--appearing",
  "Slide-entering": "Polaris-ResourceList-BulkActions__Slide--entering"
};

function BulkActionButton({
  handleMeasurement,
  url,
  external,
  onAction,
  content,
  disclosure,
  accessibilityLabel,
  disabled
}) {
  var bulkActionButton = React.useRef(null);
  useComponentDidMount(() => {
    if (handleMeasurement && bulkActionButton.current) {
      var _width = bulkActionButton.current.getBoundingClientRect().width;
      handleMeasurement(_width);
    }
  });
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1r.BulkActionButton,
    ref: bulkActionButton
  }, /*#__PURE__*/React__default.createElement(Button, {
    external: external,
    url: url,
    "aria-label": accessibilityLabel,
    onClick: onAction,
    disabled: disabled,
    disclosure: disclosure
  }, content));
}

var MAX_PROMOTED_ACTIONS = 2;
var slideClasses = {
  appear: classNames(styles$1r.Slide, styles$1r['Slide-appear']),
  appearActive: classNames(styles$1r.Slide, styles$1r['Slide-appearing']),
  enter: classNames(styles$1r.Slide, styles$1r['Slide-enter']),
  enterActive: classNames(styles$1r.Slide, styles$1r['Slide-entering']),
  exit: classNames(styles$1r.Slide, styles$1r['Slide-exit'])
};

class BulkActionsInner extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      smallScreenPopoverVisible: false,
      largeScreenPopoverVisible: false,
      containerWidth: 0,
      measuring: true
    };
    this.containerNode = null;
    this.largeScreenButtonsNode = null;
    this.moreActionsNode = null;
    this.checkableWrapperNode = /*#__PURE__*/React.createRef();
    this.largeScreenGroupNode = /*#__PURE__*/React.createRef();
    this.smallScreenGroupNode = /*#__PURE__*/React.createRef();
    this.promotedActionsWidths = [];
    this.bulkActionsWidth = 0;
    this.addedMoreActionsWidthForMeasuring = 0;
    this.handleResize = debounce(() => {
      var {
        smallScreenPopoverVisible,
        largeScreenPopoverVisible
      } = this.state;

      if (this.containerNode) {
        var containerWidth = this.containerNode.getBoundingClientRect().width;

        if (containerWidth > 0) {
          this.setState({
            containerWidth
          });
        }
      }

      if (smallScreenPopoverVisible || largeScreenPopoverVisible) {
        this.setState({
          smallScreenPopoverVisible: false,
          largeScreenPopoverVisible: false
        });
      }
    }, 50, {
      trailing: true
    });

    this.setLargeScreenButtonsNode = node => {
      this.largeScreenButtonsNode = node;
    };

    this.setContainerNode = node => {
      this.containerNode = node;
    };

    this.setMoreActionsNode = node => {
      this.moreActionsNode = node;
    };

    this.setSelectMode = val => {
      var {
        onSelectModeToggle
      } = this.props;

      if (onSelectModeToggle) {
        onSelectModeToggle(val);
      }
    };

    this.toggleSmallScreenPopover = () => {
      this.setState(({
        smallScreenPopoverVisible
      }) => ({
        smallScreenPopoverVisible: !smallScreenPopoverVisible
      }));
    };

    this.toggleLargeScreenPopover = () => {
      this.setState(({
        largeScreenPopoverVisible
      }) => ({
        largeScreenPopoverVisible: !largeScreenPopoverVisible
      }));
    };

    this.handleMeasurement = width => {
      var {
        measuring
      } = this.state;

      if (measuring) {
        this.promotedActionsWidths.push(width);
      }
    };
  }

  numberOfPromotedActionsToRender() {
    var {
      promotedActions
    } = this.props;
    var {
      containerWidth,
      measuring
    } = this.state;

    if (!promotedActions) {
      return 0;
    }

    if (containerWidth >= this.bulkActionsWidth || measuring) {
      return promotedActions.length;
    }

    var sufficientSpace = false;
    var counter = promotedActions.length - 1;
    var totalWidth = 0;

    while (!sufficientSpace && counter >= 0) {
      totalWidth += this.promotedActionsWidths[counter];
      var widthWithRemovedAction = this.bulkActionsWidth - totalWidth + this.addedMoreActionsWidthForMeasuring;

      if (containerWidth >= widthWithRemovedAction) {
        sufficientSpace = true;
      } else {
        counter--;
      }
    }

    return counter;
  }

  hasActions() {
    var {
      promotedActions,
      actions
    } = this.props;
    return Boolean(promotedActions && promotedActions.length > 0 || actions && actions.length > 0);
  }

  actionSections() {
    var {
      actions
    } = this.props;

    if (!actions || actions.length === 0) {
      return;
    }

    if (instanceOfBulkActionListSectionArray(actions)) {
      return actions;
    }

    if (instanceOfBulkActionArray(actions)) {
      return [{
        items: actions
      }];
    }
  } // eslint-disable-next-line @typescript-eslint/member-ordering


  componentDidMount() {
    var {
      actions,
      promotedActions
    } = this.props;

    if (promotedActions && !actions && this.moreActionsNode) {
      this.addedMoreActionsWidthForMeasuring = this.moreActionsNode.getBoundingClientRect().width;
    }

    this.bulkActionsWidth = this.largeScreenButtonsNode ? this.largeScreenButtonsNode.getBoundingClientRect().width - this.addedMoreActionsWidthForMeasuring : 0;

    if (this.containerNode) {
      this.setState({
        containerWidth: this.containerNode.getBoundingClientRect().width,
        measuring: false
      });
    }
  } // eslint-disable-next-line @typescript-eslint/member-ordering


  render() {
    var {
      selectMode,
      accessibilityLabel,
      label = '',
      onToggleAll,
      selected,
      smallScreen,
      disabled,
      promotedActions,
      paginatedSelectAllText = null,
      paginatedSelectAllAction,
      i18n
    } = this.props;
    var actionSections = this.actionSections();

    if (promotedActions && promotedActions.length > MAX_PROMOTED_ACTIONS) {
      // eslint-disable-next-line no-console
      console.warn(i18n.translate('Polaris.ResourceList.BulkActions.warningMessage', {
        maxPromotedActions: MAX_PROMOTED_ACTIONS
      }));
    }

    var {
      smallScreenPopoverVisible,
      largeScreenPopoverVisible,
      measuring
    } = this.state;
    var paginatedSelectAllActionMarkup = paginatedSelectAllAction ? /*#__PURE__*/React__default.createElement(Button, {
      onClick: paginatedSelectAllAction.onAction,
      plain: true,
      disabled: disabled
    }, paginatedSelectAllAction.content) : null;
    var paginatedSelectAllTextMarkup = paginatedSelectAllText && paginatedSelectAllAction ? /*#__PURE__*/React__default.createElement("span", {
      "aria-live": "polite"
    }, paginatedSelectAllText) : paginatedSelectAllText;
    var paginatedSelectAllMarkup = paginatedSelectAllActionMarkup || paginatedSelectAllTextMarkup ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$1r.PaginatedSelectAll
    }, paginatedSelectAllTextMarkup, " ", paginatedSelectAllActionMarkup) : null;
    var cancelButton = /*#__PURE__*/React__default.createElement(Button, {
      onClick: this.setSelectMode.bind(this, false),
      disabled: disabled
    }, i18n.translate('Polaris.Common.cancel'));
    var numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();
    var allActionsPopover = this.hasActions() ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$1r.Popover,
      ref: this.setMoreActionsNode
    }, /*#__PURE__*/React__default.createElement(Popover, {
      active: smallScreenPopoverVisible,
      activator: /*#__PURE__*/React__default.createElement(BulkActionButton, {
        disclosure: true,
        onAction: this.toggleSmallScreenPopover,
        content: i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel'),
        disabled: disabled
      }),
      onClose: this.toggleSmallScreenPopover
    }, /*#__PURE__*/React__default.createElement(ActionList, {
      items: promotedActions,
      sections: actionSections,
      onActionAnyItem: this.toggleSmallScreenPopover
    }))) : null;
    var promotedActionsMarkup = promotedActions && numberOfPromotedActionsToRender > 0 ? [...promotedActions].slice(0, numberOfPromotedActionsToRender).map((action, index) => /*#__PURE__*/React__default.createElement(BulkActionButton, Object.assign({
      disabled: disabled
    }, action, {
      key: index,
      handleMeasurement: this.handleMeasurement
    }))) : null;
    var rolledInPromotedActions = promotedActions && numberOfPromotedActionsToRender < promotedActions.length ? [...promotedActions].slice(numberOfPromotedActionsToRender) : [];
    var activatorLabel = !promotedActions || promotedActions && numberOfPromotedActionsToRender === 0 && !measuring ? i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel') : i18n.translate('Polaris.ResourceList.BulkActions.moreActionsActivatorLabel');
    var combinedActions = [];

    if (actionSections && rolledInPromotedActions.length > 0) {
      combinedActions = [{
        items: rolledInPromotedActions
      }, ...actionSections];
    } else if (actionSections) {
      combinedActions = actionSections;
    } else if (rolledInPromotedActions.length > 0) {
      combinedActions = [{
        items: rolledInPromotedActions
      }];
    }

    var actionsPopover = actionSections || rolledInPromotedActions.length > 0 || measuring ? /*#__PURE__*/React__default.createElement("div", {
      className: styles$1r.Popover,
      ref: this.setMoreActionsNode
    }, /*#__PURE__*/React__default.createElement(Popover, {
      active: largeScreenPopoverVisible,
      activator: /*#__PURE__*/React__default.createElement(BulkActionButton, {
        disclosure: true,
        onAction: this.toggleLargeScreenPopover,
        content: activatorLabel,
        disabled: disabled
      }),
      onClose: this.toggleLargeScreenPopover
    }, /*#__PURE__*/React__default.createElement(ActionList, {
      sections: combinedActions,
      onActionAnyItem: this.toggleLargeScreenPopover
    }))) : null;
    var checkableButtonProps = {
      accessibilityLabel,
      label,
      selected,
      selectMode,
      onToggleAll,
      measuring,
      disabled
    };
    var smallScreenGroup = smallScreen ? /*#__PURE__*/React__default.createElement(reactTransitionGroup.Transition, {
      timeout: 0,
      in: selectMode,
      key: "smallGroup",
      nodeRef: this.smallScreenGroupNode
    }, status => {
      var smallScreenGroupClassName = classNames(styles$1r.Group, styles$1r['Group-smallScreen'], styles$1r["Group-".concat(status)]);
      return /*#__PURE__*/React__default.createElement("div", {
        className: smallScreenGroupClassName,
        ref: this.smallScreenGroupNode
      }, /*#__PURE__*/React__default.createElement("div", {
        className: styles$1r.ButtonGroupWrapper
      }, /*#__PURE__*/React__default.createElement(ButtonGroup, {
        segmented: true
      }, /*#__PURE__*/React__default.createElement(reactTransitionGroup.CSSTransition, {
        nodeRef: this.checkableWrapperNode,
        in: selectMode,
        timeout: tokens.durationBase,
        classNames: slideClasses,
        appear: !selectMode
      }, /*#__PURE__*/React__default.createElement("div", {
        className: styles$1r.CheckableContainer,
        ref: this.checkableWrapperNode
      }, /*#__PURE__*/React__default.createElement(CheckableButton, Object.assign({}, checkableButtonProps, {
        smallScreen: true
      })))), allActionsPopover, cancelButton)), paginatedSelectAllMarkup);
    }) : null;
    var largeGroupContent = promotedActionsMarkup || actionsPopover ? /*#__PURE__*/React__default.createElement(ButtonGroup, {
      segmented: true
    }, /*#__PURE__*/React__default.createElement(CheckableButton, checkableButtonProps), promotedActionsMarkup, actionsPopover) : /*#__PURE__*/React__default.createElement(CheckableButton, checkableButtonProps);
    var largeScreenGroup = smallScreen ? null : /*#__PURE__*/React__default.createElement(reactTransitionGroup.Transition, {
      timeout: 0,
      in: selectMode,
      key: "largeGroup",
      nodeRef: this.largeScreenGroupNode
    }, status => {
      var largeScreenGroupClassName = classNames(styles$1r.Group, styles$1r['Group-largeScreen'], !measuring && styles$1r["Group-".concat(status)], measuring && styles$1r['Group-measuring']);
      return /*#__PURE__*/React__default.createElement("div", {
        className: largeScreenGroupClassName,
        ref: this.largeScreenGroupNode
      }, /*#__PURE__*/React__default.createElement(EventListener, {
        event: "resize",
        handler: this.handleResize
      }), /*#__PURE__*/React__default.createElement("div", {
        className: styles$1r.ButtonGroupWrapper,
        ref: this.setLargeScreenButtonsNode
      }, largeGroupContent), paginatedSelectAllMarkup);
    });
    return /*#__PURE__*/React__default.createElement("div", {
      ref: this.setContainerNode
    }, smallScreenGroup, largeScreenGroup);
  }

}

function instanceOfBulkActionListSectionArray(actions) {
  var validList = actions.filter(action => {
    return action.items;
  });
  return actions.length === validList.length;
}

function instanceOfBulkActionArray(actions) {
  var validList = actions.filter(action => {
    return !action.items;
  });
  return actions.length === validList.length;
}

function BulkActions(props) {
  var i18n = useI18n();
  return /*#__PURE__*/React__default.createElement(BulkActionsInner, Object.assign({}, props, {
    i18n: i18n
  }));
}

var styles$1s = {
  "DateTextField": "Polaris-FilterControl-DateSelector__DateTextField",
  "DatePicker": "Polaris-FilterControl-DateSelector__DatePicker"
};

var VALID_DATE_REGEX = /^\d{4}-\d{1,2}-\d{1,2}$/;
var DateFilterOption;

(function (DateFilterOption) {
  DateFilterOption["PastWeek"] = "past_week";
  DateFilterOption["PastMonth"] = "past_month";
  DateFilterOption["PastQuarter"] = "past_quarter";
  DateFilterOption["PastYear"] = "past_year";
  DateFilterOption["ComingWeek"] = "coming_week";
  DateFilterOption["ComingMonth"] = "coming_month";
  DateFilterOption["ComingQuarter"] = "coming_quarter";
  DateFilterOption["ComingYear"] = "coming_year";
  DateFilterOption["OnOrBefore"] = "on_or_before";
  DateFilterOption["OnOrAfter"] = "on_or_after";
})(DateFilterOption || (DateFilterOption = {}));

var _ref$m = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.CalendarMinor,
  color: "skyDark"
});

var DateSelector = /*#__PURE__*/React.memo(function DateSelector({
  filterValue,
  filterKey,
  filterMinKey,
  filterMaxKey,
  dateOptionType,
  onFilterValueChange,
  onFilterKeyChange
}) {
  var now = new Date();
  var i18n = useI18n();
  var initialConsumerFilterKey = React.useRef(filterKey);
  var [datePickerMonth, setDatePickerMonth] = React.useState(now.getMonth());
  var [datePickerYear, setDatePickerYear] = React.useState(now.getFullYear());
  var [selectedDate, setSelectedDate] = React.useState();
  var [userInputDate, setUserInputDate] = React.useState();
  var [userInputDateError, setUserInputDateError] = React.useState();
  var dateTextFieldValue = getDateTextFieldValue();
  var handleDateFieldChange = React.useCallback(value => {
    if (value.length === 0) {
      setSelectedDate(undefined);
      onFilterValueChange(undefined);
    }

    if (userInputDateError && isValidDate(value)) {
      setUserInputDateError(undefined);
    }

    setUserInputDate(value);
  }, [onFilterValueChange, userInputDateError]);
  var handleDateChanged = React.useCallback(date => {
    if (!date) {
      return;
    }

    onFilterValueChange(stripTimeFromISOString(formatDateForLocalTimezone(date)));
  }, [onFilterValueChange]);
  var handleDateBlur = React.useCallback(() => {
    if (!dateTextFieldValue || !isValidDate(dateTextFieldValue)) {
      setSelectedDate(undefined);
      setUserInputDateError(i18n.translate('Polaris.ResourceList.DateSelector.dateValueError'));
      onFilterValueChange(undefined);
      return;
    }

    if (!userInputDate) {
      return;
    }

    var formattedDateForTimezone = new Date(formatDateForLocalTimezone(new Date(userInputDate)));
    setSelectedDate(formattedDateForTimezone);
    setDatePickerMonth(formattedDateForTimezone.getMonth());
    setDatePickerYear(formattedDateForTimezone.getFullYear());
    setUserInputDate(undefined);
    setUserInputDateError(undefined);
    handleDateChanged(formattedDateForTimezone);
  }, [dateTextFieldValue, handleDateChanged, i18n, onFilterValueChange, userInputDate]);
  var handleDateFilterOptionsChange = React.useCallback(newOption => {
    if (!initialConsumerFilterKey.current) {
      return;
    }

    if (newOption === DateFilterOption.OnOrBefore) {
      onFilterKeyChange(filterMaxKey);
      onFilterValueChange(selectedDate ? stripTimeFromISOString(formatDateForLocalTimezone(selectedDate)) : undefined);
      return;
    }

    if (newOption === DateFilterOption.OnOrAfter) {
      onFilterKeyChange(filterMinKey);
      onFilterValueChange(selectedDate ? stripTimeFromISOString(formatDateForLocalTimezone(selectedDate)) : undefined);
      return;
    }

    onFilterKeyChange(initialConsumerFilterKey.current);
    onFilterValueChange(newOption);
  }, [filterMaxKey, filterMinKey, initialConsumerFilterKey, onFilterKeyChange, onFilterValueChange, selectedDate]);
  var handleDatePickerChange = React.useCallback(({
    end: nextDate
  }) => {
    var date = new Date(nextDate);
    setSelectedDate(date);
    setUserInputDate(undefined);
    setUserInputDateError(undefined);
    handleDateChanged(date);
  }, [handleDateChanged]);
  var handleDatePickerMonthChange = React.useCallback((month, year) => {
    setDatePickerMonth(month);
    setDatePickerYear(year);
  }, []);
  var dateFilterOption = getDateFilterOption(filterValue, filterKey, filterMinKey, filterMaxKey);
  var showDatePredicate = dateFilterOption === DateFilterOption.OnOrBefore || dateFilterOption === DateFilterOption.OnOrAfter;
  var datePredicateMarkup = showDatePredicate && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1s.DateTextField
  }, /*#__PURE__*/React__default.createElement(TextField, {
    label: i18n.translate('Polaris.ResourceList.DateSelector.dateValueLabel'),
    placeholder: i18n.translate('Polaris.ResourceList.DateSelector.dateValuePlaceholder'),
    value: dateTextFieldValue,
    error: userInputDateError,
    prefix: _ref$m,
    autoComplete: false,
    onChange: handleDateFieldChange,
    onBlur: handleDateBlur
  })), /*#__PURE__*/React__default.createElement("div", {
    className: styles$1s.DatePicker
  }, /*#__PURE__*/React__default.createElement(DatePicker, {
    selected: selectedDate,
    month: datePickerMonth,
    year: datePickerYear,
    onChange: handleDatePickerChange,
    onMonthChange: handleDatePickerMonthChange
  })));
  var dateOptionTypes = {
    past: [...getDatePastOptions(), ...getDateComparatorOptions()],
    future: [...getDateFutureOptions(), ...getDateComparatorOptions()],
    full: [...getDatePastOptions(), ...getDateFutureOptions(), ...getDateComparatorOptions()]
  };
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Select, {
    label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.dateFilterLabel'),
    labelHidden: true,
    options: dateOptionType ? dateOptionTypes[dateOptionType] : dateOptionTypes.full,
    placeholder: i18n.translate('Polaris.ResourceList.FilterValueSelector.selectFilterValuePlaceholder'),
    value: dateFilterOption,
    onChange: handleDateFilterOptionsChange
  }), datePredicateMarkup);

  function getDateComparatorOptions() {
    return [{
      value: DateFilterOption.OnOrBefore,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.OnOrBefore')
    }, {
      value: DateFilterOption.OnOrAfter,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.OnOrAfter')
    }];
  }

  function getDatePastOptions() {
    return [{
      value: DateFilterOption.PastWeek,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastWeek')
    }, {
      value: DateFilterOption.PastMonth,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastMonth')
    }, {
      value: DateFilterOption.PastQuarter,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastQuarter')
    }, {
      value: DateFilterOption.PastYear,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastYear')
    }];
  }

  function getDateFutureOptions() {
    return [{
      value: DateFilterOption.ComingWeek,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingWeek')
    }, {
      value: DateFilterOption.ComingMonth,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingMonth')
    }, {
      value: DateFilterOption.ComingQuarter,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingQuarter')
    }, {
      value: DateFilterOption.ComingYear,
      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingYear')
    }];
  }

  function getDateTextFieldValue() {
    if (!userInputDate && !selectedDate) {
      return undefined;
    }

    if (userInputDate !== undefined) {
      return userInputDate;
    }

    if (selectedDate) {
      return stripTimeFromISOString(formatDateForLocalTimezone(selectedDate));
    }
  }
});

function isValidDate(date) {
  if (!date) {
    return false;
  }

  return VALID_DATE_REGEX.test(date) && !isNaN(new Date(date).getTime());
}

function getDateFilterOption(filterValue, filterKey, filterMinKey, filterMaxKey) {
  if (filterKey === filterMaxKey) {
    return DateFilterOption.OnOrBefore;
  }

  if (filterKey === filterMinKey) {
    return DateFilterOption.OnOrAfter;
  }

  return filterValue;
}

function stripTimeFromISOString(ISOString) {
  return ISOString.slice(0, 10);
}

function formatDateForLocalTimezone(date) {
  var timezoneOffset = date.getTimezoneOffset();
  var timezoneOffsetMs = timezoneOffset * 60 * 1000;
  var isFringeTimezone = timezoneOffset === -720 || timezoneOffset === 720;
  var formattedDate = new Date();

  if (isFringeTimezone && date.getHours() !== 0) {
    return date.toISOString();
  }

  var newTime = timezoneOffset > -1 ? date.getTime() + timezoneOffsetMs : date.getTime() - timezoneOffsetMs;
  formattedDate.setTime(newTime);
  return formattedDate.toISOString();
}

var FilterType;

(function (FilterType) {
  FilterType[FilterType["Select"] = 0] = "Select";
  FilterType[FilterType["TextField"] = 1] = "TextField";
  FilterType[FilterType["DateSelector"] = 2] = "DateSelector";
})(FilterType || (FilterType = {}));

/**
 * Returns a MutatableRefObject containing a boolean value that
 * represents a components mounted status.
 * @returns MutableRefObject<boolean> The mounted status
 */

function useIsMountedRef() {
  var isMounted = React.useRef(false);
  React.useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}

function FilterValueSelector({
  filter,
  filterKey,
  value,
  onChange,
  onFilterKeyChange
}) {
  var i18n = useI18n();
  var isMounted = useIsMountedRef();
  var {
    operatorText,
    type,
    label
  } = filter;
  var showOperatorOptions = type !== FilterType.DateSelector && operatorText && typeof operatorText !== 'string';
  var handleOperatorOptionChange = React.useCallback(operatorKey => {
    onFilterKeyChange(operatorKey);

    if (!value) {
      return;
    }

    onChange(value);
  }, [onChange, onFilterKeyChange, value]);

  if (showOperatorOptions && operatorText.length !== 0 && !isMounted.current) {
    handleOperatorOptionChange(operatorText[0].key);
  }

  var operatorOptionsMarkup = showOperatorOptions ? /*#__PURE__*/React__default.createElement(Select, {
    label: label,
    labelHidden: true,
    options: buildOperatorOptions(operatorText),
    value: filterKey,
    onChange: handleOperatorOptionChange
  }) : null;
  var selectedFilterLabel = typeof operatorText === 'string' ? operatorText : '';

  switch (filter.type) {
    case FilterType.Select:
      return /*#__PURE__*/React__default.createElement(Stack, {
        vertical: true
      }, operatorOptionsMarkup, /*#__PURE__*/React__default.createElement(Select, {
        label: selectedFilterLabel,
        options: filter.options,
        placeholder: i18n.translate('Polaris.ResourceList.FilterValueSelector.selectFilterValuePlaceholder'),
        value: value,
        onChange: onChange
      }));

    case FilterType.TextField:
      return /*#__PURE__*/React__default.createElement(Stack, {
        vertical: true
      }, operatorOptionsMarkup, /*#__PURE__*/React__default.createElement(TextField, {
        label: selectedFilterLabel,
        value: value,
        type: filter.textFieldType,
        onChange: onChange
      }));

    case FilterType.DateSelector:
      return /*#__PURE__*/React__default.createElement(DateSelector, {
        dateOptionType: filter.dateOptionType,
        filterValue: value,
        filterKey: filterKey,
        filterMinKey: filter.minKey,
        filterMaxKey: filter.maxKey,
        onFilterValueChange: onChange,
        onFilterKeyChange: onFilterKeyChange
      });

    default:
      return null;
  }
}

function buildOperatorOptions(operatorText) {
  if (!operatorText || typeof operatorText === 'string') {
    return [];
  }

  return operatorText.map(({
    key,
    optionLabel
  }) => {
    return {
      value: key,
      label: optionLabel
    };
  });
}

function FilterCreator({
  filters,
  resourceName,
  disabled,
  onAddFilter
}) {
  var {
    value: popoverActive,
    toggle: togglePopoverActive,
    setFalse: setPopoverActiveFalse
  } = useToggle(false);
  var [selectedFilter, setSelectedFilter] = React.useState();
  var [selectedFilterKey, setSelectedFilterKey] = React.useState();
  var [selectedFilterValue, setSelectedFilterValue] = React.useState();
  var i18n = useI18n();
  var node = React.useRef(null);
  var canAddFilter = Boolean(selectedFilter && selectedFilterKey && selectedFilterValue);
  var handleButtonFocus = React.useCallback((...args) => {
    var event = args[0];

    if (!node.current && event) {
      node.current = event.target;
    }
  }, []);
  var handleFilterKeyChange = React.useCallback(filterKey => {
    var foundFilter = filters.find(filter => {
      var {
        minKey,
        maxKey,
        operatorText
      } = filter;

      if (minKey || maxKey) {
        return filter.key === filterKey || minKey === filterKey || maxKey === filterKey;
      }

      if (operatorText && typeof operatorText !== 'string') {
        return filter.key === filterKey || operatorText.filter(({
          key
        }) => key === filterKey).length === 1;
      }

      return filter.key === filterKey;
    });

    if (!foundFilter) {
      return;
    }

    setSelectedFilter(foundFilter);
    setSelectedFilterKey(filterKey);
    setSelectedFilterValue(undefined);
  }, [filters]);
  var handleFilterValueChange = React.useCallback(value => {
    setSelectedFilterValue(value);
  }, []);
  var handleAddFilter = React.useCallback(() => {
    if (!onAddFilter || !canAddFilter || !selectedFilterKey) {
      return;
    }

    onAddFilter({
      key: selectedFilterKey,
      value: selectedFilterValue || ''
    });
    setPopoverActiveFalse();
    setSelectedFilter(undefined);
    setSelectedFilterValue(undefined);

    if (node.current != null) {
      node.current.focus();
    }
  }, [canAddFilter, onAddFilter, selectedFilterKey, selectedFilterValue, setPopoverActiveFalse]);
  var activator = /*#__PURE__*/React__default.createElement(Button, {
    onClick: togglePopoverActive,
    disclosure: true,
    disabled: disabled,
    onFocus: handleButtonFocus
  }, i18n.translate('Polaris.ResourceList.FilterCreator.filterButtonLabel'));
  var filterOptions = filters.map(({
    key,
    label
  }) => ({
    value: key,
    label
  }));
  var filterValueSelectionMarkup = selectedFilter ? /*#__PURE__*/React__default.createElement(FilterValueSelector, {
    filter: selectedFilter,
    filterKey: selectedFilterKey,
    value: selectedFilterValue,
    onFilterKeyChange: handleFilterKeyChange,
    onChange: handleFilterValueChange
  }) : null;
  var addFilterButtonMarkup = selectedFilter ? /*#__PURE__*/React__default.createElement(Button, {
    onClick: handleAddFilter,
    disabled: !canAddFilter
  }, i18n.translate('Polaris.ResourceList.FilterCreator.addFilterButtonLabel')) : null;
  return /*#__PURE__*/React__default.createElement(Popover, {
    active: popoverActive,
    activator: activator,
    onClose: togglePopoverActive,
    sectioned: true,
    fullHeight: true
  }, /*#__PURE__*/React__default.createElement(Form, {
    onSubmit: handleAddFilter
  }, /*#__PURE__*/React__default.createElement(FormLayout, null, /*#__PURE__*/React__default.createElement(Select, {
    label: i18n.translate('Polaris.ResourceList.FilterCreator.showAllWhere', {
      resourceNamePlural: resourceName.plural.toLocaleLowerCase()
    }),
    placeholder: i18n.translate('Polaris.ResourceList.FilterCreator.selectFilterKeyPlaceholder'),
    options: filterOptions,
    onChange: handleFilterKeyChange,
    value: selectedFilter && selectedFilter.key
  }), filterValueSelectionMarkup, addFilterButtonMarkup)));
}

var styles$1t = {
  "AppliedFilters": "Polaris-ResourceList-FilterControl__AppliedFilters",
  "AppliedFilter": "Polaris-ResourceList-FilterControl__AppliedFilter"
};

var _ref$n = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.SearchMinor,
  color: "skyDark"
});

/** @deprecated This is a private component, do not use it. This component might be removed in a minor version update. Use <Filters /> instead. */
function FilterControl({
  searchValue,
  appliedFilters = [],
  additionalAction,
  focused = false,
  filters = [],
  placeholder,
  onSearchBlur,
  onSearchChange,
  onFiltersChange
}) {
  // eslint-disable-next-line no-console
  console.warn('Deprecation: <FilterControl /> is deprecated. This is a private component, do not use it. This component might be removed in a minor version update. Use <Filters /> instead.');
  var i18n = useI18n();
  var {
    selectMode,
    resourceName
  } = React.useContext(ResourceListContext);
  var filterResourceName = resourceName || {
    singular: i18n.translate('Polaris.ResourceList.defaultItemSingular'),
    plural: i18n.translate('Polaris.ResourceList.defaultItemPlural')
  };
  var handleAddFilter = React.useCallback(newFilter => {
    if (!onFiltersChange) {
      return;
    }

    var foundFilter = appliedFilters.find(appliedFilter => idFromFilter(appliedFilter) === idFromFilter(newFilter));

    if (foundFilter) {
      return;
    }

    var newAppliedFilters = [...appliedFilters, newFilter];
    onFiltersChange(newAppliedFilters);
  }, [onFiltersChange, appliedFilters]);
  var handleRemoveFilter = React.useCallback(filterId => {
    if (!onFiltersChange) {
      return;
    }

    var foundIndex = appliedFilters.findIndex(appliedFilter => idFromFilter(appliedFilter) === filterId);
    var newAppliedFilters = foundIndex >= 0 ? [...appliedFilters.slice(0, foundIndex), ...appliedFilters.slice(foundIndex + 1, appliedFilters.length)] : [...appliedFilters];
    onFiltersChange(newAppliedFilters);
  }, [appliedFilters, onFiltersChange]);
  var getRemoveFilterCallback = React.useCallback(filterId => {
    return () => {
      handleRemoveFilter(filterId);
    };
  }, [handleRemoveFilter]);
  var textFieldLabel = placeholder ? placeholder : i18n.translate('Polaris.ResourceList.FilterControl.textFieldLabel', {
    resourceNamePlural: filterResourceName.plural.toLocaleLowerCase()
  });

  if (additionalAction) {
    additionalAction.disabled = selectMode;
  }

  var additionalActionButton = additionalAction && buttonsFrom(additionalAction) || null;
  var filterCreatorMarkup = filters.length > 0 ? /*#__PURE__*/React__default.createElement(FilterCreator, {
    resourceName: filterResourceName,
    filters: filters,
    onAddFilter: handleAddFilter,
    disabled: selectMode
  }) : null;
  var appliedFiltersMarkup = appliedFilters.map(appliedFilter => {
    var activeFilterLabel = getFilterLabel(appliedFilter);
    var filterId = idFromFilter(appliedFilter);
    return /*#__PURE__*/React__default.createElement("li", {
      className: styles$1t.AppliedFilter,
      key: filterId
    }, /*#__PURE__*/React__default.createElement(Tag, {
      onRemove: getRemoveFilterCallback(filterId),
      disabled: selectMode
    }, activeFilterLabel));
  });
  var appliedFiltersWrapper = appliedFilters.length > 0 ? /*#__PURE__*/React__default.createElement("ul", {
    className: styles$1t.AppliedFilters
  }, appliedFiltersMarkup) : null;
  return /*#__PURE__*/React__default.createElement(FormLayout, null, /*#__PURE__*/React__default.createElement(TextField, {
    connectedLeft: filterCreatorMarkup,
    connectedRight: additionalActionButton,
    label: textFieldLabel,
    labelHidden: true,
    placeholder: textFieldLabel,
    prefix: _ref$n,
    value: searchValue,
    onChange: onSearchChange,
    onBlur: onSearchBlur,
    focused: focused,
    disabled: selectMode
  }), appliedFiltersWrapper);

  function getFilterLabel(appliedFilter) {
    var {
      key,
      value,
      label
    } = appliedFilter;

    if (label) {
      return label;
    }

    var filter = filters.find(filter => {
      var {
        minKey,
        maxKey,
        operatorText
      } = filter;

      if (minKey || maxKey) {
        return filter.key === key || minKey === key || maxKey === key;
      }

      if (operatorText && typeof operatorText !== 'string') {
        return filter.key === key || operatorText.filter(({
          key: operatorKey
        }) => operatorKey === key).length === 1;
      }

      return filter.key === key;
    });

    if (!filter) {
      return value;
    }

    var filterOperatorLabel = findOperatorLabel(filter, appliedFilter);
    var filterLabelByType = findFilterLabelByType(filter, appliedFilter);

    if (!filterOperatorLabel) {
      return "".concat(filter.label, " ").concat(filterLabelByType);
    }

    return "".concat(filter.label, " ").concat(filterOperatorLabel, " ").concat(filterLabelByType);
  }

  function findFilterLabelByType(filter, appliedFilter) {
    var {
      value: appliedFilterValue
    } = appliedFilter;

    if (filter.type === FilterType.Select) {
      var foundFilterOption = filter.options.find(option => typeof option === 'string' ? option === appliedFilterValue : option.value === appliedFilterValue);

      if (foundFilterOption) {
        return typeof foundFilterOption === 'string' ? foundFilterOption : foundFilterOption.label;
      }
    }

    if (filter.type === FilterType.DateSelector) {
      if (filter.key === appliedFilter.key) {
        var filterLabelKey = "Polaris.ResourceList.DateSelector.FilterLabelForValue.".concat(appliedFilter.value);
        return i18n.translationKeyExists(filterLabelKey) ? i18n.translate(filterLabelKey) : appliedFilter.value;
      }

      if (appliedFilter.key === filter.maxKey) {
        return i18n.translate('Polaris.ResourceList.DateSelector.FilterLabelForValue.on_or_before', {
          date: formatDateForLabelDisplay(appliedFilter.value)
        });
      }

      if (appliedFilter.key === filter.minKey) {
        return i18n.translate('Polaris.ResourceList.DateSelector.FilterLabelForValue.on_or_after', {
          date: formatDateForLabelDisplay(appliedFilter.value)
        });
      }
    }

    return appliedFilterValue;
  }
}

function idFromFilter(appliedFilter) {
  return "".concat(appliedFilter.key, "-").concat(appliedFilter.value);
}

function formatDateForLabelDisplay(date) {
  if (isNaN(new Date(date).getTime())) {
    return date;
  }

  return new Date(date.replace(/-/g, '/')).toLocaleDateString();
}

function findOperatorLabel(filter, appliedFilter) {
  var {
    operatorText
  } = filter;

  if (filter.type === FilterType.DateSelector && (appliedFilter.key === filter.minKey || appliedFilter.key === filter.maxKey)) {
    return '';
  }

  if (!operatorText || typeof operatorText === 'string') {
    return operatorText;
  }

  var appliedOperator = operatorText.find(operator => {
    return operator.key === appliedFilter.key;
  });

  if (appliedOperator) {
    return appliedOperator.filterLabel || appliedOperator.optionLabel;
  }
}

var styles$1u = {
  "FiltersWrapper": "Polaris-ResourceList__FiltersWrapper",
  "ResourceList": "Polaris-ResourceList",
  "HeaderOuterWrapper": "Polaris-ResourceList__HeaderOuterWrapper",
  "HeaderWrapper-disabled": "Polaris-ResourceList__HeaderWrapper--disabled",
  "HeaderWrapper-overlay": "Polaris-ResourceList__HeaderWrapper--overlay",
  "HeaderWrapper": "Polaris-ResourceList__HeaderWrapper",
  "HeaderWrapper-isSticky": "Polaris-ResourceList__HeaderWrapper--isSticky",
  "HeaderContentWrapper": "Polaris-ResourceList__HeaderContentWrapper",
  "HeaderWrapper-inSelectMode": "Polaris-ResourceList__HeaderWrapper--inSelectMode",
  "SortWrapper": "Polaris-ResourceList__SortWrapper",
  "AlternateToolWrapper": "Polaris-ResourceList__AlternateToolWrapper",
  "HeaderWrapper-hasSelect": "Polaris-ResourceList__HeaderWrapper--hasSelect",
  "HeaderWrapper-hasAlternateTool": "Polaris-ResourceList__HeaderWrapper--hasAlternateTool",
  "HeaderWrapper-hasSort": "Polaris-ResourceList__HeaderWrapper--hasSort",
  "HeaderTitleWrapper": "Polaris-ResourceList__HeaderTitleWrapper",
  "BulkActionsWrapper": "Polaris-ResourceList__BulkActionsWrapper",
  "CheckableButtonWrapper": "Polaris-ResourceList__CheckableButtonWrapper",
  "SelectButtonWrapper": "Polaris-ResourceList__SelectButtonWrapper",
  "EmptySearchResultWrapper": "Polaris-ResourceList__EmptySearchResultWrapper",
  "ResourceListWrapper": "Polaris-ResourceList__ResourceListWrapper",
  "ItemWrapper": "Polaris-ResourceList__ItemWrapper",
  "ItemWrapper-isLoading": "Polaris-ResourceList__ItemWrapper--isLoading",
  "SpinnerContainer": "Polaris-ResourceList__SpinnerContainer",
  "LoadingOverlay": "Polaris-ResourceList__LoadingOverlay",
  "DisabledPointerEvents": "Polaris-ResourceList__DisabledPointerEvents",
  "disableTextSelection": "Polaris-ResourceList--disableTextSelection"
};

var SMALL_SCREEN_WIDTH = 458;
var SMALL_SPINNER_HEIGHT = 28;
var LARGE_SPINNER_HEIGHT = 45;

function getAllItemsOnPage(items, idForItem) {
  return items.map((item, index) => {
    return idForItem(item, index);
  });
}

var isSmallScreen = () => {
  return typeof window === 'undefined' ? false : window.innerWidth < SMALL_SCREEN_WIDTH;
};

function defaultIdForItem(item, index) {
  return Object.prototype.hasOwnProperty.call(item, 'id') ? item.id : index.toString();
}

var ResourceList = function ResourceList({
  items,
  filterControl,
  emptyState,
  emptySearchState,
  resourceName: resourceNameProp,
  promotedBulkActions,
  bulkActions,
  selectedItems = [],
  isFiltered,
  selectable,
  hasMoreItems,
  loading,
  showHeader,
  totalItemsCount,
  sortValue,
  sortOptions,
  alternateTool,
  onSortChange,
  onSelectionChange,
  renderItem,
  idForItem = defaultIdForItem,
  resolveItemId
}) {
  var i18n = useI18n();
  var [selectMode, setSelectMode] = React.useState(Boolean(selectedItems && selectedItems.length > 0));
  var [loadingPosition, setLoadingPositionState] = React.useState(0);
  var [lastSelected, setLastSelected] = React.useState();
  var [smallScreen, setSmallScreen] = React.useState(isSmallScreen());
  var forceUpdate = React.useReducer((x = 0) => x + 1, 0)[1];
  var [checkableButtons, setCheckableButtons] = React.useState(new Map());
  var defaultResourceName = useLazyRef(() => ({
    singular: i18n.translate('Polaris.ResourceList.defaultItemSingular'),
    plural: i18n.translate('Polaris.ResourceList.defaultItemPlural')
  }));
  var listRef = React.useRef(null);

  var handleSelectMode = selectMode => {
    setSelectMode(selectMode);

    if (!selectMode && onSelectionChange) {
      onSelectionChange([]);
    }
  };

  var handleResize = debounce(() => {
    var newSmallScreen = isSmallScreen();

    if (selectedItems && selectedItems.length === 0 && selectMode && !newSmallScreen) {
      handleSelectMode(false);
    }

    if (smallScreen !== newSmallScreen) {
      setSmallScreen(newSmallScreen);
    }
  }, 50, {
    leading: true,
    trailing: true,
    maxWait: 50
  });
  var isSelectable = Boolean(promotedBulkActions && promotedBulkActions.length > 0 || bulkActions && bulkActions.length > 0 || selectable);

  var bulkSelectState = () => {
    var selectState = 'indeterminate';

    if (!selectedItems || Array.isArray(selectedItems) && selectedItems.length === 0) {
      selectState = false;
    } else if (selectedItems === SELECT_ALL_ITEMS || Array.isArray(selectedItems) && selectedItems.length === items.length) {
      selectState = true;
    }

    return selectState;
  };

  var resourceName = resourceNameProp ? resourceNameProp : defaultResourceName.current;

  var headerTitle = () => {
    var itemsCount = items.length;
    var resource = !loading && (!totalItemsCount && itemsCount === 1 || totalItemsCount === 1) ? resourceName.singular : resourceName.plural;

    if (loading) {
      return i18n.translate('Polaris.ResourceList.loading', {
        resource
      });
    } else if (totalItemsCount) {
      return i18n.translate('Polaris.ResourceList.showingTotalCount', {
        itemsCount,
        totalItemsCount,
        resource
      });
    } else {
      return i18n.translate('Polaris.ResourceList.showing', {
        itemsCount,
        resource
      });
    }
  };

  var bulkActionsLabel = () => {
    var selectedItemsCount = selectedItems === SELECT_ALL_ITEMS ? "".concat(items.length, "+") : selectedItems.length;
    return i18n.translate('Polaris.ResourceList.selected', {
      selectedItemsCount
    });
  };

  var bulkActionsAccessibilityLabel = () => {
    var selectedItemsCount = selectedItems.length;
    var totalItemsCount = items.length;
    var allSelected = selectedItemsCount === totalItemsCount;

    if (totalItemsCount === 1 && allSelected) {
      return i18n.translate('Polaris.ResourceList.a11yCheckboxDeselectAllSingle', {
        resourceNameSingular: resourceName.singular
      });
    } else if (totalItemsCount === 1) {
      return i18n.translate('Polaris.ResourceList.a11yCheckboxSelectAllSingle', {
        resourceNameSingular: resourceName.singular
      });
    } else if (allSelected) {
      return i18n.translate('Polaris.ResourceList.a11yCheckboxDeselectAllMultiple', {
        itemsLength: items.length,
        resourceNamePlural: resourceName.plural
      });
    } else {
      return i18n.translate('Polaris.ResourceList.a11yCheckboxSelectAllMultiple', {
        itemsLength: items.length,
        resourceNamePlural: resourceName.plural
      });
    }
  };

  var paginatedSelectAllText = () => {
    if (!isSelectable || !hasMoreItems) {
      return;
    }

    if (selectedItems === SELECT_ALL_ITEMS) {
      return i18n.translate(isFiltered ? 'Polaris.ResourceList.allFilteredItemsSelected' : 'Polaris.ResourceList.allItemsSelected', {
        itemsLength: items.length,
        resourceNamePlural: resourceName.plural
      });
    }
  };

  var paginatedSelectAllAction = () => {
    if (!isSelectable || !hasMoreItems) {
      return;
    }

    var actionText = selectedItems === SELECT_ALL_ITEMS ? i18n.translate('Polaris.Common.undo') : i18n.translate(isFiltered ? 'Polaris.ResourceList.selectAllFilteredItems' : 'Polaris.ResourceList.selectAllItems', {
      itemsLength: items.length,
      resourceNamePlural: resourceName.plural
    });
    return {
      content: actionText,
      onAction: handleSelectAllItemsInStore
    };
  };

  var emptySearchResultText = {
    title: i18n.translate('Polaris.ResourceList.emptySearchResultTitle', {
      resourceNamePlural: resourceName.plural
    }),
    description: i18n.translate('Polaris.ResourceList.emptySearchResultDescription')
  };

  var handleSelectAllItemsInStore = () => {
    var newlySelectedItems = selectedItems === SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : SELECT_ALL_ITEMS;

    if (onSelectionChange) {
      onSelectionChange(newlySelectedItems);
    }
  };

  var setLoadingPosition = React.useCallback(() => {
    if (listRef.current != null) {
      if (typeof window === 'undefined') {
        return;
      }

      var overlay = listRef.current.getBoundingClientRect();
      var viewportHeight = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0);
      var overflow = viewportHeight - overlay.height;
      var spinnerHeight = items.length === 1 ? SMALL_SPINNER_HEIGHT : LARGE_SPINNER_HEIGHT;
      var spinnerPosition = overflow > 0 ? (overlay.height - spinnerHeight) / 2 : (viewportHeight - overlay.top - spinnerHeight) / 2;
      setLoadingPositionState(spinnerPosition);
    }
  }, [listRef, items.length]);
  var itemsExist = items.length > 0;
  React.useEffect(() => {
    if (loading) {
      setLoadingPosition();
    }
  }, [loading, setLoadingPosition]);
  React.useEffect(() => {
    if (selectedItems && selectedItems.length > 0 && !selectMode) {
      setSelectMode(true);
    }

    if ((!selectedItems || selectedItems.length === 0) && !isSmallScreen()) {
      setSelectMode(false);
    }
  }, [selectedItems, selectMode]);
  React.useEffect(() => {
    forceUpdate();
  }, [forceUpdate, items]);

  var renderItemWithId = (item, index) => {
    var id = idForItem(item, index);
    return /*#__PURE__*/React__default.createElement("li", {
      key: id,
      className: styles$1u.ItemWrapper
    }, renderItem(item, id, index));
  };

  var handleMultiSelectionChange = (lastSelected, currentSelected, resolveItemId) => {
    var min = Math.min(lastSelected, currentSelected);
    var max = Math.max(lastSelected, currentSelected);
    return items.slice(min, max + 1).map(resolveItemId);
  };

  var handleCheckableButtonRegistration = (key, button) => {
    if (!checkableButtons.get(key)) {
      setCheckableButtons(new Map(checkableButtons).set(key, button));
    }
  };

  var handleSelectionChange = (selected, id, sortOrder, shiftKey) => {
    if (selectedItems == null || onSelectionChange == null) {
      return;
    }

    var newlySelectedItems = selectedItems === SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : [...selectedItems];

    if (sortOrder !== undefined) {
      setLastSelected(sortOrder);
    }

    var lastSelectedFromState = lastSelected;
    var selectedIds = [id];

    if (shiftKey && lastSelectedFromState != null && sortOrder !== undefined && resolveItemId) {
      selectedIds = handleMultiSelectionChange(lastSelectedFromState, sortOrder, resolveItemId);
    }

    newlySelectedItems = [...new Set([...newlySelectedItems, ...selectedIds])];

    if (!selected) {
      for (var selectedId of selectedIds) {
        newlySelectedItems.splice(newlySelectedItems.indexOf(selectedId), 1);
      }
    }

    if (newlySelectedItems.length === 0 && !isSmallScreen()) {
      handleSelectMode(false);
    } else if (newlySelectedItems.length > 0) {
      handleSelectMode(true);
    }

    if (onSelectionChange) {
      onSelectionChange(newlySelectedItems);
    }
  };

  var handleToggleAll = () => {
    var newlySelectedItems;

    if (Array.isArray(selectedItems) && selectedItems.length === items.length || selectedItems === SELECT_ALL_ITEMS) {
      newlySelectedItems = [];
    } else {
      newlySelectedItems = items.map((item, index) => {
        return idForItem(item, index);
      });
    }

    if (newlySelectedItems.length === 0 && !isSmallScreen()) {
      handleSelectMode(false);
    } else if (newlySelectedItems.length > 0) {
      handleSelectMode(true);
    }

    var checkbox;

    if (isSmallScreen()) {
      checkbox = checkableButtons.get('bulkSm');
    } else if (newlySelectedItems.length === 0) {
      checkbox = checkableButtons.get('plain');
    } else {
      checkbox = checkableButtons.get('bulkLg');
    }

    if (onSelectionChange) {
      onSelectionChange(newlySelectedItems);
    } // setTimeout ensures execution after the Transition on BulkActions


    setTimeout(() => {
      checkbox && checkbox.focus();
    }, 0);
  };

  var bulkActionsMarkup = isSelectable ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.BulkActionsWrapper
  }, /*#__PURE__*/React__default.createElement(BulkActions, {
    label: bulkActionsLabel(),
    accessibilityLabel: bulkActionsAccessibilityLabel(),
    selected: bulkSelectState(),
    onToggleAll: handleToggleAll,
    selectMode: selectMode,
    onSelectModeToggle: handleSelectMode,
    promotedActions: promotedBulkActions,
    paginatedSelectAllAction: paginatedSelectAllAction(),
    paginatedSelectAllText: paginatedSelectAllText(),
    actions: bulkActions,
    disabled: loading,
    smallScreen: smallScreen
  })) : null;
  var filterControlMarkup = filterControl ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.FiltersWrapper
  }, filterControl) : null;
  var sortingSelectMarkup = sortOptions && sortOptions.length > 0 && !alternateTool ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.SortWrapper
  }, /*#__PURE__*/React__default.createElement(Select, {
    label: i18n.translate('Polaris.ResourceList.sortingLabel'),
    labelInline: !smallScreen,
    labelHidden: smallScreen,
    options: sortOptions,
    onChange: onSortChange,
    value: sortValue,
    disabled: selectMode
  })) : null;
  var alternateToolMarkup = alternateTool && !sortingSelectMarkup ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.AlternateToolWrapper
  }, alternateTool) : null;
  var headerTitleMarkup = /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.HeaderTitleWrapper
  }, headerTitle());
  var selectButtonMarkup = isSelectable ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.SelectButtonWrapper
  }, /*#__PURE__*/React__default.createElement(Button, {
    disabled: selectMode,
    icon: polarisIcons.EnableSelectionMinor,
    onClick: () => handleSelectMode(true)
  }, i18n.translate('Polaris.ResourceList.selectButtonText'))) : null;
  var checkableButtonMarkup = isSelectable ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.CheckableButtonWrapper
  }, /*#__PURE__*/React__default.createElement(CheckableButton, {
    accessibilityLabel: bulkActionsAccessibilityLabel(),
    label: headerTitle(),
    onToggleAll: handleToggleAll,
    plain: true,
    disabled: loading
  })) : null;
  var needsHeader = isSelectable || sortOptions && sortOptions.length > 0 || alternateTool;
  var headerWrapperOverlay = loading ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u['HeaderWrapper-overlay']
  }) : null;
  var showEmptyState = emptyState && !itemsExist && !loading;
  var showEmptySearchState = !showEmptyState && filterControl && !itemsExist && !loading;

  var _ref = /*#__PURE__*/React__default.createElement(EventListener, {
    event: "resize",
    handler: handleResize
  });

  var headerMarkup = !showEmptyState && showHeader !== false && !showEmptySearchState && (showHeader || needsHeader) && listRef.current && /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.HeaderOuterWrapper
  }, /*#__PURE__*/React__default.createElement(Sticky, {
    boundingElement: listRef.current
  }, isSticky => {
    var headerClassName = classNames(styles$1u.HeaderWrapper, sortOptions && sortOptions.length > 0 && !alternateTool && styles$1u['HeaderWrapper-hasSort'], alternateTool && styles$1u['HeaderWrapper-hasAlternateTool'], isSelectable && styles$1u['HeaderWrapper-hasSelect'], loading && styles$1u['HeaderWrapper-disabled'], isSelectable && selectMode && styles$1u['HeaderWrapper-inSelectMode'], isSticky && styles$1u['HeaderWrapper-isSticky']);
    return /*#__PURE__*/React__default.createElement("div", {
      className: headerClassName
    }, _ref, headerWrapperOverlay, /*#__PURE__*/React__default.createElement("div", {
      className: styles$1u.HeaderContentWrapper
    }, headerTitleMarkup, checkableButtonMarkup, alternateToolMarkup, sortingSelectMarkup, selectButtonMarkup), bulkActionsMarkup);
  }));
  var emptySearchStateMarkup = showEmptySearchState ? emptySearchState || /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.EmptySearchResultWrapper
  }, /*#__PURE__*/React__default.createElement(EmptySearchResult, Object.assign({}, emptySearchResultText, {
    withIllustration: true
  }))) : null;
  var emptyStateMarkup = showEmptyState ? emptyState : null;
  var defaultTopPadding = 8;
  var topPadding = loadingPosition > 0 ? loadingPosition : defaultTopPadding;
  var spinnerStyle = {
    paddingTop: "".concat(topPadding, "px")
  };
  var spinnerSize = items.length < 2 ? 'small' : 'large';
  var loadingOverlay = loading ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.SpinnerContainer,
    style: spinnerStyle
  }, /*#__PURE__*/React__default.createElement(Spinner, {
    size: spinnerSize,
    accessibilityLabel: "Items are loading"
  })), /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.LoadingOverlay
  })) : null;
  var className = classNames(styles$1u.ItemWrapper, loading && styles$1u['ItemWrapper-isLoading']);
  var loadingWithoutItemsMarkup = loading && !itemsExist ? /*#__PURE__*/React__default.createElement("div", {
    className: className,
    tabIndex: -1
  }, loadingOverlay) : null;
  var resourceListClassName = classNames(styles$1u.ResourceList, loading && styles$1u.disabledPointerEvents, selectMode && styles$1u.disableTextSelection);
  var listMarkup = itemsExist ? /*#__PURE__*/React__default.createElement("ul", {
    className: resourceListClassName,
    ref: listRef,
    "aria-live": "polite",
    "aria-busy": loading
  }, loadingOverlay, items.map(renderItemWithId)) : null;
  var context = {
    selectable: isSelectable,
    selectedItems,
    selectMode,
    resourceName,
    loading,
    onSelectionChange: handleSelectionChange,
    registerCheckableButtons: handleCheckableButtonRegistration
  };
  return /*#__PURE__*/React__default.createElement(ResourceListContext.Provider, {
    value: context
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1u.ResourceListWrapper
  }, filterControlMarkup, headerMarkup, listMarkup, emptySearchStateMarkup, emptyStateMarkup, loadingWithoutItemsMarkup));
};
ResourceList.Item = ResourceItem;

function SettingToggle({
  enabled,
  action,
  children
}) {
  var actionMarkup = action ? buttonFrom(action, {
    primary: !enabled
  }) : null;
  return /*#__PURE__*/React__default.createElement(Card, {
    sectioned: true
  }, /*#__PURE__*/React__default.createElement(SettingAction, {
    action: actionMarkup
  }, children));
}

var styles$1v = {
  "SkeletonBodyTextContainer": "Polaris-SkeletonBodyText__SkeletonBodyTextContainer",
  "SkeletonBodyText": "Polaris-SkeletonBodyText"
};

function SkeletonBodyText({
  lines = 3
}) {
  var bodyTextLines = [];

  for (var i = 0; i < lines; i++) {
    bodyTextLines.push( /*#__PURE__*/React__default.createElement("div", {
      className: styles$1v.SkeletonBodyText,
      key: i
    }));
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1v.SkeletonBodyTextContainer
  }, bodyTextLines);
}

var styles$1w = {
  "DisplayText": "Polaris-SkeletonDisplayText__DisplayText",
  "sizeSmall": "Polaris-SkeletonDisplayText--sizeSmall",
  "sizeMedium": "Polaris-SkeletonDisplayText--sizeMedium",
  "sizeLarge": "Polaris-SkeletonDisplayText--sizeLarge",
  "sizeExtraLarge": "Polaris-SkeletonDisplayText--sizeExtraLarge"
};

function SkeletonDisplayText({
  size = 'medium'
}) {
  var className = classNames(styles$1w.DisplayText, size && styles$1w[variationName('size', size)]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  });
}

var styles$1x = {
  "Page": "Polaris-SkeletonPage__Page",
  "fullWidth": "Polaris-SkeletonPage--fullWidth",
  "narrowWidth": "Polaris-SkeletonPage--narrowWidth",
  "Content": "Polaris-SkeletonPage__Content",
  "newDesignLanguage": "Polaris-SkeletonPage--newDesignLanguage",
  "Header": "Polaris-SkeletonPage__Header",
  "Header-hasSecondaryActions": "Polaris-SkeletonPage__Header--hasSecondaryActions",
  "BreadcrumbAction": "Polaris-SkeletonPage__BreadcrumbAction",
  "TitleAndPrimaryAction": "Polaris-SkeletonPage__TitleAndPrimaryAction",
  "Title": "Polaris-SkeletonPage__Title",
  "PrimaryAction": "Polaris-SkeletonPage__PrimaryAction",
  "Actions": "Polaris-SkeletonPage__Actions",
  "Action": "Polaris-SkeletonPage__Action"
};

var _ref$o = /*#__PURE__*/React__default.createElement(SkeletonDisplayText, {
  size: "large"
});

var _ref2$7 = /*#__PURE__*/React__default.createElement(SkeletonBodyText, {
  lines: 1
});

function SkeletonPage({
  children,
  fullWidth,
  narrowWidth,
  primaryAction,
  secondaryActions,
  title = '',
  breadcrumbs
}) {
  var i18n = useI18n();
  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles$1x.Page, fullWidth && styles$1x.fullWidth, narrowWidth && styles$1x.narrowWidth, newDesignLanguage && styles$1x.newDesignLanguage);
  var headerClassName = classNames(styles$1x.Header, breadcrumbs && styles$1x['Header-hasBreadcrumbs'], secondaryActions && styles$1x['Header-hasSecondaryActions']);
  var titleMarkup = title !== null ? renderTitle(title) : null;
  var primaryActionMarkup = primaryAction ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1x.PrimaryAction
  }, _ref$o) : null;
  var secondaryActionsMarkup = secondaryActions ? renderSecondaryActions(secondaryActions) : null;
  var breadcrumbMarkup = breadcrumbs ? /*#__PURE__*/React__default.createElement("div", {
    className: styles$1x.BreadcrumbAction,
    style: {
      width: 60
    }
  }, _ref2$7) : null;
  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    role: "status",
    "aria-label": i18n.translate('Polaris.SkeletonPage.loadingLabel')
  }, /*#__PURE__*/React__default.createElement("div", {
    className: headerClassName
  }, breadcrumbMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1x.TitleAndPrimaryAction
  }, titleMarkup, primaryActionMarkup), secondaryActionsMarkup), /*#__PURE__*/React__default.createElement("div", {
    className: styles$1x.Content
  }, children));
}

var _ref3$2 = /*#__PURE__*/React__default.createElement(SkeletonBodyText, {
  lines: 1
});

function renderSecondaryActions(actionCount) {
  var actions = [];

  for (var i = 0; i < actionCount; i++) {
    var width = Math.round(Math.random() * 40 + 60);
    actions.push( /*#__PURE__*/React__default.createElement("div", {
      className: styles$1x.Action,
      style: {
        width
      },
      key: i
    }, _ref3$2));
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1x.Actions
  }, actions);
}

var _ref4$1 = /*#__PURE__*/React__default.createElement(SkeletonDisplayText, {
  size: "large"
});

function renderTitle(title) {
  var titleContent = title === '' ? _ref4$1 : /*#__PURE__*/React__default.createElement(DisplayText, {
    size: "large",
    element: "h1"
  }, title);
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1x.Title
  }, titleContent);
}

var styles$1y = {
  "SkeletonThumbnail": "Polaris-SkeletonThumbnail",
  "sizeSmall": "Polaris-SkeletonThumbnail--sizeSmall",
  "sizeMedium": "Polaris-SkeletonThumbnail--sizeMedium",
  "sizeLarge": "Polaris-SkeletonThumbnail--sizeLarge"
};

function SkeletonThumbnail({
  size = 'medium'
}) {
  var className = classNames(styles$1y.SkeletonThumbnail, size && styles$1y[variationName('size', size)]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  });
}

function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
  var sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0);
  var arrayOfTabIndices = tabs.map((_, index) => {
    return index;
  });
  var visibleTabs = [];
  var hiddenTabs = [];

  if (containerWidth > sumTabWidths) {
    visibleTabs.push(...arrayOfTabIndices);
  } else {
    visibleTabs.push(selected);
    var tabListWidth = tabWidths[selected];
    arrayOfTabIndices.forEach(currentTabIndex => {
      if (currentTabIndex !== selected) {
        var currentTabWidth = tabWidths[currentTabIndex];

        if (tabListWidth + currentTabWidth > containerWidth - disclosureWidth) {
          hiddenTabs.push(currentTabIndex);
          return;
        }

        visibleTabs.push(currentTabIndex);
        tabListWidth += currentTabWidth;
      }
    });
  }

  return {
    visibleTabs,
    hiddenTabs
  };
}

var styles$1z = {
  "Tabs": "Polaris-Tabs",
  "Wrapper": "Polaris-Tabs__Wrapper",
  "newDesignLanguage": "Polaris-Tabs--newDesignLanguage",
  "fitted": "Polaris-Tabs--fitted",
  "TabContainer": "Polaris-Tabs__TabContainer",
  "Tab": "Polaris-Tabs__Tab",
  "Title": "Polaris-Tabs__Title",
  "fillSpace": "Polaris-Tabs--fillSpace",
  "Tab-selected": "Polaris-Tabs__Tab--selected",
  "Panel": "Polaris-Tabs__Panel",
  "Panel-hidden": "Polaris-Tabs__Panel--hidden",
  "List": "Polaris-Tabs__List",
  "Item": "Polaris-Tabs__Item",
  "DisclosureTab": "Polaris-Tabs__DisclosureTab",
  "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
  "DisclosureActivator": "Polaris-Tabs__DisclosureActivator",
  "TabMeasurer": "Polaris-Tabs__TabMeasurer"
};

class Item$8 extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.context = void 0;
    this.focusedNode = null;

    this.setFocusedNode = node => {
      this.focusedNode = node;
    };
  }

  componentDidMount() {
    var {
      focusedNode
    } = this;
    var {
      focused
    } = this.props;

    if (focusedNode && focusedNode instanceof HTMLElement && focused) {
      focusedNode.focus();
    }
  }

  componentDidUpdate() {
    var {
      focusedNode
    } = this;
    var {
      focused
    } = this.props;

    if (focusedNode && focusedNode instanceof HTMLElement && focused) {
      focusedNode.focus();
    }
  }

  render() {
    var {
      id,
      panelID,
      children,
      url,
      accessibilityLabel,
      onClick = noop$b
    } = this.props;
    var {
      newDesignLanguage
    } = this.context || {};
    var classname = classNames(styles$1z.Item, newDesignLanguage && styles$1z.newDesignLanguage);
    var sharedProps = {
      id,
      ref: this.setFocusedNode,
      onClick,
      className: classname,
      'aria-controls': panelID,
      'aria-selected': false,
      'aria-label': accessibilityLabel
    };
    var markup = url ? /*#__PURE__*/React__default.createElement(UnstyledLink, Object.assign({}, sharedProps, {
      url: url
    }), children) : /*#__PURE__*/React__default.createElement("button", Object.assign({}, sharedProps, {
      type: "button"
    }), children);
    return /*#__PURE__*/React__default.createElement("li", null, markup);
  }

}
Item$8.contextType = FeaturesContext;

function noop$b() {}

class List$1 extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.context = void 0;

    this.handleKeypress = event => {
      var {
        onKeyPress = noop$c
      } = this.props;
      onKeyPress(event);
    };
  }

  render() {
    var {
      newDesignLanguage
    } = this.context || {};
    var {
      focusIndex,
      disclosureTabs,
      onClick = noop$c
    } = this.props;
    var tabs = disclosureTabs.map((_ref, index) => {
      var {
        id,
        content
      } = _ref,
          tabProps = _objectWithoutProperties(_ref, ["id", "content"]);

      return /*#__PURE__*/React__default.createElement(Item$8, Object.assign({}, tabProps, {
        key: id,
        id: id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content);
    });
    var classname = classNames(styles$1z.List, newDesignLanguage && styles$1z.newDesignLanguage);
    return /*#__PURE__*/React__default.createElement("ul", {
      className: classname,
      onKeyDown: handleKeyDown$1,
      onKeyUp: this.handleKeypress
    }, tabs);
  }

}
List$1.contextType = FeaturesContext;

function noop$c() {}

function handleKeyDown$1(event) {
  var {
    key
  } = event;

  if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {
    event.preventDefault();
    event.stopPropagation();
  }
}

function Panel({
  hidden,
  id,
  tabID,
  children
}) {
  var className = classNames(styles$1z.Panel, hidden && styles$1z['Panel-hidden']);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    id: id,
    role: "tabpanel",
    "aria-labelledby": tabID,
    tabIndex: -1
  }, children);
}

function Tab({
  id,
  focused,
  siblingTabHasFocus,
  children,
  onClick,
  selected,
  url,
  panelID,
  measuring,
  accessibilityLabel
}) {
  var wasSelected = React.useRef(selected);
  var panelFocused = React.useRef(false);
  var node = React.useRef(null);
  var {
    newDesignLanguage
  } = useFeatures(); // A tab can start selected when it is moved from the disclosure dropdown
  // into the main list, so we need to send focus from the tab to the panel
  // on mount and update

  React.useEffect(() => {
    if (measuring) {
      return;
    } // Because of timing issues with the render, we may still have the old,
    // in-disclosure version of the tab that has focus. Check for this
    // as a second indicator of focus


    var itemHadFocus = focused || document.activeElement && document.activeElement.id === id; // If we just check for selected, the panel for the active tab will
    // be focused on page load, which we don’t want

    if (itemHadFocus && selected && panelID != null && !panelFocused.current) {
      focusPanelID(panelID);
      panelFocused.current = true;
    }

    if (selected && !wasSelected.current && panelID != null) {
      focusPanelID(panelID);
    } else if (focused && node.current != null) {
      focusFirstFocusableNode(node.current);
    }

    wasSelected.current = selected;
  }, [focused, id, measuring, panelID, selected]);
  var handleClick = onClick && onClick.bind(null, id);
  var className = classNames(styles$1z.Tab, selected && styles$1z['Tab-selected']);
  var tabIndex;

  if (selected && !siblingTabHasFocus && !measuring) {
    tabIndex = 0;
  } else if (focused && !measuring) {
    tabIndex = 0;
  } else {
    tabIndex = -1;
  }

  var tabContainerClassNames = classNames(styles$1z.TabContainer, selected && styles$1z.Underline, newDesignLanguage && styles$1z.newDesignLanguage);
  var tabTitleClassNames = classNames(styles$1z.Title, newDesignLanguage && styles$1z.newDesignLanguage);
  var markup = url ? /*#__PURE__*/React__default.createElement(UnstyledLink, {
    id: id,
    url: url,
    role: "tab",
    tabIndex: tabIndex,
    onClick: handleClick,
    className: className,
    "aria-selected": selected,
    "aria-controls": panelID,
    "aria-label": accessibilityLabel,
    onMouseUp: handleMouseUpByBlurring
  }, /*#__PURE__*/React__default.createElement("span", {
    className: tabTitleClassNames
  }, children)) : /*#__PURE__*/React__default.createElement("button", {
    id: id,
    role: "tab",
    type: "button",
    tabIndex: tabIndex,
    className: className,
    onClick: handleClick,
    "aria-selected": selected,
    "aria-controls": panelID,
    "aria-label": accessibilityLabel,
    onMouseUp: handleMouseUpByBlurring
  }, /*#__PURE__*/React__default.createElement("span", {
    className: tabTitleClassNames
  }, children));
  return /*#__PURE__*/React__default.createElement("li", {
    className: tabContainerClassNames,
    ref: node
  }, markup);
}

function focusPanelID(panelID) {
  var panel = document.getElementById(panelID);

  if (panel) {
    panel.focus({
      preventScroll: true
    });
  }
}

var TabMeasurer = /*#__PURE__*/React.memo(function TabMeasurer({
  selected,
  tabs,
  activator,
  tabToFocus,
  siblingTabHasFocus,
  handleMeasurement: handleMeasurementProp
}) {
  var containerNode = React.useRef(null);
  var animationFrame = React.useRef(null);
  var handleMeasurement = React.useCallback(() => {
    if (animationFrame.current) {
      cancelAnimationFrame(animationFrame.current);
    }

    animationFrame.current = requestAnimationFrame(() => {
      if (!containerNode.current) {
        return;
      }

      var containerWidth = containerNode.current.offsetWidth;
      var hiddenTabNodes = containerNode.current.children;
      var hiddenTabNodesArray = Array.from(hiddenTabNodes);
      var hiddenTabWidths = hiddenTabNodesArray.map(node => {
        return node.getBoundingClientRect().width;
      });
      var disclosureWidth = hiddenTabWidths.pop() || 0;
      handleMeasurementProp({
        containerWidth,
        disclosureWidth,
        hiddenTabWidths
      });
    });
  }, [handleMeasurementProp]);
  React.useEffect(() => {
    handleMeasurement();
  }, [handleMeasurement, tabs]);
  useComponentDidMount(() => {
    if (process.env.NODE_ENV === 'development') {
      setTimeout(handleMeasurement, 0);
    }
  });
  var tabsMarkup = tabs.map((tab, index) => {
    return /*#__PURE__*/React__default.createElement(Tab, {
      measuring: true,
      key: "".concat(index).concat(tab.id, "Hidden"),
      id: "".concat(tab.id, "Measurer"),
      siblingTabHasFocus: siblingTabHasFocus,
      focused: index === tabToFocus,
      selected: index === selected,
      onClick: noop$d,
      url: tab.url
    }, tab.content);
  });
  var classname = classNames(styles$1z.Tabs, styles$1z.TabMeasurer);
  return /*#__PURE__*/React__default.createElement("div", {
    className: classname,
    ref: containerNode
  }, /*#__PURE__*/React__default.createElement(EventListener, {
    event: "resize",
    handler: handleMeasurement
  }), tabsMarkup, activator);
});

function noop$d() {}

var _ref$p = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.HorizontalDotsMinor
});

class TabsInner extends React.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      disclosureWidth: 0,
      containerWidth: Infinity,
      tabWidths: [],
      visibleTabs: [],
      hiddenTabs: [],
      showDisclosure: false,
      tabToFocus: -1
    };

    this.handleKeyPress = event => {
      var {
        tabToFocus,
        visibleTabs,
        hiddenTabs,
        showDisclosure
      } = this.state;
      var key = event.key;
      var tabsArrayInOrder = showDisclosure ? visibleTabs.concat(hiddenTabs) : [...visibleTabs];
      var newFocus = tabsArrayInOrder.indexOf(tabToFocus);

      if (key === 'ArrowRight' || key === 'ArrowDown') {
        newFocus += 1;

        if (newFocus === tabsArrayInOrder.length) {
          newFocus = 0;
        }
      }

      if (key === 'ArrowLeft' || key === 'ArrowUp') {
        if (newFocus === -1 || newFocus === 0) {
          newFocus = tabsArrayInOrder.length - 1;
        } else {
          newFocus -= 1;
        }
      }

      this.setState({
        tabToFocus: tabsArrayInOrder[newFocus]
      });
    };

    this.renderTabMarkup = (tab, index) => {
      var {
        selected
      } = this.props;
      var {
        tabToFocus
      } = this.state;
      return /*#__PURE__*/React__default.createElement(Tab, {
        key: "".concat(index, "-").concat(tab.id),
        id: tab.id,
        siblingTabHasFocus: tabToFocus > -1,
        focused: index === tabToFocus,
        selected: index === selected,
        onClick: this.handleTabClick,
        panelID: tab.panelID || "".concat(tab.id, "-panel"),
        accessibilityLabel: tab.accessibilityLabel,
        url: tab.url
      }, tab.content);
    };

    this.handleFocus = event => {
      var {
        selected,
        tabs
      } = this.props; // If we are explicitly focusing a non-selected tab, this focuses it

      var target = event.target;

      if (target.classList.contains(styles$1z.Tab) || target.classList.contains(styles$1z.Item)) {
        var tabToFocus = -1;
        tabs.every((tab, index) => {
          if (tab.id === target.id) {
            tabToFocus = index;
            return false;
          }

          return true;
        });
        this.setState({
          tabToFocus
        });
        return;
      }

      if (target.classList.contains(styles$1z.DisclosureActivator)) {
        return;
      } // If we are coming in from somewhere other than another tab, focus the
      // selected tab, and the focus (click) is not on the disclosure activator,
      // focus the selected tab


      if (!event.relatedTarget) {
        this.setState({
          tabToFocus: selected
        });
        return;
      }

      var relatedTarget = event.relatedTarget;

      if (relatedTarget instanceof HTMLElement && !relatedTarget.classList.contains(styles$1z.Tab) && !relatedTarget.classList.contains(styles$1z.Item) && !relatedTarget.classList.contains(styles$1z.DisclosureActivator)) {
        this.setState({
          tabToFocus: selected
        });
      }
    };

    this.handleBlur = event => {
      // If we blur and the target is not another tab, forget the focus position
      if (event.relatedTarget == null) {
        this.setState({
          tabToFocus: -1
        });
        return;
      }

      var target = event.relatedTarget; // If we are going to anywhere other than another tab, lose the last focused tab

      if (target instanceof HTMLElement && !target.classList.contains(styles$1z.Tab) && !target.classList.contains(styles$1z.Item)) {
        this.setState({
          tabToFocus: -1
        });
      }
    };

    this.handleDisclosureActivatorClick = () => {
      this.setState(({
        showDisclosure
      }) => ({
        showDisclosure: !showDisclosure
      }));
    };

    this.handleClose = () => {
      this.setState({
        showDisclosure: false
      });
    };

    this.handleMeasurement = measurements => {
      var {
        tabs,
        selected
      } = this.props;
      var {
        tabToFocus
      } = this.state;
      var {
        hiddenTabWidths: tabWidths,
        containerWidth,
        disclosureWidth
      } = measurements;
      var {
        visibleTabs,
        hiddenTabs
      } = getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
      this.setState({
        tabToFocus: tabToFocus === -1 ? -1 : selected,
        visibleTabs,
        hiddenTabs,
        disclosureWidth,
        containerWidth,
        tabWidths
      });
    };

    this.handleTabClick = id => {
      var {
        tabs,
        onSelect = noop$e
      } = this.props;
      var tab = tabs.find(aTab => aTab.id === id);

      if (tab == null) {
        return;
      }

      var selectedIndex = tabs.indexOf(tab);
      onSelect(selectedIndex);
    };
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    var {
      disclosureWidth,
      tabWidths,
      containerWidth
    } = prevState;
    var {
      visibleTabs,
      hiddenTabs
    } = getVisibleAndHiddenTabIndices(nextProps.tabs, nextProps.selected, disclosureWidth, tabWidths, containerWidth);
    return {
      visibleTabs,
      hiddenTabs,
      selected: nextProps.selected
    };
  }

  render() {
    var {
      tabs,
      selected,
      fitted,
      children,
      i18n,
      features
    } = this.props;
    var {
      tabToFocus,
      visibleTabs,
      hiddenTabs,
      showDisclosure
    } = this.state;
    var disclosureTabs = hiddenTabs.map(tabIndex => tabs[tabIndex]);
    var {
      newDesignLanguage
    } = features;
    var panelMarkup = children ? tabs.map((_tab, index) => {
      return selected === index ? /*#__PURE__*/React__default.createElement(Panel, {
        id: tabs[index].panelID || "".concat(tabs[index].id, "-panel"),
        tabID: tabs[index].id,
        key: tabs[index].id
      }, children) : /*#__PURE__*/React__default.createElement(Panel, {
        id: tabs[index].panelID || "".concat(tabs[index].id, "-panel"),
        tabID: tabs[index].id,
        key: tabs[index].id,
        hidden: true
      });
    }) : null;
    var tabsMarkup = visibleTabs.sort((tabA, tabB) => tabA - tabB).map(tabIndex => this.renderTabMarkup(tabs[tabIndex], tabIndex));
    var disclosureActivatorVisible = visibleTabs.length < tabs.length;
    var classname = classNames(styles$1z.Tabs, fitted && styles$1z.fitted, disclosureActivatorVisible && styles$1z.fillSpace, newDesignLanguage && styles$1z.newDesignLanguage);
    var wrapperClassName = classNames(styles$1z.Wrapper, newDesignLanguage && styles$1z.newDesignLanguage);
    var disclosureTabClassName = classNames(styles$1z.DisclosureTab, disclosureActivatorVisible && styles$1z['DisclosureTab-visible']);
    var activator = /*#__PURE__*/React__default.createElement("button", {
      type: "button",
      className: styles$1z.DisclosureActivator,
      onClick: this.handleDisclosureActivatorClick,
      "aria-label": i18n.translate('Polaris.Tabs.toggleTabsLabel')
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$1z.Title
    }, _ref$p));
    return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", {
      className: wrapperClassName
    }, /*#__PURE__*/React__default.createElement("ul", {
      role: "tablist",
      className: classname,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onKeyDown: handleKeyDown$2,
      onKeyUp: this.handleKeyPress
    }, tabsMarkup, /*#__PURE__*/React__default.createElement("li", {
      className: disclosureTabClassName
    }, /*#__PURE__*/React__default.createElement(Popover, {
      preferredPosition: "below",
      activator: activator,
      active: disclosureActivatorVisible && showDisclosure,
      onClose: this.handleClose
    }, /*#__PURE__*/React__default.createElement(List$1, {
      focusIndex: hiddenTabs.indexOf(tabToFocus),
      disclosureTabs: disclosureTabs,
      onClick: this.handleTabClick,
      onKeyPress: this.handleKeyPress
    })))), /*#__PURE__*/React__default.createElement(TabMeasurer, {
      tabToFocus: tabToFocus,
      activator: activator,
      selected: selected,
      tabs: tabs,
      siblingTabHasFocus: tabToFocus > -1,
      handleMeasurement: this.handleMeasurement
    })), panelMarkup);
  }

}

function noop$e() {}

function handleKeyDown$2(event) {
  var {
    key
  } = event;

  if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {
    event.preventDefault();
    event.stopPropagation();
  }
}

function Tabs(props) {
  var i18n = useI18n();
  var features = useFeatures();
  return /*#__PURE__*/React__default.createElement(TabsInner, Object.assign({}, props, {
    i18n: i18n,
    features: features
  }));
}

var styles$1A = {
  "Thumbnail": "Polaris-Thumbnail",
  "sizeSmall": "Polaris-Thumbnail--sizeSmall",
  "sizeMedium": "Polaris-Thumbnail--sizeMedium",
  "sizeLarge": "Polaris-Thumbnail--sizeLarge",
  "Image": "Polaris-Thumbnail__Image"
};

function Thumbnail({
  source,
  alt,
  size = 'medium'
}) {
  var className = classNames(styles$1A.Thumbnail, size && styles$1A[variationName('size', size)]);
  return /*#__PURE__*/React__default.createElement("span", {
    className: className
  }, /*#__PURE__*/React__default.createElement(Image, {
    alt: alt,
    source: source,
    className: styles$1A.Image
  }));
}

// that the interface defining the props is defined in this file, not imported
// from elsewhere. This silly workaround ensures that the Props Explorer table
// is generated correctly.

var Toast$1 = /*#__PURE__*/React.memo(function Toast(props) {
  var id = useUniqueId('Toast');
  var {
    showToast,
    hideToast
  } = useFrame();
  useDeepEffect(() => {
    showToast(_objectSpread2({
      id
    }, props));
    return () => {
      hideToast({
        id
      });
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [props]);
  return null;
});

var styles$1B = {
  "SearchDismissOverlay": "Polaris-TopBar-SearchDismissOverlay",
  "visible": "Polaris-TopBar-SearchDismissOverlay--visible",
  "fade-in": "Polaris-TopBar-SearchDismissOverlay__fade--in"
};

var _ref$q = /*#__PURE__*/React__default.createElement(ScrollLock$1, null);

function SearchDismissOverlay({
  onDismiss,
  visible
}) {
  var node = React.useRef(null);
  var handleDismiss = React.useCallback(({
    target
  }) => {
    if (target === node.current && onDismiss != null) {
      onDismiss();
    }
  }, [onDismiss]);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, visible ? _ref$q : null, /*#__PURE__*/React__default.createElement("div", {
    ref: node,
    className: classNames(styles$1B.SearchDismissOverlay, visible && styles$1B.visible),
    onClick: handleDismiss
  }));
}

var styles$1C = {
  "Search": "Polaris-TopBar-Search",
  "visible": "Polaris-TopBar-Search--visible",
  "Results": "Polaris-TopBar-Search__Results"
};

function Search({
  visible,
  children,
  onDismiss,
  overlayVisible = false
}) {
  if (children == null) {
    return null;
  }

  var overlayMarkup = visible ? /*#__PURE__*/React__default.createElement(SearchDismissOverlay, {
    onDismiss: onDismiss,
    visible: overlayVisible
  }) : null;
  return /*#__PURE__*/React__default.createElement("div", {
    className: classNames(styles$1C.Search, visible && styles$1C.visible)
  }, overlayMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1C.Results
  }, children));
}

var styles$1D = {
  "SearchField": "Polaris-TopBar-SearchField",
  "SearchField-newDesignLanguage": "Polaris-TopBar-SearchField__SearchField--newDesignLanguage",
  "Backdrop": "Polaris-TopBar-SearchField__Backdrop",
  "Input": "Polaris-TopBar-SearchField__Input",
  "focused": "Polaris-TopBar-SearchField--focused",
  "BackdropShowFocusBorder": "Polaris-TopBar-SearchField__BackdropShowFocusBorder",
  "Icon": "Polaris-TopBar-SearchField__Icon",
  "Clear": "Polaris-TopBar-SearchField__Clear",
  "toLightBackground": "Polaris-TopBar-SearchField--toLightBackground"
};

var _ref$r = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.CircleCancelMinor
});

var _ref2$8 = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.SearchMinor
});

function SearchField({
  value,
  focused,
  active,
  placeholder,
  onChange,
  onFocus,
  onBlur,
  onCancel,
  showFocusBorder
}) {
  var i18n = useI18n();
  var [forceActive, setForceActive] = React.useState(false);
  var {
    newDesignLanguage
  } = useFeatures();
  var input = React.useRef(null);
  var searchId = useUniqueId('SearchField');
  var handleChange = React.useCallback(({
    currentTarget
  }) => {
    onChange(currentTarget.value);
  }, [onChange]);
  var handleFocus = React.useCallback(() => onFocus && onFocus(), [onFocus]);
  var handleBlur = React.useCallback(() => onBlur && onBlur(), [onBlur]);
  var handleClear = React.useCallback(() => {
    onCancel && onCancel();

    if (!input.current) {
      return;
    }

    input.current.value = '';
    onChange('');
    input.current.focus();
  }, [onCancel, onChange]);
  React.useEffect(() => {
    if (!input.current) {
      return;
    }

    if (focused) {
      input.current.focus();
    } else {
      input.current.blur();
    }
  }, [focused]);
  var clearMarkup = value !== '' && /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    "aria-label": i18n.translate('Polaris.TopBar.SearchField.clearButtonLabel'),
    className: styles$1D.Clear,
    onClick: handleClear,
    onBlur: () => {
      setForceActive(false);
      handleClear();
    },
    onFocus: () => {
      handleFocus();
      setForceActive(true);
    }
  }, _ref$r);
  var className = classNames(styles$1D.SearchField, (focused || active || forceActive) && styles$1D.focused, newDesignLanguage && styles$1D['SearchField-newDesignLanguage']);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    onFocus: handleFocus,
    onBlur: handleBlur
  }, /*#__PURE__*/React__default.createElement(VisuallyHidden, null, /*#__PURE__*/React__default.createElement("label", {
    htmlFor: searchId
  }, i18n.translate('Polaris.TopBar.SearchField.search'))), /*#__PURE__*/React__default.createElement("input", {
    id: searchId,
    className: styles$1D.Input,
    placeholder: placeholder,
    type: "search",
    autoCapitalize: "off",
    autoComplete: "off",
    autoCorrect: "off",
    ref: input,
    value: value,
    onChange: handleChange,
    onKeyDown: preventDefault
  }), /*#__PURE__*/React__default.createElement("span", {
    className: styles$1D.Icon
  }, _ref2$8), clearMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: classNames(styles$1D.Backdrop, showFocusBorder && styles$1D.BackdropShowFocusBorder)
  }));
}

function preventDefault(event) {
  if (event.key === 'Enter') {
    event.preventDefault();
  }
}

var styles$1E = {
  "MessageIndicatorWrapper": "Polaris-MessageIndicator__MessageIndicatorWrapper",
  "MessageIndicator": "Polaris-MessageIndicator"
};

function MessageIndicator({
  children,
  active
}) {
  var indicatorMarkup = active && /*#__PURE__*/React__default.createElement("div", {
    className: styles$1E.MessageIndicator
  });
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1E.MessageIndicatorWrapper
  }, indicatorMarkup, children);
}

var styles$1F = {
  "Section": "Polaris-Menu-Message__Section"
};

function Message({
  title,
  description,
  action,
  link,
  badge
}) {
  var badgeMarkup = badge && /*#__PURE__*/React__default.createElement(Badge, {
    status: badge.status
  }, badge.content);
  var {
    to,
    content: linkContent
  } = link;
  var {
    onClick,
    content: actionContent
  } = action;
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1F.Section
  }, /*#__PURE__*/React__default.createElement(Popover.Section, null, /*#__PURE__*/React__default.createElement(Stack, {
    vertical: true,
    spacing: "tight"
  }, /*#__PURE__*/React__default.createElement(TextContainer, null, /*#__PURE__*/React__default.createElement(Heading, null, title, badgeMarkup), /*#__PURE__*/React__default.createElement("p", null, description)), /*#__PURE__*/React__default.createElement(Link, {
    url: to
  }, linkContent), /*#__PURE__*/React__default.createElement(Button, {
    plain: true,
    onClick: onClick
  }, actionContent))));
}

var styles$1G = {
  "ActivatorWrapper": "Polaris-TopBar-Menu__ActivatorWrapper",
  "Activator": "Polaris-TopBar-Menu__Activator",
  "Section": "Polaris-TopBar-Menu__Section"
};

function Menu(props) {
  var {
    actions,
    onOpen,
    onClose,
    open,
    activatorContent,
    message
  } = props;
  var badgeProps = message && message.badge && {
    content: message.badge.content,
    status: message.badge.status
  };
  var messageMarkup = message && /*#__PURE__*/React__default.createElement(Message, {
    title: message.title,
    description: message.description,
    action: {
      onClick: message.action.onClick,
      content: message.action.content
    },
    link: {
      to: message.link.to,
      content: message.link.content
    },
    badge: badgeProps
  });
  var isFullHeight = Boolean(message);
  return /*#__PURE__*/React__default.createElement(Popover, {
    activator: /*#__PURE__*/React__default.createElement("div", {
      className: styles$1G.ActivatorWrapper
    }, /*#__PURE__*/React__default.createElement("button", {
      type: "button",
      className: styles$1G.Activator,
      onClick: onOpen
    }, activatorContent)),
    active: open,
    onClose: onClose,
    fixed: true,
    fullHeight: isFullHeight,
    preferredAlignment: "right"
  }, /*#__PURE__*/React__default.createElement(ActionList, {
    onActionAnyItem: onClose,
    sections: actions
  }), messageMarkup);
}

var styles$1H = {
  "Details": "Polaris-TopBar-UserMenu__Details",
  "Name": "Polaris-TopBar-UserMenu__Name",
  "Detail": "Polaris-TopBar-UserMenu__Detail"
};

function UserMenu({
  name,
  detail,
  avatar,
  initials,
  actions,
  message,
  onToggle,
  open
}) {
  var showIndicator = Boolean(message);
  var activatorContentMarkup = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(MessageIndicator, {
    active: showIndicator
  }, /*#__PURE__*/React__default.createElement(Avatar, {
    size: "small",
    source: avatar,
    initials: initials && initials.replace(' ', '')
  })), /*#__PURE__*/React__default.createElement("span", {
    className: styles$1H.Details
  }, /*#__PURE__*/React__default.createElement("p", {
    className: styles$1H.Name
  }, name), /*#__PURE__*/React__default.createElement("p", {
    className: styles$1H.Detail
  }, detail)));
  return /*#__PURE__*/React__default.createElement(Menu, {
    activatorContent: activatorContentMarkup,
    open: open,
    onOpen: onToggle,
    onClose: onToggle,
    actions: actions,
    message: message
  });
}

var styles$1I = {
  "TopBar": "Polaris-TopBar",
  "TopBar-newDesignLanguage": "Polaris-TopBar__TopBar--newDesignLanguage",
  "LogoContainer": "Polaris-TopBar__LogoContainer",
  "Logo": "Polaris-TopBar__Logo",
  "LogoLink": "Polaris-TopBar__LogoLink",
  "ContextControl": "Polaris-TopBar__ContextControl",
  "NavigationIcon": "Polaris-TopBar__NavigationIcon",
  "focused": "Polaris-TopBar--focused",
  "Contents": "Polaris-TopBar__Contents",
  "SearchField": "Polaris-TopBar__SearchField",
  "SecondaryMenu": "Polaris-TopBar__SecondaryMenu"
};

var _ref$s = /*#__PURE__*/React__default.createElement(Icon, {
  source: polarisIcons.MobileHamburgerMajorMonotone
});

// TypeScript can't generate types that correctly infer the typing of
// subcomponents so explicitly state the subcomponents in the type definition.
// Letting this be implicit works in this project but fails in projects that use
// generated *.d.ts files.
var TopBar = function TopBar({
  showNavigationToggle,
  userMenu,
  searchResults,
  searchField,
  secondaryMenu,
  searchResultsVisible,
  searchResultsOverlayVisible = false,
  onNavigationToggle,
  onSearchResultsDismiss,
  contextControl
}) {
  var i18n = useI18n();
  var {
    logo
  } = useTheme();
  var {
    newDesignLanguage
  } = useFeatures();
  var {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle(false);
  var iconClassName = classNames(styles$1I.NavigationIcon, focused && styles$1I.focused);
  var navigationButtonMarkup = showNavigationToggle ? /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: iconClassName,
    onClick: onNavigationToggle,
    onFocus: forceTrueFocused,
    onBlur: forceFalseFocused,
    "aria-label": i18n.translate('Polaris.TopBar.toggleMenuLabel')
  }, _ref$s) : null;
  var width = getWidth(logo, 104);
  var contextMarkup;

  if (contextControl) {
    contextMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: styles$1I.ContextControl
    }, contextControl);
  } else if (logo) {
    contextMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: styles$1I.LogoContainer
    }, /*#__PURE__*/React__default.createElement(UnstyledLink, {
      url: logo.url || '',
      className: styles$1I.LogoLink,
      style: {
        width
      }
    }, /*#__PURE__*/React__default.createElement(Image, {
      source: logo.topBarSource || '',
      alt: logo.accessibilityLabel || '',
      className: styles$1I.Logo,
      style: {
        width
      }
    })));
  }

  var searchMarkup = searchField ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, searchField, /*#__PURE__*/React__default.createElement(Search, {
    visible: searchResultsVisible,
    onDismiss: onSearchResultsDismiss,
    overlayVisible: searchResultsOverlayVisible
  }, searchResults)) : null;
  var className = classNames(styles$1I.TopBar, newDesignLanguage && styles$1I['TopBar-newDesignLanguage']);
  return /*#__PURE__*/React__default.createElement("div", {
    className: className
  }, navigationButtonMarkup, contextMarkup, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1I.Contents
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles$1I.SearchField
  }, searchMarkup), /*#__PURE__*/React__default.createElement("div", {
    className: styles$1I.SecondaryMenu
  }, secondaryMenu), userMenu));
};
TopBar.Menu = Menu;
TopBar.SearchField = SearchField;
TopBar.UserMenu = UserMenu;

var MINUTE = 60;
var HOUR = MINUTE * 60;
function ensureTwoDigits(num) {
  return num > 9 ? String(num) : "0".concat(num);
}
function secondsToTimeComponents(seconds) {
  return {
    hours: Math.floor(seconds / HOUR),
    minutes: Math.floor(seconds % HOUR / MINUTE),
    seconds: seconds % MINUTE
  };
}
function secondsToTimestamp(numSeconds) {
  var {
    hours,
    minutes,
    seconds
  } = secondsToTimeComponents(numSeconds);
  var hasHours = numSeconds > HOUR;
  var hoursText = hasHours ? "".concat(hours, ":") : '';
  var minutesText = "".concat(hasHours ? ensureTwoDigits(minutes) : minutes, ":");
  var secondsText = "".concat(ensureTwoDigits(seconds));
  return "".concat(hoursText).concat(minutesText).concat(secondsText);
}
function secondsToDurationTranslationKey(numSeconds) {
  var {
    hours,
    minutes,
    seconds
  } = secondsToTimeComponents(numSeconds);
  var durationKey = 'Polaris.VideoThumbnail.playButtonA11yLabel.duration';

  if (hours) {
    durationKey += ".hours.".concat(hours > 1 ? 'other' : 'one');

    if (seconds) {
      if (minutes > 1) {
        durationKey += "".concat(seconds > 1 ? '.minutesAndSeconds' : '.minutesAndSecond');
      } else if (minutes === 1) {
        durationKey += "".concat(seconds > 1 ? '.minuteAndSeconds' : '.minuteAndSecond');
      } else {
        durationKey += "".concat(seconds > 1 ? '.andSeconds' : '.andSecond');
      }
    } else if (minutes) {
      durationKey += "".concat(minutes > 1 ? '.andMinutes' : '.andMinute');
    } else {
      durationKey += '.only';
    }
  } else if (minutes) {
    durationKey += ".minutes.".concat(minutes > 1 ? 'other' : 'one');

    if (seconds) {
      durationKey += "".concat(seconds > 1 ? '.andSeconds' : '.andSecond');
    } else {
      durationKey += '.only';
    }
  } else if (seconds) {
    durationKey += seconds > 1 ? '.seconds.other' : '.seconds.one';
  }

  return durationKey;
}

const img$2 = "data:image/svg+xml,%3csvg viewBox='0 0 38 38' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd'%3e%3cpath d='M19 1C9.06 1 1 9.057 1 19c0 9.94 8.057 18 18 18 9.94 0 18-8.057 18-18 0-9.94-8.057-18-18-18z' fill='white'/%3e%3cpath d='M19 1C9.06 1 1 9.057 1 19c0 9.94 8.057 18 18 18 9.94 0 18-8.057 18-18 0-9.94-8.057-18-18-18z' fill='none' stroke='%23b5b5b5'/%3e%3cpath d='M15 11.723c0-.605.7-.942 1.173-.564l10.93 7.215a.72.72 0 010 1.128l-10.93 7.216A.723.723 0 0115 26.153v-14.43z' fill-opacity='.557'/%3e%3c/svg%3e";

var styles$1J = {
  "Thumbnail": "Polaris-VideoThumbnail__Thumbnail",
  "WithPlayer": "Polaris-VideoThumbnail__WithPlayer",
  "PlayButton": "Polaris-VideoThumbnail__PlayButton",
  "PlayIcon": "Polaris-VideoThumbnail__PlayIcon",
  "Timestamp": "Polaris-VideoThumbnail__Timestamp",
  "withProgress": "Polaris-VideoThumbnail--withProgress",
  "Progress": "Polaris-VideoThumbnail__Progress",
  "Indicator": "Polaris-VideoThumbnail__Indicator",
  "ProgressBar": "Polaris-VideoThumbnail__ProgressBar",
  "Label": "Polaris-VideoThumbnail__Label"
};

function VideoThumbnail({
  thumbnailUrl,
  videoLength = 0,
  videoProgress = 0,
  showVideoProgress = false,
  accessibilityLabel,
  onClick,
  onBeforeStartPlaying
}) {
  var i18n = useI18n();
  var buttonLabel;

  if (accessibilityLabel) {
    buttonLabel = accessibilityLabel;
  } else if (videoLength) {
    var {
      hours,
      minutes,
      seconds
    } = secondsToTimeComponents(videoLength);
    buttonLabel = i18n.translate('Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration', {
      duration: i18n.translate(secondsToDurationTranslationKey(videoLength), {
        hourCount: hours,
        minuteCount: minutes,
        secondCount: seconds
      })
    });
  } else {
    buttonLabel = i18n.translate('Polaris.VideoThumbnail.playButtonA11yLabel.default');
  }

  var timeStampMarkup = videoLength ? /*#__PURE__*/React__default.createElement("p", {
    className: classNames(styles$1J.Timestamp, showVideoProgress && styles$1J.withProgress)
  }, secondsToTimestamp(videoLength)) : null;
  var progressMarkup = null;

  if (showVideoProgress) {
    var progressValue = calculateProgress(videoLength, videoProgress);
    var progressValuePercents = Math.round(progressValue * 100);
    progressMarkup = /*#__PURE__*/React__default.createElement("div", {
      className: styles$1J.Progress
    }, /*#__PURE__*/React__default.createElement("progress", {
      className: styles$1J.ProgressBar,
      value: progressValuePercents,
      max: "100"
    }), /*#__PURE__*/React__default.createElement("div", {
      className: styles$1J.Indicator,
      style: {
        transform: "scaleX(".concat(progressValue, ")")
      }
    }, /*#__PURE__*/React__default.createElement("span", {
      className: styles$1J.Label
    }, progressValuePercents, "%")));
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$1J.Thumbnail,
    style: {
      backgroundImage: "url(".concat(thumbnailUrl, ")")
    }
  }, /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: styles$1J.PlayButton,
    "aria-label": buttonLabel,
    onClick: onClick,
    onMouseEnter: onBeforeStartPlaying,
    onFocus: onBeforeStartPlaying,
    onTouchStart: onBeforeStartPlaying
  }, /*#__PURE__*/React__default.createElement("img", {
    className: styles$1J.PlayIcon,
    src: img$2,
    alt: ""
  })), timeStampMarkup, progressMarkup);
}

function calculateProgress(videoLength, videoProgress) {
  if (videoProgress > videoLength && process.env.NODE_ENV === 'development') {
    // eslint-disable-next-line no-console
    console.warn('Value passed to the video progress should not exceed video length. Resetting progress to 100%.');
  }

  if (videoProgress > 0 && videoLength > 0) {
    var progress = parseFloat((videoProgress / videoLength).toFixed(2));
    return progress > 1 ? 1 : progress;
  }

  return 0;
}

exports.AccountConnection = AccountConnection;
exports.ActionList = ActionList;
exports.ActionMenu = ActionMenu;
exports.AppProvider = AppProvider$1;
exports.Autocomplete = Autocomplete;
exports.Avatar = Avatar;
exports.Backdrop = Backdrop;
exports.Badge = Badge;
exports.Banner = Banner;
exports.Breadcrumbs = Breadcrumbs;
exports.Button = Button;
exports.ButtonGroup = ButtonGroup;
exports.CalloutCard = CalloutCard;
exports.Caption = Caption;
exports.Card = Card;
exports.Checkbox = Checkbox$1;
exports.ChoiceList = ChoiceList;
exports.Collapsible = Collapsible;
exports.ColorPicker = ColorPicker;
exports.Connected = Connected;
exports.ContextualSaveBar = ContextualSaveBar;
exports.DATA_ATTRIBUTE = DATA_ATTRIBUTE;
exports.DEFAULT_TOAST_DURATION = DEFAULT_TOAST_DURATION;
exports.DEFAULT_TOAST_DURATION_WITH_ACTION = DEFAULT_TOAST_DURATION_WITH_ACTION;
exports.DataTable = DataTable;
exports.DatePicker = DatePicker;
exports.DescriptionList = DescriptionList;
exports.DisplayText = DisplayText;
exports.DropZone = DropZone;
exports.EmptySearchResult = EmptySearchResult;
exports.EmptyState = EmptyState;
exports.EventListener = EventListener;
exports.ExceptionList = ExceptionList;
exports.Filters = Filters;
exports.Focus = Focus;
exports.FooterHelp = FooterHelp;
exports.Form = Form;
exports.FormLayout = FormLayout;
exports.Frame = Frame;
exports.Heading = Heading;
exports.Icon = Icon;
exports.Image = Image;
exports.Indicator = Indicator;
exports.InlineError = InlineError;
exports.KeyboardKey = KeyboardKey;
exports.KeypressListener = KeypressListener;
exports.KonamiCode = KonamiCode;
exports.Label = Label;
exports.Labelled = Labelled;
exports.Layout = Layout;
exports.Link = Link;
exports.List = List;
exports.Loading = Loading$1;
exports.MediaCard = MediaCard;
exports.Modal = Modal;
exports.Navigation = Navigation$1;
exports.OptionList = OptionList;
exports.Page = Page;
exports.PageActions = PageActions;
exports.Pagination = Pagination;
exports.PolarisTestProvider = PolarisTestProvider;
exports.Popover = Popover;
exports.Portal = Portal;
exports.PositionedOverlay = PositionedOverlay;
exports.ProgressBar = ProgressBar;
exports.RadioButton = RadioButton;
exports.RangeSlider = RangeSlider;
exports.ResourceItem = ResourceItem;
exports.ResourceList = ResourceList;
exports.ScrollLock = ScrollLock$1;
exports.Scrollable = Scrollable;
exports.Select = Select;
exports.SettingToggle = SettingToggle;
exports.Sheet = Sheet;
exports.SkeletonBodyText = SkeletonBodyText;
exports.SkeletonDisplayText = SkeletonDisplayText;
exports.SkeletonPage = SkeletonPage;
exports.SkeletonThumbnail = SkeletonThumbnail;
exports.Spinner = Spinner;
exports.Stack = Stack;
exports.Sticky = Sticky;
exports.Subheading = Subheading;
exports.Tabs = Tabs;
exports.Tag = Tag;
exports.TextContainer = TextContainer;
exports.TextField = TextField;
exports.TextStyle = TextStyle;
exports.ThemeProvider = ThemeProvider;
exports.Thumbnail = Thumbnail;
exports.Toast = Toast$1;
exports.Tooltip = Tooltip;
exports.TopBar = TopBar;
exports.TrapFocus = TrapFocus;
exports.Truncate = Truncate;
exports.UNSTABLE_Tokens = Tokens;
exports.UNSTABLE_toCssCustomPropertySyntax = toCssCustomPropertySyntax;
exports.UnstyledLink = UnstyledLink;
exports.VideoThumbnail = VideoThumbnail;
exports.VisuallyHidden = VisuallyHidden;
exports._SECRET_INTERNAL_FilterControl = FilterControl;
exports._SECRET_INTERNAL_SCROLL_LOCK_MANAGER_CONTEXT = ScrollLockManagerContext;
exports._SECRET_INTERNAL_WITHIN_CONTENT_CONTEXT = WithinContentContext;
exports.buttonFrom = buttonFrom;
exports.buttonsFrom = buttonsFrom;
exports.errorTextID = errorTextID;
exports.hsbToHex = hsbToHex;
exports.hsbToRgb = hsbToRgb;
exports.hslToRgb = hslToRgb;
exports.isNavigationItemActive = isNavigationItemActive;
exports.isNewDesignLanguageColor = isNewDesignLanguageColor;
exports.rgbString = rgbString;
exports.rgbToHex = rgbToHex;
exports.rgbToHsb = rgbToHsb;
exports.rgbToHsl = rgbToHsl;
exports.rgbaString = rgbaString;
