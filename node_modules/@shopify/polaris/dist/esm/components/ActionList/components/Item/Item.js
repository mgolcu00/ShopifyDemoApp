import React$1 from 'react';
import { useFeatures } from '../../../../utilities/features/hooks.js';
import { classNames } from '../../../../utilities/css.js';
import { UnstyledLink as UnstyledLink$1 } from '../../../UnstyledLink/UnstyledLink.js';
import { Icon as Icon$1 } from '../../../Icon/Icon.js';
import { Scrollable as Scrollable$1 } from '../../../Scrollable/Scrollable.js';
import { Badge as Badge$1 } from '../../../Badge/Badge.js';
import { TextStyle as TextStyle$1 } from '../../../TextStyle/TextStyle.js';
import styles from '../../ActionList.scss.js';

var _ref = /*#__PURE__*/React$1.createElement(Scrollable$1.ScrollTo, null);

function Item({
  id,
  badge,
  content,
  accessibilityLabel,
  helpText,
  url,
  onAction,
  icon,
  image,
  suffix,
  disabled,
  external,
  destructive,
  ellipsis,
  active,
  role
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var className = classNames(styles.Item, disabled && styles.disabled, destructive && styles.destructive, active && styles.active, newDesignLanguage && styles.newDesignLanguage);
  var imageElement = null;

  if (icon) {
    imageElement = /*#__PURE__*/React$1.createElement("div", {
      className: styles.Image
    }, /*#__PURE__*/React$1.createElement(Icon$1, {
      source: icon
    }));
  } else if (image) {
    imageElement = /*#__PURE__*/React$1.createElement("div", {
      role: "presentation",
      className: styles.Image,
      style: {
        backgroundImage: "url(".concat(image)
      }
    });
  }

  var contentText = ellipsis && content ? "".concat(content, "\u2026") : content;
  var contentMarkup = helpText ? /*#__PURE__*/React$1.createElement("div", null, /*#__PURE__*/React$1.createElement("div", null, contentText), /*#__PURE__*/React$1.createElement(TextStyle$1, {
    variation: "subdued"
  }, helpText)) : contentText;
  var badgeMarkup = badge && /*#__PURE__*/React$1.createElement("span", {
    className: styles.Suffix
  }, /*#__PURE__*/React$1.createElement(Badge$1, {
    status: badge.status
  }, badge.content));
  var suffixMarkup = suffix && /*#__PURE__*/React$1.createElement("span", {
    className: styles.Suffix
  }, suffix);
  var textMarkup = imageElement ? /*#__PURE__*/React$1.createElement("div", {
    className: styles.Text
  }, contentMarkup) : contentMarkup;
  var contentElement = /*#__PURE__*/React$1.createElement("div", {
    className: styles.Content
  }, imageElement, textMarkup, badgeMarkup, suffixMarkup);
  var scrollMarkup = active ? _ref : null;
  var control = url ? /*#__PURE__*/React$1.createElement(UnstyledLink$1, {
    id: id,
    url: url,
    className: className,
    external: external,
    "aria-label": accessibilityLabel,
    onClick: onAction
  }, contentElement) : /*#__PURE__*/React$1.createElement("button", {
    id: id,
    type: "button",
    className: className,
    disabled: disabled,
    "aria-label": accessibilityLabel,
    onClick: onAction
  }, contentElement);
  return /*#__PURE__*/React$1.createElement("li", {
    role: role,
    "aria-selected": active
  }, scrollMarkup, control);
}

export { Item };
