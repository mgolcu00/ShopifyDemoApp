import { objectWithoutProperties as _objectWithoutProperties } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React$1, { useState, useCallback } from 'react';
import { useFeatures } from '../../../../utilities/features/hooks.js';
import { Button as Button$1 } from '../../../Button/Button.js';
import { ButtonGroup as ButtonGroup$1 } from '../../../ButtonGroup/ButtonGroup.js';
import { sortAndOverrideActionOrder } from '../../utilities.js';
import { MenuAction as MenuAction$1 } from '../MenuAction/MenuAction.js';
import { MenuGroup as MenuGroup$1 } from '../MenuGroup/MenuGroup.js';
import styles from './Actions.scss.js';

function Actions({
  actions = [],
  groups = []
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var [activeMenuGroup, setActiveMenuGroup] = useState(undefined);
  var handleMenuGroupToggle = useCallback(group => setActiveMenuGroup(activeMenuGroup ? undefined : group), [activeMenuGroup]);
  var handleMenuGroupClose = useCallback(() => setActiveMenuGroup(undefined), []);
  var menuActions = [...actions, ...groups];
  var overriddenActions = sortAndOverrideActionOrder(menuActions);
  var actionMarkup = overriddenActions.map((action, index) => {
    if ('title' in action) {
      var {
        title,
        actions: _actions
      } = action,
          _rest = _objectWithoutProperties(action, ["title", "actions"]);

      return _actions.length > 0 ? /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({
        key: "MenuGroup-".concat(index),
        title: title,
        active: title === activeMenuGroup,
        actions: _actions
      }, _rest, {
        onOpen: handleMenuGroupToggle,
        onClose: handleMenuGroupClose
      })) : null;
    }

    var {
      content,
      onAction
    } = action,
        rest = _objectWithoutProperties(action, ["content", "onAction"]);

    return newDesignLanguage ? /*#__PURE__*/React$1.createElement(Button$1, Object.assign({
      key: index,
      onClick: onAction
    }, rest), content) : /*#__PURE__*/React$1.createElement(MenuAction$1, Object.assign({
      key: "MenuAction-".concat(index),
      content: content,
      onAction: onAction
    }, rest));
  });
  return /*#__PURE__*/React$1.createElement("div", {
    className: styles.ActionsLayout
  }, newDesignLanguage ? /*#__PURE__*/React$1.createElement(ButtonGroup$1, null, actionMarkup) : actionMarkup);
}

export { Actions };
