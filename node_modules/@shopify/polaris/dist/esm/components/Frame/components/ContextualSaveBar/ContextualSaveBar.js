import React$1, { useCallback } from 'react';
import { useTheme } from '../../../../utilities/theme/hooks.js';
import { useFeatures } from '../../../../utilities/features/hooks.js';
import { ThemeProvider as ThemeProvider$1 } from '../../../ThemeProvider/ThemeProvider.js';
import { useI18n } from '../../../../utilities/i18n/hooks.js';
import { classNames } from '../../../../utilities/css.js';
import { Image as Image$1 } from '../../../Image/Image.js';
import { Button as Button$1 } from '../../../Button/Button.js';
import { useToggle as useToggle$1 } from '../../../../utilities/use-toggle.js';
import { Stack as Stack$1 } from '../../../Stack/Stack.js';
import { getWidth as getWidth$1 } from '../../../../utilities/get-width.js';
import { DiscardConfirmationModal as DiscardConfirmationModal$1 } from './components/DiscardConfirmationModal/DiscardConfirmationModal.js';
import styles from './ContextualSaveBar.scss.js';

function ContextualSaveBar({
  alignContentFlush,
  message,
  saveAction,
  discardAction,
  fullWidth
}) {
  var i18n = useI18n();
  var {
    logo
  } = useTheme();
  var {
    newDesignLanguage = false
  } = useFeatures();
  var {
    value: discardConfirmationModalVisible,
    toggle: toggleDiscardConfirmationModal,
    setFalse: closeDiscardConfirmationModal
  } = useToggle$1(false);
  var handleDiscardAction = useCallback(() => {
    if (discardAction && discardAction.onAction) {
      discardAction.onAction();
    }

    closeDiscardConfirmationModal();
  }, [closeDiscardConfirmationModal, discardAction]);
  var discardActionContent = discardAction && discardAction.content ? discardAction.content : i18n.translate('Polaris.ContextualSaveBar.discard');
  var discardActionHandler;

  if (discardAction && discardAction.discardConfirmationModal) {
    discardActionHandler = toggleDiscardConfirmationModal;
  } else if (discardAction) {
    discardActionHandler = discardAction.onAction;
  }

  var discardConfirmationModalMarkup = discardAction && discardAction.onAction && discardAction.discardConfirmationModal && /*#__PURE__*/React$1.createElement(DiscardConfirmationModal$1, {
    open: discardConfirmationModalVisible,
    onCancel: toggleDiscardConfirmationModal,
    onDiscard: handleDiscardAction
  });
  var discardActionMarkup = discardAction && /*#__PURE__*/React$1.createElement(Button$1, {
    url: discardAction.url,
    onClick: discardActionHandler,
    loading: discardAction.loading,
    disabled: discardAction.disabled,
    accessibilityLabel: discardAction.content
  }, discardActionContent);
  var saveActionContent = saveAction && saveAction.content ? saveAction.content : i18n.translate('Polaris.ContextualSaveBar.save');
  var saveActionMarkup = saveAction && /*#__PURE__*/React$1.createElement(Button$1, {
    primary: true,
    url: saveAction.url,
    onClick: saveAction.onAction,
    loading: saveAction.loading,
    disabled: saveAction.disabled,
    accessibilityLabel: saveAction.content
  }, saveActionContent);
  var width = getWidth$1(logo, 104);
  var imageMarkup = logo && /*#__PURE__*/React$1.createElement(Image$1, {
    style: {
      width
    },
    source: logo.contextualSaveBarSource || '',
    alt: ""
  });
  var logoMarkup = alignContentFlush ? null : /*#__PURE__*/React$1.createElement("div", {
    className: styles.LogoContainer,
    style: {
      width
    }
  }, imageMarkup);
  var contexualSaveBarClassName = classNames(styles.ContextualSaveBar, newDesignLanguage && styles.newDesignLanguage);
  var contentsClassName = classNames(styles.Contents, fullWidth && styles.fullWidth);
  return /*#__PURE__*/React$1.createElement(ThemeProvider$1, {
    theme: {
      colorScheme: 'inverse'
    }
  }, /*#__PURE__*/React$1.createElement("div", {
    className: contexualSaveBarClassName
  }, logoMarkup, /*#__PURE__*/React$1.createElement("div", {
    className: contentsClassName
  }, /*#__PURE__*/React$1.createElement("h2", {
    className: styles.Message
  }, message), /*#__PURE__*/React$1.createElement("div", {
    className: styles.ActionContainer
  }, /*#__PURE__*/React$1.createElement(Stack$1, {
    spacing: "tight",
    wrap: false
  }, discardActionMarkup, saveActionMarkup)))), discardConfirmationModalMarkup);
}

export { ContextualSaveBar };
