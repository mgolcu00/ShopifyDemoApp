import React$1, { Component } from 'react';
import debounce$1 from 'lodash/debounce';
import styles from './Loading.scss.js';

var INITIAL_STEP = 10;
var STUCK_THRESHOLD = 99;
class Loading extends Component {
  constructor(...args) {
    super(...args);
    this.state = {
      progress: 0,
      step: INITIAL_STEP,
      animation: null
    };
    this.ariaValuenow = debounce$1(() => {
      var {
        progress
      } = this.state;
      return Math.floor(progress / 10) * 10;
    }, 15);
  }

  componentDidMount() {
    this.increment();
  }

  componentWillUnmount() {
    var {
      animation
    } = this.state;

    if (animation != null) {
      cancelAnimationFrame(animation);
    }
  }

  render() {
    var {
      progress
    } = this.state;
    var customStyles = {
      transform: "scaleX(".concat(Math.floor(progress) / 100, ")")
    };
    var ariaValuenow = this.ariaValuenow();
    return /*#__PURE__*/React$1.createElement("div", {
      className: styles.Loading
    }, /*#__PURE__*/React$1.createElement("div", {
      className: styles.Level,
      style: customStyles,
      "aria-valuenow": ariaValuenow,
      "aria-valuemin": 0,
      "aria-valuemax": 100,
      role: "progressbar"
    }));
  }

  increment() {
    var {
      progress,
      step
    } = this.state;

    if (progress >= STUCK_THRESHOLD) {
      return;
    }

    var animation = requestAnimationFrame(() => this.increment());
    this.setState({
      progress: Math.min(progress + step, 100),
      step: Math.pow(INITIAL_STEP, -(progress / 25)),
      animation
    });
  }

}

export { Loading };
