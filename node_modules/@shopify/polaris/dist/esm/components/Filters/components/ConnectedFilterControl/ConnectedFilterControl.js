import React$1, { Component, createRef } from 'react';
import { FeaturesContext } from '../../../../utilities/features/context.js';
import debounce$1 from 'lodash/debounce';
import { EventListener as EventListener$1 } from '../../../EventListener/EventListener.js';
import { classNames } from '../../../../utilities/css.js';
import { Popover as Popover$1 } from '../../../Popover/Popover.js';
import { Button as Button$1 } from '../../../Button/Button.js';
import styles from './ConnectedFilterControl.scss.js';
import { Item as Item$1 } from './components/Item/Item.js';

var FILTER_FIELD_MIN_WIDTH = 150;
class ConnectedFilterControl extends Component {
  constructor(...args) {
    super(...args);
    this.context = void 0;
    this.state = {
      availableWidth: 0,
      proxyButtonsWidth: {}
    };
    this.container = /*#__PURE__*/createRef();
    this.proxyButtonContainer = /*#__PURE__*/createRef();
    this.moreFiltersButtonContainer = /*#__PURE__*/createRef();
    this.handleResize = debounce$1(() => {
      this.measureProxyButtons();
      this.measureAvailableWidth();
    }, 40, {
      leading: true,
      trailing: true,
      maxWait: 40
    });
  }

  componentDidMount() {
    this.handleResize();
  }

  render() {
    var {
      newDesignLanguage
    } = this.context || {};
    var {
      children,
      rightPopoverableActions,
      rightAction,
      auxiliary,
      forceShowMorefiltersButton = true
    } = this.props;
    var actionsToRender = rightPopoverableActions != null ? this.getActionsToRender(rightPopoverableActions) : [];
    var className = classNames(styles.ConnectedFilterControl, rightPopoverableActions && styles.right, newDesignLanguage && styles.newDesignLanguage);
    var shouldRenderMoreFiltersButton = forceShowMorefiltersButton || rightPopoverableActions && rightPopoverableActions.length !== actionsToRender.length;
    var RightContainerClassName = classNames(styles.RightContainer, !shouldRenderMoreFiltersButton && styles.RightContainerWithoutMoreFilters);
    var rightMarkup = actionsToRender.length > 0 ? /*#__PURE__*/React$1.createElement("div", {
      className: RightContainerClassName
    }, this.popoverFrom(actionsToRender)) : null;
    var moreFiltersButtonContainerClassname = classNames(styles.MoreFiltersButtonContainer, actionsToRender.length === 0 && newDesignLanguage && styles.onlyButtonVisible);
    var rightActionMarkup = rightAction ? /*#__PURE__*/React$1.createElement("div", {
      ref: this.moreFiltersButtonContainer,
      className: moreFiltersButtonContainerClassname
    }, shouldRenderMoreFiltersButton && /*#__PURE__*/React$1.createElement(Item$1, null, rightAction)) : null;
    var proxyButtonMarkup = rightPopoverableActions ? /*#__PURE__*/React$1.createElement("div", {
      className: styles.ProxyButtonContainer,
      ref: this.proxyButtonContainer,
      "aria-hidden": true
    }, rightPopoverableActions.map(action => /*#__PURE__*/React$1.createElement("div", {
      key: action.key,
      "data-key": action.key
    }, this.activatorButtonFrom(action)))) : null;
    var auxMarkup = auxiliary ? /*#__PURE__*/React$1.createElement("div", {
      className: styles.AuxiliaryContainer
    }, auxiliary) : null;
    return /*#__PURE__*/React$1.createElement(React$1.Fragment, null, proxyButtonMarkup, /*#__PURE__*/React$1.createElement("div", {
      className: styles.Wrapper
    }, /*#__PURE__*/React$1.createElement("div", {
      className: className,
      ref: this.container
    }, /*#__PURE__*/React$1.createElement("div", {
      className: styles.CenterContainer
    }, /*#__PURE__*/React$1.createElement(Item$1, null, children)), rightMarkup, rightActionMarkup, /*#__PURE__*/React$1.createElement(EventListener$1, {
      event: "resize",
      handler: this.handleResize
    })), auxMarkup));
  }

  measureProxyButtons() {
    if (this.proxyButtonContainer.current) {
      var proxyButtonsWidth = {}; // this number is magical, but tweaking it solved the problem of items overlapping

      var tolerance = 78;

      if (this.proxyButtonContainer.current) {
        Array.from(this.proxyButtonContainer.current.children).forEach(element => {
          var buttonWidth = element.getBoundingClientRect().width + tolerance;
          var buttonKey = element instanceof HTMLElement && element.dataset.key;

          if (buttonKey) {
            proxyButtonsWidth[buttonKey] = buttonWidth;
          }
        });
      }

      this.setState({
        proxyButtonsWidth
      });
    }
  }

  measureAvailableWidth() {
    if (this.container.current && this.moreFiltersButtonContainer.current) {
      var containerWidth = this.container.current.getBoundingClientRect().width;
      var moreFiltersButtonWidth = this.moreFiltersButtonContainer.current.getBoundingClientRect().width;
      var filtersActionWidth = 0;
      var availableWidth = containerWidth - FILTER_FIELD_MIN_WIDTH - moreFiltersButtonWidth - filtersActionWidth;
      this.setState({
        availableWidth
      });
    }
  }

  getActionsToRender(actions) {
    var remainingWidth = this.state.availableWidth;
    var actionsToReturn = [];

    for (var i = 0; remainingWidth > 0 && i < actions.length; i++) {
      var action = actions[i];
      var actionWidth = this.state.proxyButtonsWidth[action.key];

      if (actionWidth <= remainingWidth) {
        actionsToReturn.push(action);
        remainingWidth -= actionWidth;
      } else {
        // When we can't fit an action, we break the loop.
        // The ones that didn't fit will be accessible through the "More filters" button
        break;
      }
    }

    return actionsToReturn;
  }

  activatorButtonFrom(action) {
    return /*#__PURE__*/React$1.createElement(Button$1, {
      onClick: action.onAction,
      disclosure: true,
      disabled: this.props.disabled || action.disabled,
      id: "Activator-".concat(action.key)
    }, action.content);
  }

  popoverFrom(actions) {
    return actions.map(action => {
      return /*#__PURE__*/React$1.createElement(Item$1, {
        key: action.key
      }, /*#__PURE__*/React$1.createElement(Popover$1, {
        active: action.popoverOpen,
        activator: this.activatorButtonFrom(action),
        onClose: action.onAction,
        preferredAlignment: "left",
        sectioned: true
      }, action.popoverContent));
    });
  }

}
ConnectedFilterControl.contextType = FeaturesContext;

export { ConnectedFilterControl };
