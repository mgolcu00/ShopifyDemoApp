import React$1 from 'react';
import { useI18n } from '../../../../utilities/i18n/hooks.js';
import { headerCell } from '../../../shared.js';
import { classNames, variationName } from '../../../../utilities/css.js';
import { CaretDownMinor, CaretUpMinor } from '@shopify/polaris-icons';
import { Icon as Icon$1 } from '../../../Icon/Icon.js';
import styles from '../../DataTable.scss.js';

function Cell({
  content,
  contentType,
  firstColumn,
  truncate,
  header,
  total,
  totalInFooter,
  sorted,
  sortable,
  sortDirection,
  verticalAlign = 'top',
  defaultSortDirection = 'ascending',
  onSort
}) {
  var i18n = useI18n();
  var numeric = contentType === 'numeric';
  var className = classNames(styles.Cell, styles["Cell-".concat(variationName('verticalAlign', verticalAlign))], firstColumn && styles['Cell-firstColumn'], firstColumn && truncate && styles['Cell-truncated'], header && styles['Cell-header'], total && styles['Cell-total'], totalInFooter && styles['Cell-total-footer'], numeric && styles['Cell-numeric'], sortable && styles['Cell-sortable'], sorted && styles['Cell-sorted']);
  var headerClassName = classNames(header && styles.Heading, header && contentType === 'text' && styles['Heading-left']);
  var iconClassName = classNames(sortable && styles.Icon);
  var direction = sorted && sortDirection ? sortDirection : defaultSortDirection;
  var source = direction === 'descending' ? CaretDownMinor : CaretUpMinor;
  var oppositeDirection = sortDirection === 'ascending' ? 'descending' : 'ascending';
  var sortAccessibilityLabel = i18n.translate('Polaris.DataTable.sortAccessibilityLabel', {
    direction: sorted ? oppositeDirection : direction
  });
  var iconMarkup = /*#__PURE__*/React$1.createElement("span", {
    className: iconClassName
  }, /*#__PURE__*/React$1.createElement(Icon$1, {
    source: source,
    accessibilityLabel: sortAccessibilityLabel
  }));
  var sortableHeadingContent = /*#__PURE__*/React$1.createElement("button", {
    className: headerClassName,
    onClick: onSort
  }, iconMarkup, content);
  var columnHeadingContent = sortable ? sortableHeadingContent : content;
  var headingMarkup = header ? /*#__PURE__*/React$1.createElement("th", Object.assign({}, headerCell.props, {
    className: className,
    scope: "col",
    "aria-sort": sortDirection
  }), columnHeadingContent) : /*#__PURE__*/React$1.createElement("th", {
    className: className,
    scope: "row"
  }, content);
  var cellMarkup = header || firstColumn ? headingMarkup : /*#__PURE__*/React$1.createElement("td", {
    className: className
  }, content);
  return cellMarkup;
}

export { Cell };
